GNU/Linux

En este artículo sobre informática se detectaron varios problemas. Por favor, edítalo para mejorarlo:
	•	Necesita referencias adicionales para su verificación.
	•	Las referencias no son claras o tienen un formato incorrecto.
	•	Podría contener información desactualizada.
	•	Requiere una revisión ortográfica y gramatical.
	•	Podría ser difícil de entender para lectores interesados en el tema.
Este aviso fue puesto el el 3 de noviembre de 2019.
Este artículo trata sobre sistemas operativos que usan el núcleo Linux y el userland de GNU. Para otros usos de este término, véase Linux (desambiguación).
GNU/Linux
Parte de la familia Unix-like





El logotipo oficial del Proyecto GNU es un ñú y del núcleo Linux el pingüino Tux
Desarrollador
Richard Stallman, Proyecto GNU, Linus Torvalds, et al.
https://gnu.org
https://kernel.org
Información general
Modelo de desarrollo
Software libre y código abierto
Lanzamiento inicial
1991
Última versión estable
5.6.11 (info)
6 de mayo de 2020 (4 días)
Última versión en pruebas
5.7-rc4 (info)
3 de mayo de 2020 (7 días)
Tipo de mercado
Multiplataforma
Escrito en
C y otros
Núcleo
Núcleo Linux
Tipo de núcleo
Núcleo monolítico
Interfaz gráfica predeterminada
varias (CLI y GUI)
Plataformas admitidas
DEC Alpha, ARM, AVR32, Blackfin, ETRAX CRIS, FR-V, H8/300, Itanium, M32R, m68k, Microblaze, MIPS, MN103, PA-RISC, PowerPC, s390, S+core, SuperH, SPARC, TILE64, Unicore32, x86, Xtensa
Sistema de gestión de paquetes
varios
Licencia
GNU General Public License y otras
Estado actual
activo, estable
Idiomas
varios
En español

 

[editar datos en Wikidata]
Escucha este artículo
(info)

Menú


0:00

Esta narración de audio fue creada a partir de una versión específica de este artículo y no refleja las posibles ediciones subsiguientes.
Más artículos grabados

¿Problemas al reproducir este archivo?
El sistema es la combinación de varios proyectos, entre los cuales destacan GNU, encabezado por Richard Stallman y la Free Software Foundation; además del núcleo o kernel «Linux», encabezado por Linus Torvalds. Su desarrollo es uno de los ejemplos más prominentes de software libre: todo su código fuente puede ser utilizado, modificado y redistribuido libremente por cualquiera, bajo los términos de la licencia GPL ─Licencia Pública General de GNU─ y otra serie de licencias.1
A pesar de que el vocablo «Linux» se utiliza en la jerga cotidiana para referirse al sistema operativo,2 3 en realidad ese es solo el nombre del kernel o núcleo del sistema. La idea de hacer un sistema completo se remonta a mediados de la década de 1980 con el proyecto GNU. De GNU también proviene una gran cantidad de los componentes del sistema, que van desde los compiladores de GNU hasta entornos de escritorio.4 Sin embargo, tras la aparición de Linux en la década de 1990 una parte significativa de los medios generales y especializados han utilizado el término «Linux» para referirse al todo.5 Cabe señalar que existen derivados de Linux que no tienen componentes GNU, así como distribuciones de GNU donde Linux está ausente.
A GNU/Linux se le encuentra normalmente en forma de compendios conocidos como distribuciones o distros, a las cuales se les han adicionado selecciones de aplicaciones y programas para descargar e instalarlas. El propósito de una distribución es ofrecer GNU/Linux como un producto final que el usuario pueda instalar, cumpliendo con las necesidades de un grupo de usuarios, o bien del público general.
Algunas de ellas son especialmente conocidas por su uso en servidores de Internet, supercomputadoras, y sistemas embebidos;6 donde GNU/Linux tiene la cuota más importante de esos mercados. Según un informe de IDC, GNU/Linux es utilizado por el 78% de los principales 500 servidores del mundo.7 Top500.org informa, en su lista de noviembre de 2017, que todas las 500 supercomputadoras más potentes del mundo utilizan Linux.8 Con menor participación, el sistema GNU/Linux también se usa en el segmento de las computadoras de escritorio, portátiles, dispositivos móviles, computadoras de bolsillo, videoconsolas y otros.
Índice
		1 Etimología
		1.1 Creación
		2 Componentes
		2.1 Entorno gráfico
		2.2 Como sistema de programación
		2.3 Aplicaciones de usuario
		2.4 Software de código abierto para GNU/Linux
		3 Empresas que patrocinan su uso
		4 Cuota de mercado
		5 Aplicaciones
		5.1 Supercomputadoras
		6 Implantación
		6.1 Administración Pública
		6.2 Fuerzas Armadas
		7 Denominación GNU/Linux
		8 Distribuciones
		8.1 Principales distribuciones GNU/Linux
		8.1.1 Debian, para uso general
		8.1.2 Ubuntu, para uso general
		8.1.3 Manjaro, para uso general
		8.1.4 Fedora, para estaciones de trabajo y servidores
		8.1.5 OpenSUSE, para administración de sistemas y servicios
		8.2 Totalmente libres a partir de GNU/Linux
		8.3 Otras distribuciones
		9 Véase también
		10 Referencias
		11 Bibliografía
		12 Enlaces externos
Etimología
Artículo principal: Controversia por la denominación GNU/Linux
Véase también:
El acrónimo recursivo GNU, GNU's Not Unix (GNU no es Unix), proviene de las herramientas básicas de sistema operativo creadas por el proyecto GNU, iniciado por Richard Stallman en 1983 y mantenido por la Free Software foundation. El nombre Linux viene del núcleo Linux, inicialmente escrito por Linus Torvalds en 1991.9
La contribución de GNU es la razón por la que existe controversia a la hora de utilizar Linux o GNU/Linux para referirse al sistema operativo formado por el sistema GNU y el núcleo Linux en su conjunto.10 11
El sistema operativo Unix fue concebido e implementado en 1969 en los laboratorios Bell de AT&T en los Estados Unidos por Ken Thompson, Dennis Ritchie, Douglas McIlroy, y Joe Ossanna.12 Por primera vez en 1971, Unix fue escrito completamente en lenguaje ensamblador, ya que era una práctica común en el momento. Más tarde, en un enfoque innovador clave en 1973, se volvió a escribir en el lenguaje de programación C por Dennis Ritchie (a excepción del núcleo y sistema I/O). La disponibilidad de un lenguaje de alto nivel para implementar Unix hizo su portabilidad a diferentes plataformas de computación más fácil; ayudando a su propagación.
Debido a un anterior caso antimonopolio que le prohibía entrar en el negocio de las computadoras, AT&T licenciaba gratuitamente el código fuente del sistema operativo para cualquier persona que lo pidiera.13 Como resultado, Unix creció rápidamente y llegó a ser ampliamente adoptado por las instituciones académicas y empresas. En 1984, AT&T se despojó de Bell Labs; quedando libre de la obligación legal que requería la concesión de dichas licencias.14
Creación
El proyecto GNU, iniciado en 1983 por Richard Stallman, tiene el objetivo de crear un "sistema de software compatible con Unix compuesto enteramente de software libre". El trabajo comenzó en el año 1984.15 Más tarde, en 1985, Stallman fundó la Free Software Foundation para financiar el desarrollo de GNU, y escribió la Licencia Pública General de GNU (GNU GPL) en 1989. A principios de la década de 1990, muchos de los programas que se requieren en un sistema operativo (como bibliotecas, compiladores, editores de texto, un shell Unix, y un sistema de ventanas) ya se encontraban en operación. Sin embargo otros elementos como los controladores de dispositivos y los daemons estaban incompletos.16
Linus Torvalds ha declarado que si el núcleo de GNU hubiera estado disponible en el momento (1991), no se habría decidido a escribir su propio núcleo.17 Aunque no es liberado hasta 1992 debido a complicaciones legales, el desarrollo de 386BSD (de los cuales NetBSD, OpenBSD y FreeBSD descienden) es anterior al de Linux. Torvalds también ha declarado que si 386BSD hubiera estado disponible en ese momento, probablemente no habría creado Linux.18
En 1991 Torvalds asistía a la Universidad de Helsinki. Usuario de MINIX y de los programas provenientes de GNU, se mostraba interesado por los sistemas operativos.19 Comenzó a trabajar en su propio núcleo en ese año, frustrado por la concesión de licencias que utilizaba MINIX, que en ese momento se limitaba a uso educativo.20 19
El núcleo Linux maduró hasta superar los otros núcleos en desarrollo.21 Las aplicaciones GNU también remplazaron todos los componentes de MINIX, porque era ventajoso utilizar el código libre del proyecto GNU con el nuevo sistema operativo. El código GNU con licencia bajo la GPL puede ser reutilizado en otros programas de computadora, siempre y cuando también se liberen bajo la misma licencia o una licencia compatible. Torvalds inició un cambio de su licencia original, que prohibía la redistribución comercial, a la GPL.22 Los desarrolladores de ambas partes trabajaron para integrar componentes de GNU con el núcleo Linux, consiguiendo un sistema operativo completamente funcional.20
Componentes
Entorno gráfico
Artículo principal: Entorno de escritorio
GNU/Linux puede funcionar tanto en entorno gráfico como en modo consola. La consola es común en distribuciones para servidores, mientras que la interfaz gráfica está orientada al usuario final tanto de hogar como empresarial. Asimismo, también existen los entornos de escritorio, que son un conjunto de programas conformado por ventanas, iconos y muchas aplicaciones que facilitan la utilización de la computadora. Los escritorios más populares en GNU/Linux son: GNOME, KDE Plasma , LXDE, LXQt, Xfce, Unity, MATE y Cinnamon.
	•	Escritorio KDE SC 4.10   
	•	Escritorio GNOME 3.0   
	•	Escritorio XFCE 4.4   
	•	Escritorio LXDE 0.5   
	•	Escritorio KDE Plasma   
	•	Escritorio LXQt   
	•	Escritorio openbox   
Como sistema de programación
La colección de utilidades para la programación de GNU es con diferencia la familia de compiladores más utilizada en este sistema operativo. Tiene capacidad para compilar C, C++, Java, Ada, Pascal, D y Fortran entre otros muchos lenguajes. Además soporta diversas arquitecturas de procesador mediante la compilación cruzada, lo que hace que sea un entorno adecuado para desarrollos heterogéneos.
Hay varios entornos de desarrollo integrados disponibles para GNU/Linux incluyendo, Anjuta, KDevelop, Lazarus, Ultimate++, Code::Blocks, NetBeans IDE y Eclipse. También existen editores extensibles como Emacs o Vim. GNU/Linux también dispone de capacidades para lenguajes de guion (script), aparte de los clásicos lenguajes de programación de shell, o el de procesado de textos por patrones y expresiones regulares conocido como awk. La mayoría de las distribuciones tienen instalado Python, Perl, PHP y Ruby.
Aplicaciones de usuario
Las aplicaciones para GNU/Linux se distribuyen en una variedad de formatos debido a la diversidad de métodos de manejo de paquetes, algunos más listos para ser ejecutados que otros. Mientras que en sistemas como Windows o MacOS el usuario normalmente busca el software de terceros por su cuenta; las distribuciones GNU/Linux fueron pioneras de los repositorios curados de aplicaciones soportadas oficialmente por el sistema operativo, similar a las tiendas de aplicaciones modernas.23 24 Las aplicaciones precompiladas existen mayoritariamente en los formatos .deb y .rpm, usados en Debian y Red Hat respectivamente y sus descendientes. También existe la posibilidad de compilar los programas en forma de recetas make a partir de su código fuente, y algunos desarrolladores de aplicaciones solo distribuyen su software de esta manera, transfiriendo la labor de crear un programa ejecutable a las distribuciones interesadas en empaquetar su aplicación, o al usuario.
Software de código abierto para GNU/Linux
Durante la primera época había pocas aplicaciones de código cerrado para GNU/Linux. Con el tiempo se fueron uniendo programas no libres al sistema GNU/Linux, entre ellos Adobe Reader, Adobe Flash, Opera, entre otros.
Empresas que patrocinan su uso
Con la adopción por numerosas empresas fabricantes, un buen número de computadoras se venden con distribuciones preinstaladas, y GNU/Linux ha comenzado a tomar su lugar en el vasto mercado de las computadoras de escritorio.
Algunas de las empresas que colaboran en la difusión de este sistema operativo ya sea trabajando en el núcleo Linux, proporcionando soluciones de software o preinstalando el sistema operativo, son: Intel ,25 26 27 Google,28 29 IBM,30 AMD,31 32 33 34 Sun Microsystems,35 Dell,36 37 Lenovo,38 39 Asus,40 Hewlett-Packard (HP),41 42 43 Silicon Graphics International (SGI),44 Renesas Technology,45 Fujitsu,46 Analog Devices,47 Freescale,48 VIA Technologies,49 Oracle,50 Novell51 y RedHat,52 entre otras.53
El respaldo de compañías de software también está presente, ya que, entre otras aplicaciones, Nero, Java, Google Earth, Google Desktop, Adobe Reader, Adobe Flash, RealPlayer y Yahoo! Messenger están disponibles para GNU/Linux. Al haber software equivalente, es innecesario instalar los precisamente mencionados con anterioridad.
Cuota de mercado
Artículo principal: Adopción de Linux
Numerosos estudios cuantitativos sobre software de código abierto están orientados a temas como la cuota de mercado y la fiabilidad, y ciertamente muchos de estos estudios examinan específicamente a GNU/Linux.54
La medición "cuota de mercado" puede resultar inservible ya que es un concepto basado en ventas comerciales (unidades materiales vendidas). Por otro lado Linux es utilizado frecuentemente en servidores con acceso público desde Internet por lo que la cuota de mercado es extremadamente inferior a la cuota de uso. Baste notar, p.ej, que Facebook, Gmail, LinkedIn o Yahoo funcionan sobre servidores GNU/Linux, de tal forma que cuando estamos accediendo desde un navegador ejecutándose en Windows/Mac, la aplicación real se está ejecutando en servidores Linux y los datos están almacenándose igualmente en dichos servidores.
Hay varias empresas que comercializan soluciones basadas en GNU/Linux: IBM, Novell (SuSE), Red Hat (RHEL), Mandriva (Mandriva Linux), Rxart, Canonical Ltd. (Ubuntu), así como miles de PYMES que ofrecen productos o servicios basados en esta tecnología.
Una aproximación estadística básica y estimada sobre número de usuarios de GNU/Linux a escala global lo ofrece el proyecto Linux Counter.
Aplicaciones
Supercomputadoras
Dentro del segmento de las supercomputadoras, a noviembre de 2017, el uso de este sistema ascendió al 100% de las computadoras más potentes del mundo por su confiabilidad, seguridad y libertad para modificar el código.55 De acuerdo con TOP500.org, que lleva estadísticas sobre las 500 principales supercomputadoras del mundo, a noviembre de 2017: las 500 usaban una distribución basada en GNU/Linux.
GNU/Linux, además de liderar el mercado de servidores de Internet debido, entre otras cosas, a la gran cantidad de soluciones que tiene para este segmento, tiene un crecimiento progresivo en computadoras de escritorio y portátiles. Además, es el sistema base que se ha elegido para el proyecto OLPC: One Laptop Per Child.56
El CERN (Organización Europea para la Investigación Nuclear) usa Linux, primero Scientific Linux y luego crearon CCentSO (CERN CentOS), una versión de CentOS específica para las aplicaciones del CERN.57 58
Para saber más sobre las arquitecturas soportadas, lea el artículo "Portabilidad del núcleo Linux y arquitecturas soportadas".
Implantación
Administración Pública
Véase también: Software libre en la Administración Pública
Hay una serie de administraciones públicas que han mostrado su apoyo al software libre, sea migrando total o parcialmente sus servidores y sistemas de escritorio, sea subvencionándolo. Como ejemplos se tiene a Alemania, Argentina, Australia, Brasil, España, Chile, China, Cuba, México, Perú, Ecuador, El Salvador, Uruguay y Venezuela.
Fuerzas Armadas
El sistema operativo del General Atomics MQ-1 Predator está basado en GNU/Linux,59 así como el del Boeing P-8 Poseidon.60
Denominación GNU/Linux
Artículo principal: Controversia por la denominación GNU/Linux
Parte de la comunidad y numerosos medios prefieren denominar a esta combinación como Linux, aunque GNU/Linux (con las variantes GNU con Linux y GNU+Linux) es la denominación defendida por el Proyecto GNU y la FSF junto con otros desarrolladores y usuarios para el conjunto que utiliza el sistema operativo Linux con las aplicaciones de sistema creadas por el proyecto GNU y por muchos otros proyectos de software.61 62
Desde 1984, Richard Stallman y muchos voluntarios están intentando crear un sistema operativo libre con un funcionamiento similar al UNIX, recreando todos los componentes necesarios para tener un sistema operativo funcional. A comienzos de los años 90, unos seis años desde el inicio del proyecto, GNU tenía muchas herramientas importantes listas, como editores de texto, compiladores, depuradores, intérpretes de comandos de órdenes etc., excepto por el componente central: el núcleo.
GNU tiene su propio proyecto de núcleo, llamado Hurd. Sin embargo, su desarrollo no continuó como se esperaba al aparecer el núcleo Linux. De esta forma se completaron los requisitos mínimos y surgió el sistema operativo GNU que utilizaba el núcleo Linux.
El principal argumento de los defensores de la denominación GNU/Linux es resolver la posible confusión que se puede dar entre el núcleo (Linux) y gran parte de las herramientas básicas del resto del sistema operativo (GNU), y del sistema completo que usualmente se usa como combinación de GNU, Linux, y otros proyectos de software. Además, también se espera que con el uso del nombre GNU, se dé al proyecto GNU el reconocimiento por haber creado las herramientas de sistema imprescindibles para ser un sistema operativo compatible con UNIX, y se destaque la cualidad de estar compuesto solo por software libre. La primera distribución que incluyó el GNU en su nombre fue Yggdrasyl en 1992, donde aparecía como Linux/GNU/X. La FSF denominó a este sistema "Linux" hasta al menos junio de 199463 y recién a partir de enero de 1995 empezó a llamarlo "GNU/Linux" (también GNU+Linux y lignux, términos que han caído en desuso a instancias del propio Stallman).64
GNU
/
Linux

+

Algunas distribuciones apoyan esta denominación, e incluyen GNU/Linux en sus nombres, como Debian GNU/Linux o GNU/LinEx, mientras que otras, como Slackware, Gentoo o Ubuntu, eligen denominarse basadas en Linux.65 66 67
En ocasiones, el proyecto KDE ha utilizado una tercera denominación: GNU/Linux/X para enfatizar los tres proyectos sobre los que se apoya su entorno de escritorio.
Distribuciones
Artículo principal: Distribución Linux
Una distribución de Linux es una distribución de software basada en el núcleo Linux que incluye determinados paquetes de software para satisfacer las necesidades de un grupo específico de usuarios, dando así origen a ediciones domésticas, empresariales y para servidores. La distribución más famosa es Ubuntu, la cual ha sido una de las que han hecho famoso a Linux en el mundo y equiparable a otros sistemas como Windows o macOS, pero Ubuntu no existiría sin Debian, una de las más antiguas y grandes distribuciones de la cual se basó Canonical para desarrollar Ubuntu.
Principales distribuciones GNU/Linux
Debian, para uso general
Artículo principal: Debian
Debian es una distribución de GNU/Linux realizada por una comunidad de desarrolladores y usuarios. Esta asociación de personas unidas por la causa de crear un sistema operativo 100% libre, y lo denominaron Proyecto Debian. Además se la considera una distribución madre, ya que a partir de Debian nacieron infinidad de distribuciones como Ubuntu o Mint entre otras.
Ubuntu, para uso general
Artículo principal: Ubuntu
Es una de las más utilizadas junto con Debian. Fue desarrollada y mantenida por la empresa Canonical, se orienta a usos generales y se caracteriza por su compatibilidad de software y facilidad de uso equiparable a Mac OS X o Windows. Cuenta con varias versiones, entre las que destacan: Ubuntu Desktop, Xubuntu, Lubuntu y Ubuntu Server.
Manjaro, para uso general
Artículo principal: Manjaro Linux
Esta distribución llegó al segundo puesto en DistroWatch, está enfocada en la facilidad de uso. Usa un modelo de desarrollo denominado rolling release o de Liberación continua.
Fedora, para estaciones de trabajo y servidores
Artículo principal: Fedora (distribución Linux)
Distribución para propósitos generales, que se caracteriza por ser estable y seguro, la cual es desarrollada y mantenida por la empresa Red Hat y una comunidad internacional de ingenieros, diseñadores gráficos y usuarios que informan de fallos y prueban nuevas tecnologías. Sus usos se orientan más al desarrollo de software y servidores.
OpenSUSE, para administración de sistemas y servicios
Artículo principal: OpenSUSE
Distribución auspiciada por SUSE Linux GmbH (una división independiente de The Attachmate Group), y AMD. Se orienta en ofrecer un sistema operativo estable, potente y administrable para usos realmente avanzados, pero con una gran facilidad para todo público en general.
Totalmente libres a partir de GNU/Linux
Son distribuciones seriamente comprometidas con el Software libre y se abstienen de incluir aplicaciones, manuales y documentación que no sean libres.68 Algunas de ellas son:68
	•	Dragora GNU/Linux.
	•	Dyne:bolic.
	•	gNewSense.
	•	GNU Guix.
	•	Hyperbola GNU/Linux-libre.
	•	Parabola GNU/Linux.
	•	PureOS (Librem).
	•	Trisquel GNU/Linux.
	•	UTUTO XS GNU/Linux.
Otras distribuciones
	•	Debian 8.4 (actualmente)   
	•	Arch Linux   
	•	Huayra GNU/Linux 3.2 (actualmente)   
	•	Fedora 15   
	•	Gentoo Linux 12.1 (actualmente)   
	•	openSUSE 42.1 (actualmente)   
	•	Ubuntu MATE 15.04   
	•	Ubuntu 18.10 (actualmente)   
	•	
	•	  Deepin 15.4   
Véase también
	•	 Portal:Linux. Contenido relacionado con Linux.
	•	 Portal:Software libre. Contenido relacionado con Software libre.
	•	Android
	•	GNU Hurd
	•	Núcleo Linux
	•	Historia de Linux
	•	Distribución Linux
	•	GNU
	•	Unix
	•	Linux-libre
	•	Categoría:Distribuciones GNU/Linux libres
	•	Software para Linux
	•	Controversia por la denominación GNU/Linux
	•	Anexo:Distribuciones Linux
Referencias
	1	Linux.org. «Linux Online - About the Linux Operating System» (en inglés). Archivado desde el original el 17 de diciembre de 2008. Consultado el 9 de enero de 2009.
	2	The operating system interacts directly with the hardware, providing common services to programs and insulating them from hardware idiosyncrasies. Viewing the system as a set of layers, the operating system is commonly called the system kernel, or just the kernel, emphasizing its isolation from user programs. Because programs are independent of the underlying hardware, it is easy to move them between UNIX systems running on different hardware if the programs do not make assumptions about the underlying hardware.  Maurice J. Bach, "The design of the unix operating system", Prentice/Hall, 1986, p. 4 
	3	Its important to realize that these programs are not part of the operating system (...). The operating system is the portion of the software that runs in kernel mode (...). A trend in modern operating systems is to take this idea of moving code up into higher layers even further and remove as much as possible from the operating system, leaving a minimal kernel (Refiriéndose a un sistema micronúcleo basado en el modelo cliente-servidor. El autor indica repetidamente que es razonable argumentar que las funciones que pasan a ejecutarse en espacio de usuario siguen siendo parte del sistema operativo).  Operating Systems Design & Implementation, Tanenbaum y Woodhull. 
	4	¿Cuál es la diferencia entre un sistema operativo y un núcleo?? Un sistema operativo, como usamos el término, significa una colección de programas que son suficientes para usar la computadora para una realizar una variedad de trabajos. Un sistema operativo de propósito general, para ser completo, debería manejar todos los trabajos que diversos usuarios pueden querer realizar.  El núcleo es uno de los programas en un sistema operativo, el programa que distribuye los recursos de la máquina a los otros programas que estén ejecutándose. El núcleo también se encarga de iniciar y parar otros programas.  Para confundir aún más las cosas, hay personas que emplean la expresión «sistema operativo» para referirse al «núcleo». Esos dos usos de la expresión se remontan a muchos años atrás. El empleo de «sistema operativo» para referirse al «núcleo» se encuentra en numerosos libros de texto sobre diseño de sistemas, desde los años ochenta. Al mismo tiempo, en esos años se entendía que el «sistema operativo Unix» incluía todos los programas del sistema, y la versión de Unix de Berkeley incluía incluso juegos. Como pretendíamos que GNU fuera un sistema operativo similar a Unix, empleamos la expresión «sistema operativo» en el mismo sentido.  La mayoría del tiempo, cuando las personas hablan del «sistema operativo Linux» están usando «sistema operativo» en el mismo sentido que nosotros: se refieren a la colección completa de programas. Si eso es a lo que usted se refiere, llámelo «GNU/Linux», por favor. Si sólo se refiere al núcleo, entonces el nombre correcto para eso es «Linux», pero diga también «núcleo» para evitar la ambigüedad sobre el cuerpo de software al que se refiriere, por favor.  Si prefiere usar algún otro término como «distribución de sistema» para la colección entera de programas, en vez de «sistema operativo», está bien. Entonces, hablaría de distribuciones de sistema GNU/Linux.  FAQ del Proyecto GNU 
	5	Williams, Sam (marzo de 2002). «Richard Stallman's Crusade for Free Software» (html). O'Reilly Media (en inglés). Consultado el 25 de junio de 2019. « Stallman wanted Murdock to call its distribution "GNU/Linux." At first, Murdock says, Stallman had wanted to use the term " Lignux"-"as in Linux with GNU at the heart of it"-but a sample testing of the term on Usenet and in various impromptu hacker focus groups had merited enough catcalls to convince Stallman to go with the less awkward GNU/Linux. ».
	6	Lyons, Daniel. «Linux rules supercomputers» (en inglés). Consultado el 8 de enero de 2009.
	7	«GNU/Linux es utilizado por el 78% de los principales 500 servidores del mundo». Consultado el 5 de junio de 2010.
	8	«Operating system Family share for 11/2017». Consultado el 13 de marzo de 2018.
	9	"Free minix-like kernel sources for 386-AT". comp.os.minix. (Google Groups).
	10	Richard Stallman. «¿Por qué GNU/Linux». Consultado el 8 de enero de 2009.
	11	Weeks, Alex (2004). «1.1». Linux System Administrator's Guide (versión 0.9 edición). Consultado el 18 de enero de 2007.
	12	Ritchie, D.M. (Octubre 1984), "The UNIX System: The Evolution of the UNIX Time-sharing System", AT&T Bell Laboratories Technical Journal, 63 (8): 1577, “Sin embargo, UNIX nació en 1969 ...”
	13	"Origins and History of Unix, 1969–1995" Archivado el 10 de junio de 2015 en la Wayback Machine.. Faqs.org. Consultado el 01 de abril del 2017.
	14	«o 92 100 Libres de Linux o 93 Otras distribuciones 10 Véase también 11». www.coursehero.com (en inglés). Consultado el 12 de noviembre de 2018.
	15	"About the GNU Project – Initial Announcement". Gnu.org. 23 de junio del 2008. Consultado el 01 de abril del 2017 .
	16	"Overview of the GNU System". Gnu.org. Consultado el 1 de abril del 2017.
	17	"Linus vs. Tanenbaum debate". Archivado desde el original el 3 de octubre del 2012. Consultado el 1 de abril del 2017.
	18	Linksvayer, Mike (1993). "La elección de una Generación GNU - Entrevista con Linus Torvalds". Consultado el 1 de abril del 2017.
	19	↑ a b Torvalds, Linus. "What would you like to see most in minix?". Newsgroup: comp.os.minix. Consultado el 1 de abril del 2017.
	20	↑ a b MINIX está disponible bajo la licencia BSD" , 9 de abril de 2000, minix1.woodhull.com
	21	Linus Torvalds (14 de octubre, 1992). "The Choice of a GNU Generation – An Interview With Linus Torvalds". Meta magazine comp.os.minix . Consultado el 1 de abril del 2017.
	22	Torvalds, Linus (5 de enero, 1992). "Notas de la versión para Linux v0.12" . Archivos del kernel de Linux. Archivado desdeel original el 19 de agosto de 2007 . Consultado el 1 de abril del 2017. “Los derechos de autor de Linux cambiarán: He tenido un par de peticiones para hacerlo compatible con el copyleft de GNU, eliminando la condición "no puedes distribuirlo por dinero". Estoy de acuerdo. Propongo que se modifique el copyright para que confirme a GNU - pendiente de aprobación de las personas que han ayudado a escribir código. Supongo que esto no va a ser un problema para nadie: Si tiene quejas ("Escribí ese código suponiendo que los derechos de autor permanecerían iguales") envíeme un correo. De lo contrario El copyleft GNU entrará en vigor desde el primero de febrero. Si no conoce la esencia de los derechos de autor de GNU, léalo.”
	23	Ian Murdock. «How package management changed everything». Ian Murdock (en inglés estadounidense). Consultado el 7 de enero de 2018.
	24	Searls, Doc (1 de enero de 2016). «Ian Murdock: a tribute to the man and his work on Linux». The Guardian (en inglés británico). ISSN 0261-3077. Consultado el 7 de enero de 2018.
	25	«Intel Linux Graphics». Consultado el 2009.
	26	«Intel® Wireless WiFi Link drivers for Linux*». Archivado desde el original el 13 de diciembre de 2012. Consultado el 2009.
	27	«Intel claims No. 2 Linux contributor spot as hedge against Microsoft | The Open Road - CNET News». Consultado el 2009.
	28	«redhat.com | The World's Open Source Leader». Consultado el 2009.
	29	«Centro de prensa - Google presenta el sistema operativo Google Chrome». Consultado el 2009.
	30	«IBM and Linux». Consultado el 2009.
	31	«AMD liberará los drivers de las ATI». Archivado desde el original el 11 de junio de 2018. Consultado el 2009.
	32	«Ya hay soporte 3D libre para tarjetas ATI R500». Archivado desde el original el 31 de julio de 2018. Consultado el 2009.
	33	«AMD libera las especificaciones de sus chips R600/R700». Archivado desde el original el 4 de agosto de 2018. Consultado el 2009.
	34	«AMD libera las especificaciones de la arquitectura R7x0». Archivado desde el original el 3 de agosto de 2018. Consultado el 2009.
	35	«Sun's GNU/Linux Offerings». Consultado el 2009.
	36	«Dell Linux - Community Web». Consultado el 2009.
	37	«Dell to expand Linux PC offerings, partner says». Consultado el 2009.
	38	«Lenovo Support & downloads - Linux for Personal Systems». Consultado el 2009.
	39	«Lenovo ya suministra portátiles con Linux». Archivado desde el original el 21 de abril de 2005. Consultado el 2009.
	40	«ASUS Eee PC - Specifications». Consultado el 2009.
	41	Open Source and Linux from HP
	42	«HP y el sistema Linux».
	43	«HP Open Source and Linux - HP Linux Home».
	44	«SGI - oss.sgi.com: Open Source Project List». Archivado desde el original el 25 de mayo de 2009. Consultado el 2009.
	45	«Renesas Technology - Embedded Linux Distributions». Archivado desde el original el 14 de agosto de 2007. Consultado el 2009.
	46	«linux Fujitsu». Archivado desde el original el 19 de septiembre de 2011. Consultado el 2009.
	47	«ADI - Analog Dialogue | Open Source». Consultado el 2009.
	48	«Freescale Open Source». Consultado el 2009.
	49	http://linux.via.com.tw
	50	«Free and Open Source Software from Oracle». Consultado el 2009.
	51	«SUSE Linux Enterprise». Consultado el 2009.
	52	«Enterprise Linux-Open Source Application for Servers and Desktops built on Linux». Consultado el 2009.
	53	Linux Kernel Development Archivado el 31 de enero de 2010 en la Wayback Machine.
	54	Wheeler, David A. «Why Open Source Software/Free Software (OSS/FS)? Look at the Numbers!» (en inglés). Consultado el 1 de abril de 2006.
	55	«Operating system Family share for 12/2012 | TOP500 Supercomputing Sites». Consultado el 2013.
	56	«One Laptop per Child (OLPC): Frequently Asked Questions». Consultado el 2009.
	57	«CERN deja de usar programas de Microsoft para comenzar a usar código abierto». LINUX ADICTOS. Consultado el 19 de septiembre de 2019.
	58	«Linux y OpenStack: dos tecnologías críticas para el CERN». MuyLinux. 2 de mayo de 2018. Consultado el 19 de septiembre de 2019.
	59	http://linuxzone.es/2012/01/13/la-fuerza-aerea-de-ee-uu-migra-a-gnulinux-por-culpa-de-un-virus/
	60	http://www.laflecha.net/canales/softlibre/boeing-usara-linux-en-sus-aviones-militares/
	61	Véase, por ejemplo, "linux is not gnu/linux".
	62	Véanse, por ejemplo, estas notas en los diarios El País (España) o Clarín (Argentina), o las publicaciones especializadas LinuxWorld, Linux Weekly News, Linux Magazine, [http://www.linuxgazette.net Linux Gazette.
	63	GNU's Bulletin, vol. 1 no. 17, http://www.gnu.org/bulletins/bull17.html.
	64	"GNU's Bulletin, vol. 1 no. 18". http://www.gnu.org/bulletins/bull18.html.
	65	«About Us - Ubuntu». Consultado el 2009.
	66	«FAQ - FedoraProject». Consultado el 2009.
	67	«Gentoo Linux - Acerca de Gentoo». Consultado el 2009.
	68	↑ a b «Distribuciones libres de GNU/Linux» (html). Fundación por el Software Libre. 14 de mayo de 2019. Consultado el 25 de junio de 2019. «Estas distribuciones están completas y listas para usar, y sus desarrolladores se han comprometido a seguir las Pautas para distribuciones de sistemas libres. Esto significa que las distribuciones incluirán y propondrán exclusivamente software libre. Rechazarán las aplicaciones, plataformas de programación, controladores, firmware, «blobs», juegos y cualquier otro software que no sea libre, así como manuales y documentación que no sean libres.»
Bibliografía
	•	Glyn Moody. Glyn Moody: Rebel Code: Linux and the Open Source Revolution. (en inglés). Perseus Publishing. ISBN 0-7139-9520-3. Consultado el 2009.
	•	Gedda, R. (2004). «Linux breaks desktop barrier in 2004: Torvald» (en inglés). Archivado desde el original el 4 de febrero de 2005. Consultado el 2009.
	•	Mackenzie, K. (2004). «Linux Torvalds Q&A».
	•	Marcinkowski, A. (2003). «Linux needs reconsideration» (en inglés). Archivado desde el original el 16 de julio de 2012. Consultado el 2009.
Enlaces externos
	•	 Wikimedia Commons alberga una galería multimedia sobre GNU/Linux.
	•	 Wikilibros alberga un libro o manual sobre Introducción a GNU/Linux.
	•	 Wikiversidad alberga proyectos de aprendizaje sobre GNU/Linux.
	•	 Wikinoticias tiene noticias relacionadas con GNU/Linux.
	•	Free Software Foundation (en inglés)
	•	The Linux Kernel Archives - Sitio Oficial del núcleo de Linux (en inglés)
	•	Linux y el Proyecto GNU, por Richard Stallman
	•	Preguntas frecuentes sobre GNU/Linux, por Richard Stallman
	•	The Origins of Linux - Linus Torvalds en YouTube (en inglés)
  The Ultimate Guide to Linux for everyday people
The Ultimate Linux Newbie Guide
The official eBook from the website:
www.linuxnewbieguide.org
 made with
  
 Table of Contents
1. Introduction
2. About the Author
3. Chapter One
4. What is Linux
5. Chapter Two
6. Why Linux - What are the Benefits?
7. Chapter Three
8. Choosing a Linux Distribution
9. Chapter Four
10. PreparingtoInstallLinux
11. ChapterFive

  12. InstallingLinux(Ubuntu)
13. ChapterSix
14. HowdoIgetsoftwareforLinux?
15. ChapterSeven
16. HowdoIinstallsoftware?
17. ChapterEight
18. UsingLinuxEveryDay
19. QuickTips
20. HowtoputaLinuxISOontoaUSBstickandmakeit bootable on a Mac
21. HowtomountaUSBstickasanon-rootuserwith write permission
22. ConvertimagesatthecommandlinewithImageMagick
23. WhatisX,XFree,XOrgorXWindows?
 24. HowtoautomaticallymakeyourWindowsdrives become available to Linux on startup.

   25. HowtoreadandwritetoWindowsNTFSdrivesasany user
26. HowtouseaMactocreateaLinuxLiveUSBStickand Boot it
27. HowtoinstallLinuxonaMacintoshcomputer
28. SysAdminTips
29. CommandLineInterface
30. Files,DirectoriesandtheLinuxFilingSystem
31. HowtoMountWindowsorSambaShares Permanently
32. Disablelogginginwiththerootaccount
33. Quicktip:Addausertothesudoersgroup
34. Addinguserstogroups
35. HowToSetUpSSHKeys
36. SysAdminTips:ViMTextEditor101Guide
 37. WhatisDocker(andLinuxcontainers?)

 38. runningacommandagainsteverylineinatextfile
39. Monitoringnetworkbandwidth,CPUandmemory effectively
40. Howtotar(compress)filesup,excludingcertainfiles or directories
41. Analysingsystemperformancewith'Top'
42. ThanksforReading!
 
 Introduction
 Since 2001, The Ultimate Linux Newbie Guide has been helping individuals switch to the Linux Operating System. This guide can help both beginners and seasoned computer users alike learn all the important parts of choosing, using and installing Linux, a great free operating system for your computer and help you remove dependency on non-free, closed source software that is commonplace in Microsoft Windows or Mac OS.
Throughout the guide, you'll find out why Linux offers a real alternative to other operating systems, how you can install Linux on to your computer for free, and
how to get to grips with using Linux on a daily basis without any techno jargon! On the website we also have an up to date blog with different sections including
Quick Tips, Quick examples, a Sys Admin section and more!
I hope that the Ultimate Linux Newbie Guide helps you into a new world of
freedom when using your computer and hopefully makes you smile along the way! Alistair J. Ross, January 2017.
  
 About the Author
Since the 1990's, Alistair has been working with Linux in many capacities, either by using it himself for his career, by teaching others, and by making free software.
Alistair holds a BSC (Hons.) in Computing, as well as many certifications from various Linux based vendors such as Red Hat.
Thanks for reading this eBook version of the website, if you enjoy it, please do let me know. My contact details are below in the 'Get in touch' paragraph.
Alistair Ross
 Consultancy Services
With over fifteen years of experience in Linux, if you are in need of Open Source based support or consulting services, be it remote assistance or in-person
 
 (Wellington, New Zealand only), then look no further than the author of this website! exposure to Linux in both large corporate environments such as Amazon, GE as well as small businesses, Alistair J. Ross has been at the forefront of Linux for most of his professional life. He loves providing creative solutions and best of all, it's at a rate suitable to you or your business.
Results based outcomes with the skills to back it up!
Alistair has expert knowledge with many open source technologies including LAMP (Linux, Apache, MySQL, PHP). Web programming and databases is no problem. From CMS customisation including Wordpress, Drupal and Joomla to Kernel performance tuning, Alistair can help make your open source visions a reality. Talk to Alistair today about your open source based personal or business needs and see how he can match them to a solution that fits your needs.
Training without the Techno-babble!
Alistair prides himself in being a people person, not a techno-babble speaking geek, so if you need one on one training or class based sessions for your business, why not discuss your training needs to find the perfect programme for you.
Can you integrate with non-Open Source?
Of course! Computing only exists through the existence of multiple technologies and technology businesses. Without Microsoft, IBM or Apple - would there even be Open Source? Who knows! The fact that your business needs to operate in a world with many different technology sources means that interoperation is the reality of any outcome based business.
Get in touch!
Alistair now operates an open source consulting business, OpenTech, click the
below link to contact OpenTech.
> Contact Alistair today! <
 
  Chapter One
If you are completely new to Linux, or any Operating system for that fact, this chapter covers all of the main primer aspects including:
What an Operating System is What Linux is all about How Linux differs from Unix
Check out chapter one on the website
  
 What is Linux
Topics covered in this chapter:
1.1 What's An Operating system?
1.2 What is UNIX (and a little bit of history) 1.3 How does Linux differ from UNIX?
Linux, By Definition:
The above definition is probably not going to help you much if you don't know what an Operating system is, and what this UNIX thing is, so let's start at the first major point: What is an Operating system? I promise I won't make it boring!
1.1 What's An Operating System?
Imagine you have a brand new computer. Imagine that nobody had put a disk of any kind into it, ever. That would mean that there was no software installed on the system. If you switched the computer on; It would beep a few times and then tell you that it couldn't start an operating system. The most important software to a
 Linux is an open source UNIX-like operating system which is popular for it's robustness and availability.
  
 computer is one thing: -- the Operating System.
Without an Operating system, you couldn't surf the web, you couldn't play music, you couldn't write letters. You can't do anything.
Some of you will have heard of famous operating systems already but may not fully appreciate it. For example, Microsoft make a well known operating system called Windows, Apple make two that you may know: MAC OS X (on most Macintosh computers) and iOS (on iPhones and iPads). An operating system is the software that sits between you, the user, and the hardware inside the computer. If you click the mouse on an icon on your screen, the operating system interprets that you want to load the program that you are clicking on. For all of this to happen, The Operating system (some times referred to as the OS or O/S) must know how to use a screen (to show you what's going on), to use a mouse (so you can move it around and click with it), to use your hard disk drive (to load up the data from it). It must also need to know pretty much everything else about the hardware installed inside your computer, ie: RAM, Floppy/CD drives, keyboards, joysticks, sound controllers, graphics controllers, printers, scanners, etc.
So when you start typing a letter, for example, you have already loaded up a word processing piece of software. This software is called application software and is running 'on top' of the Operating System, but nonetheless, all of the time whilst the word processor application is running, it talks constantly to the O/S for vital information.
Okay, we've established that an O/S is necessary, but what else does an O/S do: Probably the most basic and yet essential tasks of an operating system is the job of managing our files and data. A basic O/S should be able to do the following with files and folders:
Create them
Move them to other directories
Rename them
Copy them
Delete/remove them
Send and receive files to/from other devices such as Printers/Scanners and your Internet connection.
...and a bit more.
Now you have the idea of what an Operating system is, let's find out about a specific type of operating system called UNIX...
       
 1.2 What is UNIX? (And a little bit of history)
 The operating system UNIX began life in 1969, in Bell Labs, a division of the American telephone firm, AT&T. There are now many different types of UNIX, making it one of the longest running commercial operating systems available, way longer than Microsoft Windows or Apple MacOS.
UNIX History Timeline
Linux is just one type of UNIX which is most famously known for being a free (as in free speech) derivative of UNIX. Most of UNIX's different flavours are still being updated and are still in use all over the world today. Here are just some popular manufacturers and brands of UNIX, that you may or may not have heard of before:
Sun Microsystems (now Oracle): Solaris. Developed from 1993, Solaris was a leader in the commercial UNIX world until the prevalence of open source software & Linux.
Hewlett Packard: HP/UX. HP's implementation of the UNIX standard System V, released in 1984 and is still being used today in some enterprise environments.
Berkley University: NetBSD and FreeBSD. Berkely Systems Distribution (or BSD) is the closest match to Linux in terms of a direct relationship.
With the exception of FreeBSD, there was (and still is) a pretty grand fee to own one of the above versions of UNIX. Mainly large commercial organisations and universities have traditionally used these UNIX variants, however Linux appears to be replacing traditional UNIX on a lot of corporate systems due to it's proven track
   
 record, it's growing reputation as a contender to UNIX, and it's low price tag, which can often be free.
UNIX is good because it is a true multi-tasking, multi-user operating system. This means that it can do more than one thing at a time and it can provide all it's services to lots of users at the same time. Modern day workplaces rely on servers to provide a central resource of information and connectivity to users. UNIX was also the platform that many firsts came on: The Internet, the C programming language which is the basis for most modern computer programming languages. These were all firsts that took the other operating systems like Windows and Mac OS a long time to catch up to. In fact, today, Mac OS X is built on a version of UNIX: BSD.
So, Unix is pretty clever, huh? Well, yes. It is, but Unix was also traditionally a pretty boring system that involved learning lots of commands that were tedious to learn.
Why don't we all use UNIX today if it's so good?
In 1981, a small company based in Seattle called Microsoft released an operatin
g system, which through chance (Digital Research were supposed to get the contract), were taken on by IBM to go on their new home/small office based computer: the IBM PC (or Personal Computer). This system was also not graphical. It required commands, in a similar format to UNIX or CP/M, but they were a little easier to use, at the cost of being simpler and less powerful. The main pitfall of MS-DOS - (Microsoft's PC Operating System) was, that it had no multi-user, multi- tasking or networking support as standard. By the early 1990's, this was really starting to wear on PC users. UNIX still had far more power than most operating systems of the time, it was just way too expensive, and legal issues between UNIX vendors licensing UNIX was causing headaches and therefore did not have much exposure outside of large organisations, educational establishments and government offices.
During the 80's, Apple had released another computer, which was separate from the PC, and did not run any PC software, because it relied on it's own O/S, named
  
 MacOS. This time, Apple had decided to make an operating system that was graphical, and later, incorporated colour, pictures, icons and even sounds! Instead of typing everything into the keyboard as commands, the same actions could be made as clicks and movements with a mouse. As with all things Apple, this was revolutionary at the time and changed the face of the world of computing.
The UNIX world, still very different to the market of the PC and the Mac, not long after the mac got it's graphical operating system, begun to create a graphical front- end to it's command-line world, it was called X, or 'The X Window System'.
In 1990, Microsoft eventually released Windows 3.0 (versions 1 and 2 did not sell well). Windows at the time was a 16-bit, single-tasking, single user, graphical interface built on-top of MS-DOS. UNIX still prevailed: it was multi-user, multi- tasking and it worked on 32 or 64-bit platforms.
It took until 1995, with the advent of Microsoft Windows 95 for Windows to finally go 32 bit, multi tasking, and capable of being multi-user (although not best suited: Windows NT came along shortly after, to do that job).
1.3 How does Linux differ from UNIX?
During the time from 1991 to 1995, many computing or engineering students were accustomed to the power of UNIX and X, at university. In Uni, most students had wonderful new things like E-Mail, The Internet and more. At home, they would have to make do with their 16 bit computers, waiting for all these powers to come to their homes one day.
Enter: Linus Torvalds
Linus was, in 1991, a student in Finland studying Computer programming at The University of Helsinki. Linus used UNIX at University on a daily basis. He got bored of his 386 PC running MS-DOS, and decided to start his own kernel, which is the
 
 name for the code at the heart of every operating system that talks to the hardware directly. He wanted to distribute the software freely, because it was a hobby, not a commercial product, and also to see what others thought of it. He finished the first Linux kernel in late 1991. Not only had he made a 32 bit kernel, in which programs could be run he made it do quite a lot to make it look and feel like Unix, but he didn't have any software to run on it.
Here is Linus' very first post to the Internet in 1991, about the creation of what would become Linux:
 Hello everybody out there using minix -
I'm doing a (free) operating system (just a hobby, won't be big and professional like gnu) for 386(486) AT clones. This has been brewing since april, and is starting to get ready.
Luckily, an ex-student in the USA, by the name of Richard Stallman had created a team of programmers devoted to free software, he called this the Free Software Foundation, who believed in making software free to distribute, and free to obtain the source code along with it so that others could make improvements to the software through the Internet. The GNU GPL (General Public License) that the Free Software Foundation made, also stated that the authors of the software could charge for the software, as long as they are willing for it to be freely distributed. By creating community-based software, that has open standards and is subject to peer review, the quality of the software would be good. The opportunities for profit would come from different avenues such as support and consultancies.
Stallman had been busy making a whole suite of software, for example: a text editor called emacs, and bash (the Bourne Again Shell) which is a command line interface based upon the original Bourne Shell that comes with the BSD variant of UNIX. The FSF's software was entirely based upon the UNIX software suite, and essentially improved on it. In 1991, the only thing that the FSF were missing to make it a fully fledged operating system was The Kernel.
Linus altered the code to work on his platform so that the FSF's code would work with his new kernel, that he ended up calling Linux.
 Linux is pronounced 'Lih-nucks' not 'Ly-nucks'

 Here's Linus Torvals pronouncing it!
  Now, over twenty years on from the original post on the Internet, Linus is still working on Linux, but it's now an effort which is collaboratively worked upon by millions of other individuals, corporations and organisations around the world. You probably don't know it, but Linux is everywhere today. It's in your TV and media- centres, it's the basis to that Android mobile phone you probably have, nine out of ten websites run Linux on their servers (think Google, Amazon and Facebook to name but a few), Linux might even be in a new dishwasher or fridge-freezer!
Now, visit Chapter Two to see why Linux may be the best thing you ever did with your computer!
 
 Chapter Two
Why Linux? What are the benefits?
Chapter two answers the burning question that you really need to know before going out and just installing a new operating system: Why do it and what does Linux actually offer me?
Check out Chapter 2 on the website
   
 Why Linux - What are the Benefits?
 So what does Linux actually offer me then?
So, you now know that Linux is a Unix-like operating system, and you know what all that means now. However, that doesn't really tell you why you would prefer to use Linux, instead of Windows or Mac OS on your computer.
Linux is far more than a Unix-like operating system and is pretty unique because of it's unique Licensing system, enter 'Open Source':
Linux is truly an Open Source Operating System:
The open soure GNU General Public License, that Linux uses means that you can obtain the software free of charge, and you can obtain the source code to the software and make changes to it if you want. You can then re-distribute it if you like, provided you supply the source code with your changes too.
Open standards provoke less buggy software because it is worked on by a global team of developers from many far reaching backgrounds.
Open standards also mean that compatibility across any other open platform. For example, you can be sure that an open source OGG audio file will play on any OGG player in exactly the same way, because the open standard applies throughout.
Open Source software means no vendor lock-in.
Trustworthy computing, as the source code for all software is distributed for free, often with the applications you obtain.
No chance of Linux as a whole going out of business, as it is not owned by any one company.
Did we mention that Open Source software is generally (but not always) FREE in cost?
This means that software can be of high quality for everyone, and money can be made out of support, distribution, training or working with OSS.
        
  It's a new and revolutionary way to do business, but already, huge names like IBM, HP, Novell, Sun, Intel and even non IT firms such as Boeing, Glaxo Smithkline and thousands more are all using it and putting work back into it.
It's a reliable platform for any sort of mission-critical work:
Compared to other platforms, Linux deals very well with rogue software and as a result, you are very unlikely to have the whole system crash on you.
There at present no mainstream viruses for Linux. Viruses would need to change in their nature drastically for them to be plausible in the Linux arena. It's fast and works on computers that are pretty old, recycle that old PC today! Say goodbye to Malware, Spyware, Adware etc.
Security is built-in by default, not an add on.
Linux is home to some of the best new software, and best of all, most of it is free, have a look at just a few of these great titles:
OpenOffice.org/LibreOffice
A fully featured Office suite including a Word Processor, Spreadsheet, Drawing Package, Database and Presentation suite. Compatible with Microsoft Office.
Mozilla Firefox (and Google Chrome)
The browser that reloaded the web - all thanks to Open Source!
The GIMP
(GNU Image Manipulation Project)
An excellent open source image editor, similar to Photoshop by Adobe. Used to edit the images on this website!
         
   VLC Media Player (VideoLAN)
A great media player, play your DVDs/VCDs/DiVX's on any computer, even stream them to annother computer connected to a network! VLC is one of the most popular media players available today, and it's also available for Mac OS X and Windows users, too!
Evolution
Evolution is a full-featured Groupware client which includes E-Mail, Calendar, Tasks, Address Books and the ability to connect to a Microsoft Exchange mail server.
...and thousands more titles, have a look at these links for more great examples:
InfoWorld's BOSSie Awards:
http://www.infoworld.com/article/3122000/open-source-tools/bossie-awards- 2016-the-best-open-source-applications.html
Datamations's Open Source Ultimate Software List: http://www.datamation.com/open-source/open-source-software-list-ultimate- list-1.html
How can this make any business sense, does anyone make any money?
You might think that as Linux and the associated open source titles that go with it are free in cost and also free 'as in speech' that this means that there is no money to be had from Linux. Indeed, many companies originally thought that Linux was nothing more than a hobby or a geeks plaything, but this perception has diminished over the years, and with Linux going strong since 1991, it's here to stay. Here are a few reasons why Linux helps businesses and can generate profit over the traditional software business model:
   
  Linux is one of the most popular and reliable platforms on earth today, it is this basis that has let many companies such as Google and Amazon build from that foundation and leverage it to make solid profit. Every Android mobile phone or tablet uses Linux, all of Amazon's websites use Linux, every Google search is powered by Linux and every Tweet uses Linux at the operating system level. Many businesses choose to purchase support contracts to obtain help with their Linux systems, just as they would with a commercial based platform.
Companies like Intel, who invest heavily into Linux can see the return on their investment rapidly because Linux has the flexibility to allow their newest technologies such as new processors to work straight away via the Open Code/Source model. Typically, Intel would have to wait many months or years to see support fully phased into releases of Windows or MacOS for their latest products.
In countries like China, up to 70% of all the computers that ship now ship with Linux on them. The vast majority of these computers retain their installtion of Linux because the Linux installation allows the user to do what they want to do with their computer, it means no levy for the manufacturers to pay to companies like Microsoft for copies of Windows and therefore cost savings to the customer. This in return has shown a rise in computer purchases and sales at a better margin of profit.
Many companies are switching to Linux for server hosting because it will out- perform it's Windows counterparts and will do it at a near zero-cost. This provides a hefty return on investment to the company, and also in turn to their customers. This can be stacked up with other cost-saving methods such as virtualisation, which means that you can have multiple Linux servers all running on one physical server. This reduces costs in the server room on cooling, power and hardware. For many companies across the globe, Linux is therefore a no- brainer.
Finally, Over time, many companies, universities and hobbyists find themselves naturally giving back some things to the Linux community because it helped them with a certain task. This continued cycle of improvement and collaboration spurs this on. You only have to look at open source projects like Wikipedia to see that this cycle works very well. Nobody gets paid to make Wikipedia the best source of information anywhere in the world, but yet people add to it none the less. Linux works in the same way.
Now, visit Chapter Three to decide on which flavour of Linux you want!
Or, if you need more convincing, why not take a sneaky peek at Chapter 8, where we detail how Linux helps out with your life on the desktop every day.
      
 Chapter Three
Choosing a 'distribution'
If you have not yet Installed Linux on your computer, you might want to have a look at this chapter for information on choosing a distribution (a flavour of Linux) that suits you. There are literally hundreds, if not thousands of different flavours out there, however a few stand out from the crowd. This chapter discusses those distributions and gives you a few handy links to places where you can find out information about other distributions.
Check out Chapter 3 on the website
   
 Choosing a Linux Distribution
 this chapter.
With so many Linux distributions, it can be hard to choose, so we help you select one that's right for you.
As described in the first chapter, we discovered that Linux was a flavour of the UNIX family of operating systems. This chapter talks about what types of Linux are available in the market today. These flavours are called distributions and all have their own merits and disadvantages. We will cover the most popular distributions in
3.1 What Exactly is a Linux Distribution?
If you ever watch the IT press, you will have probably heard of company names such as Red Hat, Mandriva , Canonical (Ubuntu) and Novell (SuSE). There are literally thousands of other smaller companies and organisations that also make Linux distributions. Examples of which can be seen on websites like distrowatch.
These are all companies or organisations that have created their own 'distributions' or flavours of Linux.
In any distribution, the fundamentals stay the same:
There is always a Linux Kernel (the core component of the Linux operating system)
The default GNU software (tools like ls, rm, etc)
General software to be expected of a Linux distribution (text editors, etc)
What differs from distribution to distribution is usually:
   Installation Software (for installing software, or the operating system)
  
 General software: (Office Apps, Prog. Languages, Games, Web Software etc) Documentation and Manuals (Quality of, Lack of, Quantity of)
Cost - whether you pay nothing, a little, or a lot for a distribution depends on what you need from it and the business model the distributor works to. Quality of software (buggy or not buggy software, latest versions of software) Whether it is up to date or not
Whether the distributor offers a good channel of support or not How easy it is to use overall.
As you can see, whatever distribution you choose. You get Linux, whatever distribution you choose. You may get a better range of options with distribution X over distribution Y, The choice is for you to decide, and because of Linux's excellent Copying/Licensing properties, you can often download a distribution from the net, or have a copy made for free by a friend without having to part with any cash.
Bundled Software with your Linux distribution
When you buy a mac, or a Windows PC you will find you get a nominal amount of software with it, made (usually) by either Microsoft or Apple. If you buy the PC from a vendor such as HP, you might get some extra tools as well like Multimedia software, but what you will undoubtedly notice is that you have to buy or download most of the software you want to use on your system after you get it out of the box. With a Linux distribution, you generally find that it comes with a plethora of software already pre-installed, from many different companies or individuals. Some large software like office suites (OpenOffice.org) to smaller but powerful tools like DVD/movie software such as VLC. It is likely that for a good number of people using Linux on the desktop, you already get all the software you want without ever needing to install anything more! For more information on software within Linux, see chapter 10 or view some of our video tutorials.
A little bit about 'Live' distributions
In more recent Linux history, so called 'Live' distributions have become very popular, because it let's you try out a Linux distribution without even installing it onto your hard disk. This is great because you don't have all the hassle with repartitioning the disk (see chapters four and five) or installing over your Windows/Mac OS software. You can simply drop the CD for a Live Distro' into your CD Drive and start up your computer from that. You usually get most of the main functionality of the distribution so you can really evaluate if the distribution is for you before you choose to install it for real. In fact there are web sites out there
       
 that allow you to boot Linux straight off a USB pen drive such as pendrivelinux.com. Canonical's Ubuntu Linux has a great installer that has an option to install Ubuntu on the same disk partition as your Windows XP or Vista setup using an installer called the 'wubi installer'. It runs a tiny bit slower than normal Linux, but it's a very easy way to install Linux alongside Windows if you want to test the waters first.
Linux may be free, but can't you also buy Linux? Why would I do that if I can get it for free?
Buying Linux often provides benefits that downloaded versions do not provide, such as:
Physical manuals (SuSE & Red Hat Enterprise Linux are particularly good) to help you out when you need a 'covers-all' reference.
Vendor support for a particular period of time
Distributions like Red-Hat Enterprise give corporations a guaranteed Service Level Response
Sometimes you may get more software than with other distributions (eg extra DVDs instead of downloads).
Commercial software titles can be included (as it is non-free), these can include copyrighted or patented technologies such as DVD and MP3 players, as well as commercial software like Adobe Flash Player and so forth.
3.2 What Linux Distribution should I choose?
Choosing a Linux distribution is a personal thing. It greatly depends on what you want to do with it.
If you like the look of a Linux Distribution and want more information, click on the appropriate distribution logo below to visit the distributors web site. This is just a very short collection of some of the more popular distributions out there. For more in-depth information on the differences between each distro, we would recommend visiting distrowatch.com
Here is an example of just some of the more popular Linux vendors today: Vendor Logo User Level Good Points Bad Points
Ubuntu and Linux Mint
     
  Suitable for: Beginner to Advanced/Server
Ubuntu is currently the most popular of the Linux Distributions. It is built on a Debian core, but has a more regular release cycle, is more polished, is easy to use and has major financial backing. It is a
completely free distro, therefore copyrighted materials such as DVD playing software do not come as standard with Ubuntu, you must download and install it separately, but can be done easily. If you don't like the look and feel of the latest Ubuntu desktop (called Unity), Linux Mint is based on Ubuntu, is made for beginners and still offers a GNOME or KDE version.
Red Hat/CentOS/Fedora
Suitable for: Beginner to Advanced/Server
Used to be very popular, easy to use, good installer. Has some annoying quirks, RPM software packaging can suffer from dependency problems, even with YUM system. RHEL (Red Hat Enterprise Linux) is the non-free Enterprise version offering of this distribution, it comes with full telephone based support and is backed by rigorous testing. CentOS is the free version which is derived from RHEL but usually trails behind it and of course does not come with enterprise support, then there is Fedora Core. Fedora is the bleeding-edge fork of Red Hat which has all the latest bells and whistles but as it is bleeding-edge, it can also suffer from less stability than their enterprise-grade counterparts.
SuSE Linux
Suitable for: Beginner to Advanced
SuSE was once an independent German Linux distribution, which later was purchased by Novell, who later sold it to VMWare. It's now an excellent all- rounder which is geared up for the Enterprise. good manuals & docs, masses of great software, brilliant support. Enterprise version great for corporate use with business support and has partnered with companies such as SAP (and of course VMWare). Software Installer still relies on RPM system from RedHat which can suffer from dependency problems however this is mainly a thing of the past.
Slackware and Arch Linux
Suitable for: Advanced to Server Users
Slackware was probably the first linux distribution. Targeted at geeks who like to
   
 tweak or for the server market looking to get every little ounce of server performance. Quite hard to install and use, Uses .tar.gz packages rather than more popular .deb or .rpm systems. If you fall into the more advanced camp, but don't like the sound of compiling everything, perhaps Arch is for you, as it still offers similar levels of customisation as Slackware.
Debian
Suitable for: Intermediate to Advanced Users
Very established Linux distro. DEB packages combined with apt-get system solve the tedium of the RPM software packaging in Redhat/Suse/Mandriva. Traditionally known for being further behind than some other distros, but rock solid. Is now the basis for many modern, easier to use distributions such as Ubuntu and Linux Mint.
Note: If a distribution is at release 10 (ie: Slackware), but another distribution is only at 4.1 (ie: Debian), this does not indicate that Debian is an old version of Linux. The release numbers are only an indicator of how many releases that particular vendor has made. For example it is quite likely that Debian 4.1 and Slackware 10 share the same major kernel version and many similar software titles.
Check out The DistroWatch Linux distribution popularity rank (Page Hit Ranking) for a good idea on what's hot in the world of Linux Distributions right now, it's updated daily!
If you are ready to start preparing to install Linux on your system, then move forward to Chapter 4
  
 Chapter Four
Preparing to install Linux.
This chapter deals with ascertaining what you need to do to prepare for installation of Linux, including ensuring all your hardware will work with Linux.
There is also information about how different versions of Linux work with regards to software/package management.
Check out Chapter 4 on the website
   
 Preparing to Install Linux
4.1 Different types of Distribution and installing software with them.
As described in the previous chapter, there are lots of different types of Linux distributions floating around, and yes, this generally means that they all have different Installers to put them onto your PC, Mac or Alpha based computer. This chapter focuses on installing a Debian based distribution, but gives a short insight to other distributions as well.
Debian is one of the oldest distributions out there. Slackware and Red Hat are pretty much the only other two that come close in age, Debian has lasted the test of time, and does not look like it's going anywhere soon. It's a free distribution (which will not change, because of it's license) and it has thousands of developers world wide.
A major difference between Debian-based distributions (such as Ubuntu and Linspire) is the fact that they use the DEB package management system to install software.
Installing software via binary packages, or if you need the source code, via source packages, is very convenient for most Linux users, because it means that you don't have to compile the source code of an application to get it working. In most cases, you can simply click on a package to install one via a tool in a GUI, and the software will be installed. Here we will discuss two major package systems, however, there are others, such as Slackware's .tar.gz based system, and BSD's
  
 ports system.
When the .DEB package format is combined with software such as APT or Synaptic, the .DEB system works very well at resolving things called dependencies (software that needs other software, in other to work).
The Red Hat Package Manager (RPM) Logo
Red Hat based distributions such as Fedora, SuSE and others use the RPM Package Manager, previously known as the Red Hat Package Manager. Packages have a .RPM extension (for example gimp-2.05.i386.rpm) are packaged binary applications (sometimes they package source code as well).
For software that is not bundled with your Distribution, you should read Chapter 9, "How Do I Install Software?".
Distributions like Red Hat, Fedora and SuSE seem to provide less bundled software packages for their distributions than the DEB based ones. This is mainly due to something called the Debian Universe which is a large repository of software which is available in internet repositories. The universe is not supported and as-such should be treated as software in the 'wild', but it is freely obtainable through the same software installation tool (such as Synaptic) as the Distributors software. RPM based users often have to visit third party websites such as freecode.com to download packages, as well as any dependent packages (dependencies). Both the use of the Universe, and third-party websites can have issues, because they contain software that is not guaranteed to work with your distribution, and may cause unexpected results - so be careful if you download software from other sources!
Both RPM and DEB packages are very widely used in the Linux arena, most of which can be installed simply by using software, like the 'Add Applications' menu in Ubuntu.
4.2 What sort of computer will I need for Linux?
This question has a lot of answers. The bottom line is:
Depending upon what you want to do with Linux, the system requirements can range from an old Intel 386 to a state of the art PC. You can even run Linux on
 
 some stranger hardware including Macintoshes, ARM based machines and more.
This section of the chapter will go through all the major parts of hardware attached to a typical PC and detail what is expected to run a typical modern Linux desktop, starting first, with the CPU.
CPU (Central Processor Unit)
Linux was originally devised on an Intel 386 back in the early 90's, this however does not necessarily mean that Linux works better on a PC than a Macintosh computer (PPC or Intel). Today's Linux desktop is most popular on Intel, PPC (G3- G5) and AMD processors, therefore, most of the common software is actively developed for these platforms. If you have another platform such as a Sparc, Amiga, Atari or ARM based processor, Linux will no doubt be different in that many software titles may not exist for that given platform, or software is older than that of the most popular platforms, but it is still possible to run Linux on them.
RAM (Memory)
Most Modern day Linux distributions will require a minimum of around 1GB to use it to a reasonable degree, but if you wish to use Linux for non-graphical based uses, such as web page hosting, or a firewall, you can run a basic installation of Linux from almost nothing. Some of the most basic installations will run on 8 MB (yes megabytes, not gigs!). If you're going to be serious about Linux, and want optimal performance, then as with any software, the more RAM you have for it, the better it runs. Ideally, if you reckon you're going to be a home user, at least 1GB RAM is required. If you want to do demanding stuff like perform movie editing, edit artwork or edit lots of audio, then we're probably talking about 2GB+. Server users who want to serve up hundreds of websites may want 4GB, 8GB or even more, but again, if you want to make a small server with only a website or two and a low number of users, then you can get away with 1GB or less.
In summary, If you have the RAM, Linux will use it, and it will be used well, thanks
  
 to the superb memory and process management within the Linux kernel a modern- day 64-bit version of Linux will support up to 64 TB (terabytes) of RAM.
Hard Disk Drive (HDD) & Partitioning your disk for Linux
As with all things Linux, it's possible to do it in the smallest of setups. Using distributions such as ZipSlack or Puppy Linux, you can achieve a fully working Linux setup in a few hundred megabytes. However, if you want to install a standard workstation installation of any up-to date distribution, you will probably want at least 20GB (gigabytes) free hard disk space. If you are going for the plunge and will convert your entire system over to Linux, then the more the better - 100GB+ in order to store all of your stuff: Apps, MP3s, Movies, Documents, emails etc and over time, it uses up quite a lot of drive space.
Modern Linux distributions easily support new drive technologies such as software RAID and SATA, so you will have no worries about your latest technology drives. If you use more high end storage equipment such as iSCSI or fibre channel disk arrays, distributions like Ubuntu Server edition support these technologies right out of the box.
As you are just starting out, you may find it easiest to purchase a new hard drive to install Linux on or why not recycle an old hard drive if you have one spare!
The reason for using a seperate drive is because you are likely to be using another Operating System already such as Microsoft Windows or Mac OS. If you wish to use both Linux and Windows/Mac OS (so you can see if Linux is for you), then the easiest way to set it all up is if you have another drive to put Linux onto. You won't have to mess around with resizing partitions and the like:
(Re)-Partitioning
Typically, Windows/Mac OS will allocate 100% of a hard drive to it's own use, meaning there is no space left for Linux. If you don't want to buy a new hard drive for Linux, then you will somehow have to re-allocate some of the unused (free) space on your Windows/Mac OS drive for Linux.
Thankfully, recent versions of Ubuntu and some other Linux distributions now make it a snap to re-partition your disk. They work by utilising the free space that you have in your Windows drive (say your C: Drive) and creating a partition out of some or all of that free space for Linux. If you don't want to use Ubuntu or similar,
 
 you can also use something like the freely available Parted Magic or commercially available Acronis Disk Director (for Windows) which splits your disk into partitions as well as resizes existing partitions can make it a snap to have Windows and Linux exist side-by-side on the same disk. It is very easy to use for the beginner.
Although the process of re-partitioning and dual-booting your PC with Linux and Windows is far easier than it used to be, to a computer novice it can still appear to be a daunting task. Don't worry though, I've got a video demonstration on how to do just that in Chapter 5.
Video Card (Graphics Adaptor)
Any bog standard graphics adaptor will do for linux. Optimally you will want to have an SVGA adaptor in your PC that has enough RAM to support resolutions of at least 1024x768. Graphics Accellerator cards of many types are supported by today's modern distributions for even faster graphics. If you're looking for really good graphics performance under Linux, the NVidia range are an excellent choice, because they are well supported under Linux by Nvidia. ATI cards are also popular, however their driver support for Linux does not appear to be as good as NVidia's, which seems to be an ongoing issue with ATI. If you don't know what card you have in your machine, visit your device manager in Windows, or System Preferences in Mac OS. Integrated graphics chipsets such as the Intel i Series or Cirrus Logic chipsets generally work ok, however if you need 3D graphics performance, as with Windows or Mac OS, you are best using a 3D Acellerated graphics card from the likes of Nvidia or ATI.
Using Wireless & Wired Network Adapters and (Broadband) Modems with Linux
Almost every wired network card available should be quite happy with Linux. Modern PCI or integrated based options such as those manufactured by 3com,
  
 Intel and Realtek range will automatically plug and play.
Wireless card support in Linux is generally good. Standard desktop PCI based WiFi cards will work out of the box without any need to install a driver. However, some vendors have made cheaper soft-pci, mini-pci 'wintel' based cards (a lot of which are found in laptops), these do not work as well as their larger counterparts under Linux because the vendors do not wish to provide drivers or any information for Linux developers to work with. This can usually be resolved by loading the Windows driver inside Linux, using a tool called ndiswrapper (see this wikipedia link for further information).
Cards known to work out of the box include the Orinoco chipset, Intersil Prism/Prism II and Cisco Aironet based cards. For more information on Wireless compatability under Linux, see the Linux Wireless LAN wiki.
ADSL & Cable modems are usually one of two breeds, either they either plug into the USB port of your computer directly or they are fully blown Ethernet routers, today these mostly contain WiFi radio as well. Thankfully, most ISPs are now providing 'proper' Ethernet based routers which simply plug and play with Linux either over WiFi or via an Ethernet cable. If you do have a USB modem from your ISP, consider shelling out for a proper router as the USB modems support under Linux is somewhat hit-or-miss and you will often find that performance from a USB modem is less than you would get from a router (regardless of whether you are using Windows, Linux or a Mac). Good examples of external routers are Belkin, Netgear, Linksys and Draytek.
Now, armed with all the information you can get about the hardware in your computer, it's time to get Linux installed! Click here to visit Chapter 5 to do just that!...
 
 Chapter Five
Installing Linux (Ubuntu).
This chapter gives a full step-by-step guide to installing a popular Linux distribution.
It shows full details and of each stage and gives full details of all the choices along the way, including information about partitioning your hard disk drive.
On the website there is also a video of an Ubuntu installation which you can watch as you go along:
Visit Chapter 5 on the website
  
 Installing Linux (Ubuntu)
5.1 Installing a Linux Distribution: Ubuntu
Although this example shows the installation of the Ubuntu Linux distribution, installing most other Linux distributions is a similar process. I have chosen Ubuntu as it is a friendly, free, highly compatible distribution of Linux and at the point of writing, it has been the most popular Linux distribution for quite some time.
Please also note that this tutorial details the installation of Ubuntu Linux on a PC, if you have a Mac, the instructions are similar, but not the same. In particular, the tools you will use for partitioning your hard drive may be different.
5.2 Planning the Task ahead
If you remember back in Chapter 4 we discussed hard drives and partitioning. If you didn't read that part, to have a fuller understanding about what we're about to do with your hard disk, skip back and read it now.
WORDS OF CAUTION!
At this early point in the process of installation, be aware that you will be working with your hard disk in order to install Linux. You MUST make a backup of that data before starting. You do all of this at your own risk!
The main step with a Linux installation is to virtually 'slice' up your hard disk into partitions in order to put Linux onto it. This process is called partitioning.
You will not have to perform this step if you have chosen to use an additional new or recycled hard drive to install linux onto. Also, if you are brave and wish to simply delete the operating system (Windows/Mac OS) clean off your computer, then this step is also not necessary, otherwise, proceed forward!.
How to partition the disk
Since as far back as 2007, it has been possible to re-partition your disk drive during
 
 the installation process, making it easy to do, so this guide has been updated to follow this process. Read on and watch the below videos to learn how this is done.
Tux tip: If you still want to partition your hard drive before installing Linux, for example if you want completely granular control of how you split up your disk partitions, even after you have installed Linux, then you can use a tool like GParted, or these others to partition your disk so that you can create some free space to put Linux onto.
The video below in section 5.4 will demonstrate how to partition your disk step- by-step before we go on to the video, here's some information about partitioning you will want to know:
If you are resizing your Windows partition to accommodate the installation of Linux, try and devote as much space to Linux as you can manage, if for example you have 40GB unused/free space on an 120GB drive, resize your windows partition down from 120GB to 90GB, leaving 30GB for linux and 10GB room to spare for windows. This way you probably won't have too much concern about free disk space in the future.
You can split it any way you like, here is an example of how your hard disk, if drawn as a sideways graph would look if you split it 50/50. The Unallocated space would be later formatted under the 'ext4' file system by Linux during installation:
A graph demonstrating a 50/50 split of a hard drive. Windows uses the NTFS partition type (on the left) and the Unallocated space will be utilised by the EXT4 (Linux) file system during the installation process.
5.3 Downloading and starting the Ubuntu installation
In case you didn't read over the previous chapter, firstly, make sure your PC is up to the job of working with Ubuntu.
  
 You will need:
A PC with at least 2GB RAM, 40 GB free space on your C: drive or target install drive.
A USB stick which is empty and is at least 2GB in size (or a DVD-R)
An Internet connection to download the ISO image (approximately 1GB in size)
If that all checks out, then you are going to need a copy of Ubuntu, so head on over to their website (https://www.ubuntu.com/download/desktop) and download a copy.
When it's downloaded, you'll end up with a .iso file. This file type is what is known as a disk image.
Copying the 'ISO' image to the DVD or CD.
Copying the ISO image to a DVD is not the same thing as just dragging and dropping the file from your Downloads folder and copying it onto a blank DVD or USB stick, you need to burn or unpack the disk image onto the media first.
Unpacking the ISO file to a USB stick
If you prefer to use a DVD-R, rather than a USB stick, then skip this section and see below.
There are a few ways to put an ISO image onto a USB stick these days, and it's a lot easier than it used to be. As most of us have USB sticks lying around the house, this is now the most common way to install a Linux distribution.
For Windows users, the easiest way right now seems to be by using the free tool, Rufus:
Download it here (https://rufus.akeo.ie/).
Pop your USB stick in your computer if you haven't already and open the Rufus tool you just downloaded. Now follow these steps (click on the images to make them larger, if required):
1. ChooseyourUSBstickfromthedropdownentitled'Device.
   
  2. Furtherdownontherighthandsideyou'llseeaCDiconwithalittleboxunder it, click on that and an 'Open' dialog box will appear, locate the ISO file that you downloaded and then click Open.
3. Clickon'Start'
4. You'llbeaskedifit'sOKtodownloadtheSYSLINUXsoftware.Click'Yes'.
5. Oncethat'sdone,you'llseeadialogueaboutanISOHybridimagebeing detected. Simply click OK (Write in ISO Image mode).
  
  6. ConfirmthatyouselectedyourUSBstickandnotanotheronebyaccident! Take note that any data you have on the USB stick at this point will also be deleted. Press OK.
7. Onceit'sfinished,restartyourcomputer,asdetailedalittlemoreinthe following section.
  'Burning' the ISO file to DVD

 If you prefer to use a DVD rather than a USB stick then you are in luck, burning an ISO disk image to a DVD is easy these days if you have Windows 7 or later, then simply right click on the icon of the file you downloaded, which will be named something like ubuntu-14-04-desktop-amd64.iso. Once you right click the icon, you will see the option 'Burn disk image'. Select that option and pop a blank DVD- RW or into your PC and click burn. If you would like further instructions on this process or are using an older Windows or other operating system, check out this easy guide at the Ubuntu web site.
Ready to install!
Hopefully you are now armed with a Linux DVD or USB stick that's good to go. If the DVD was ejected from the CD player, pop it back in the drive and Restart your computer. Most PCs will automatically try to start the computer from the CD drive or even USB, so hopefully you will be presented with a welcome screen after a minute or so. If you don't see this, or if your PC started up in Windows instead, make sure your PC is set to boot from CD (or USB) before any other disks. You can change this setting in something called the BIOS or Boot Order setup. Often when you start a PC you will see a message like 'Press F10 to Enter Setup'. Hit that key and enter the setup, you should be able to change the boot order to something like CD/DVD or External USB Media, Save the settings from there and then restart once again.
5.4 The Install Process
Okay, it's time to put the DVD or USB stick in the computer and restart it. If you don't already have an Ubuntu CD, visit Ubuntu's Download site and download the ISO image of Ubuntu. It's around 800MB in size, so you will need a 800MB CD-R or DVD-R and a suitable DVD-RW drive.
If you don't have a DVD/CD-R Burner or if you have a slow connection then you can order a copy of Ubuntu from Canonical .
I've devised the following video tutorial to walk you through the process of installing Ubuntu Linux 13.04 on your home PC. It assumes that you already have Microsoft Windows pre-installed, so it shows you how to re-partition your hard disk to put Linux on it. Note that although the version is 14.04.01 LTS, the steps are practically identical for any modern version of Ubuntu or Linux Mint.
Part 1 of 2 (Guides you how to download and install the Ubuntu 14.04.1 LTS iso image and make it bootable on a USB stick):

 http://youtu.be/Zz7rpuAmbCo
Part 2 of 2(now you have set your PC up to boot from USB and set up the USB stick, it's time to boot the Ubuntu Linux installer from that USB stick!):
http://youtu.be/jWnMTvcoK5o
5.5 Notes for Installation
Usernames and the Administrative (root) user
When you are installing Ubuntu you need to set up a user account (as demonstrated in the above video tutorial). Something to note about this first user on your machine: Ubuntu always sets the first user specified as an administrative user. In this context, this means that you, the first account on the machine (you can have as many as you like), will also get administrative privileges on the machine to do things like install software and deal directly with hardware and all things associated with it. Take this information with a little caution. If you are asked again for your password when doing something in Ubuntu, it is asking you to escalate your own privileges into what Linux calls the 'root' user. Root is simply the username of the administrator in Linux, as administrator you have free reign over the system at all times. Do not perform tasks as root unless you know what you are about to do, or unless you have good confidence in the task ahead!
A little word on passwords
During the install process you'll be asked to select a password. It's important that you select a strong password, because in time to come, you may wish to open up services such as remote access onto your machine. It's a simple step but believe it or not, still a reasonably effective method of security, do not choose a simple word as a password. Choose random things, like for example, your favourite colour, and your first car, with a few numbers (maybe your year of birth) sprinkled in the middle for good measure. Here is a pretty strong password and could be pretty memorable to the right person:
blue77volvo240GLS
No, I wasn't born in 1977, my favourite colour isn't blue, and I've never had a Volvo 240GLS. However, you get the idea. The password is still important, especially if you ever run any server or sharing software on your machine in the future.
5.6 Finishing Up

 By now, most of the software you will need will have been copied to your new partition on your hard drive, your user account will be set up and your regional settings are all ready for you. It's time to restart the machine. Make sure the CD is removed from the drive when prompted and continue onwards!
Welcome home!
When you start up your computer, you will likely see a boot-up screen asking you
if you wish to choose Windows or Ubuntu (that is, if you installed Ubuntu alongside Windows). Choose Ubuntu from the list using the cursor keys (the up/down arrow keys) and hit enter and it will start up Ubuntu.
The next screen you will see is the Ubuntu login screen. It's the screen you will see every time you start up Ubuntu. If prompted, select the username that you created earlier (or type it in if required), then enter your password. The system will then log you on.
5.7 The Ubuntu Desktop
The Ubuntu desktop is a friendly place, which we will cover in later chapters. If you are used to Windows, your 'Start' menu is the bar along the left hand side. The top button which has the Ubuntu logo on it allows you to search your computer for content (Apps, documents, audio etc) simply by typing it's name, but if you don't know what App you are looking for, Click on the Ubuntu icon, note the litte 'A' icon down at the bottom of the screen, click on that and it will show you 'Recently Used', 'Installed' and 'More Suggestions' for Applications. Beside the 'Installed' line you can see it reads 'See 76 more results'. Click on this and you can see all of the apps installed on your Ubuntu desktop. This same action can be done for documents, music, photos and movies with each of the respective icons.
Favourite Apps
You'll note that a few favourite Apps have already been 'pinned' to the bar on the left, these include the Firefox web browser, the LibreOffice (free Microsoft Office compatible word, excel, powerpoint suite). You can pin your own favourites to the left-hand side bar if you desire simply by dragging an icon from the above Applications search list into the bar.
Where are all my files?
On the left-hand side bar there's a filing cabinet icon. Clicking on this will show you all the files on your computer. If your Ubuntu machine has been set up to see your

 Windows file systems, you will also be able to see your the files you work with in Windows from here, just look under 'Devices' on the left of the file browser.
A screenshot of the Ubuntu 14.04 desktop with the file browser open. Note the 2.5GB Volume on the left hand side. This is similar to what you would see if you have a Windows file system available to you.
  
  Chapter Six
How do I get software for Linux?
Okay, you've installed Linux, you've chosen you're GUI, and you've picked up a few basic commands. You're probably feasting for some software now. Linux has an abundance of software out there, mainly available over the net, mainly for a zero fee. This chapter covers how and where to get software.
Check out Chaper 6 on the website
  
 How do I get software for Linux?
6. Software for everyone!
As discussed in later chapters, software in Linux is often free of charge, some of the most famous software titles around are available for Linux. Most Linux distributions these days offer simple ways to download and install software which are bundled up and ready to use in 'packages'. Sometimes, other software can be obtained in other formats too, so this chapter talks about all of the different ways you can use and obtain Linux software.
This chapter talks a little about the theory behind how software is distributed, and why. If you intend on using Linux for a while, it's probably quite beneficial to know this, however if you are just getting started out and want to install some software, jump to Chapter 7, to find out how to install software .
6.1 How software is distributed in Linux
If you are a Windows or Mac user, you will be used to software being delivered to you in binary format. In Windows, the most common binary format you will come across is the exe file. A binary file is a file that has already been compiled from the original source code, to a binary (or closed source) format. You can't see the code inside the binary file, to the human eye, it's a big blob of random gobbledy-gook, that only your computer can read. This is done by the application developers (or programmers) of the software. It makes it ready for your operating system, and it also usually bundles in a lot of ancillary software which help it work. This ancillary software are commonly referred to as 'libraries'. Some times this can make the software more 'bloated' than it might otherwise need to be, and it doesn't let other
  
 people see bugs or security issues in the software.
Linux, on the other hand began with a guiding principal that software should be free, as in free speech (not necessarily as in cost). To make software open (read free/libre), software authors needed to ensure that the software that was shipped was also made available in the original source code format, so that if you felt like contributing to the software, whether to fix a bug, add a feature, or make a derivative (fork) of the application, you could do so at will. As long as you too, kept the source code freely available. This is the guiding principal behind the GNU GPL (General Public License), and is the license that is most commonly used with Linux based software.
For ease of installation, most of the software you will obtain in Linux these days though, will come as 'packages'. These are pre-compiled bundles of software. The source code, however, is always available as a companion package, should you wish to see it.
6.2 A little word on Dependencies
Feel free to skip this section if you aren't interested in the details about why Linux software packages are a better idea than big binary files found in Windows and MacOS.
As noted earlier, in Windows and Mac OS, a lot of software comes in one big binary file (a 'blob' if you will). Most of the other tools or software that it needs (called dependencies), are usually bundled up inside those binaries. Sadly though, sometimes the same libraries are already installed on the operating system, put there by other applications before. This means that you might have the same or different versions of libraries kicking around on your PC taking up space and making it slower than you'd probably like.
Linux packages are often a lot smaller, because they rely on the other dependencies from other software to be installed only once. Take for example, you might want to install a hypothetical app called 'liarfox'. It's available for Windows and Linux. The liarfox package might be 75MB in size in Linux, versus a 250MB in
 Tux Tip: Note that if you wanted to turn the source code (written in human readable text form), into usable software for your computer (a binary), you have to use an app called a compiler. This is an advanced topic which will not be covered in this chapter.

 Windows. When you install liarfox in Linux, it also says it's going to download another 100MB in other packages too, making the total installed on Linux 175MB. Still a little lighter than Windows. But the good thing is that in the end, it didn't need to download all 100MB of extra packages. Why? Because they were already installed and in use by other software on the system. The dependencies had already been met.
6.3 Using binary packages
Software in Linux today is packaged up for easy installation in most cases. The most common formats are as follows:
.rpm files: Redhat Package Manager
Software that is in Red Hat Package Manager format is used by Red Hat, Fedora Core, SuSE and CentOS variants of Linux.
.deb files:
Debian package formats are used by Debian GNU/Linux, Ubuntu, Linux Mint and other variants.
Tar packages can contain pre-compiled binaries for specific systems, or can also contain source code. If you have used ZIP files or RAR files in Windows or MacOS, then tar.gz files are essentially the same thing. Anything can be stored within them.
In the case of deb files and rpm files, most modern day Linux distributions have what is known as a package manager. This means that you don't need to worry about downloading or even dealing with installing individual packages, and their dependencies. The packages (.deb and .rpm files) are installed for you, at the click of a button (or the type of one command).
   
 6.5 Obtaining the software that came with your distribution
Back as far as 2005, Ubuntu Linux introduced the Ubuntu Application Store. Note that this was before the iPhone and definitely before the Apple 'App Store'. It's a seriously easy way to search for, download and install software. App stores are the most user friendly way to obtain software in Linux these days. Most of the popular Linux distributions have an equivalent app store. For example, Fedora uses a menu option that conveniently says "Add/Remove Software".
Ubuntu Software Centre shows how easy it is to download and install software in Linux.
This almost sounds too good to be true, but there is no such thing as a perfect world! Exceptions exist. For the software title that you require to be available via the 'App Store', means that two things have happened:
a) The Linux distribution vendor (eg, Canonical and/or Debian, in the case of Ubuntu), need to be aware that the software exists.
b) it's been vetted officially to be represented in the 'main/approved' distribution channel (repository) of the Linux distribution. Note, If the software is acknowledged by the distribution vendor, it may still be available in an alternate distribution channel, which may have to be additionally enabled.
If both of the above cases are not satisfied, then, like in the Windows or Mac OS world, you need to go off and google for the software vendor's website and find the download yourself. We talked earlier in this chapter about dependencies. When you download 'unofficial' software like this, and you install it, it can't be guaranteed that it will work with your Linux distribution because the software it depends upon (libraries, often) may not exist within your Linux distribution. If you ever hear of the term 'Dependency Hell', this is what people are talking about!
 
   This matter of obtaining 'official' software from a repository can often be difficult to grasp for first time Linux users, as it's a different way to get software, however thanks to commonality these days of the Mac OS App Store and the Microsoft Store, it's getting to be a more understood way to obtain software.
6.6 Okay, I got the software, Now how do I install it?!
A-ha!Forthat,you'llneedtomoveontothe nextchapter!
6.7 Advanced Topic: Other ways of getting
software
This is an advanced section for those of you that want to get software from other sources/websites. It is not required reading for most Linux users, or new users but is here for completeness sake.
.tar.gz
As mentioned, there is the traditional .tar.gz format. Most of the time, you will find that the .tar or .tar.gz format is used to zip up source code format software, a .tar.gz file is often referred to as a tarball. Tarballs are double-archived files. This means, that they're first archived with a tool called tar (the standard unix archiving tool), and then to zip or compress the file, the tar file is then zipped up with gzip (the GNU Zip tool, which is akin to PKZIP or RAR).
Tux Tip
You can still unzip/zip WinZip/PKZIP compressed files with Linux, using the unzip and zip tools, rather than gunzip and gzip.
 Tux tip: If you are installing software from websites, you'll often download it as .deb, .rpm or even .tar.gz format. You'll need to double- click the downloaded file to launch the installer, or with .tar.gz, decompress the file and go to a command line to install it from there. If you want or need to install deb or rpm packages from the command line, you can also do that too, more information on that in Chapter 7.

 Furthermore, the popular desktop systems, including KDE and GNOME all have a GUI tool built in to handle .gz and .zip files effortlessly!
To decompress (unzip) a tarball at the command prompt, type: $ tar zxvf filename.tar.gz
If you are using Arch Linux, the officially bundled binary packages are distributed in .tar.gz format, although they are usually installed using the pacman package manager.
Slackware Linux also bundles its pre-compiled binaries in .tar.gz files, but in a specific archive layout.
ebuild
The ebuild format is a specialised bash script which is used by Gentoo Linux which automates compilation and installation of software packages. It is used within the Portage Software Management system, as well as the emerge tool.
SNAP
Snappy is a new package management system made by Canonical for Ubuntu phone operating system, as well as Ubuntu Desktop and package most dependencies within one package. It is now available in other distributions including Arch and Fedora, and could become the standard package format in the future.
Other non Linux packages: PKG, APK, APPX
For completeness, other operating systems have made packages, or are starting to use packages:
The PKG format is used by Apple on the MacOS, iOS platforms, generally transparently. It is also used by Sony on the Playstation 3, and in other Unix like operating systems, such as Solaris, UNIX System V, Symbian and BeOS.
The APK format is the Android package format and is used on Android mobile phones, tablets and other smart devices.
The APPX format is used by Microsoft Windows 8 and above, as well as Windows phone, mainly within the Microsoft Store, transparently to the user.
Still can't find the software you are looking for? Use

 Google!
It's happened to the best of us, and in time, it may happen to you. If you are looking for a package, but you can't find one on the authors web page, nor on sites like rpm.pbone.net. You can only find the tarball and you just can't find it anywhere. Well, you would be surprised at who actually makes up these packages from tar files. Mainly you'll find that distribution vendors package them, but you'll find other people out there doing it for the hell of it, to help you and the rest of us out. This generally happens if the program is a dog to compile as a tarball.
A word to the wise though: If you are downloading an RPM or DEB package from a third-party, it could have been tampered with, or worse, wreak havoc with your Linux installation - use third party binaries as a last resort and with caution!
 
  Chapter Seven
How do I install software?
You've downloaded the software that you want, and you discovered that you don't know how to install it. This chapter covers installing .RPM, .DEB packages and tar.gz files.
Check out Chapter 7 on the website
  
 How do I install software?
7.1 The easy way: Ubuntu Software Center etc
 Ubuntu Software Centre shows how easy it is to download and install software in Linux.
There are many different distributions (flavours) of Linux, as demonstrated in Chapter 3: Choosing a distribution. Each distribution of Linux handles the installation of software slightly differently, however as we saw in Chapter 6, they all use one of three main 'packaging' types, so they rarely vary in drastic ways.
When Ubuntu Linux first came out back in 2005, it used the 'Synaptic package manager' as an easy-to-use tool to obtain software. You simply searched for the software you wanted, clicked 'Select to install' beside the package you wanted, then pressed Apply. It wasn't hard to do, but since then, Apple made the App Store with the advent of the iPhone etc. Since then, the Mac, the PC (Windows) and Android mobile also got an App Store, so it's only fair that some polish went into Linux too. The old synaptic package manager can still be used if so desired,
 
 however, if you use Ubuntu, you will likely prefer the Ubuntu Software Center. It shows you which software you have installed on your Ubuntu PC, as well as all of the software titles available from Ubuntu. It even recommends software that you might like, based on the software you have previously downloaded.
Installing the software in the Ubuntu Software Center is as easy as clicking on the title you are interested in and tapping 'Install'. The rest is done for you, and the application is available from the Ubuntu Launcher (that brown circle icon up at the top left-hand side of the screen).
The rest of this chapter talks about how to install software utilising traditional software packaging methods, including apt-get, synaptic package manager and YUM.
7.2 Installing .deb (Debian packages) and the APT Tool
The Debian package management system is a very well made software packaging model. It has similarities with the Red Hat system (RPM), however, when DEB packages are combined with the APT tool, both the act of obtaining software, and issues with dependent software are almost completely removed.
The DEB/APT system is highly popular, and is found on many systems other than Debian, including the Ubuntu, Linux Mint and more.
These are the main parts to the DEB system:
dpkg - A command line program with which you can install .DEB packages. This is the most basic (and most difficult way to install debian .DEB packages) apt-get - An easy-to-use command line tool that offers a simple way to install packages, and unlike dpkg, does not work with the .deb package, but uses a file found in /etc/apt/sources.list to obtain the relevant .deb file from the net. dselect - A text-based menu driven interface that acts as more than just a frontend to dpkg. Allows for installation and removal of packages
Aptitude - An ncurses terminal based front end to APT. It's popular for it's user friendly interface and highly descriptive nature.
Synaptic or Adept - The graphical frontend tools for GNOME and KDE respectively that provide an easy to use interface to apt-get. They make
      
 installing software easier as you don't have to remember any commands, which most new users will feel more comfortable with.
Now that you know what the main Debian DEB tools are, we'll step through installing a Debian package first using the Synaptic package manager, which is the default tool for Debian Linux, and then we will briefly cover installation at the command-line shell:
Installing software with the Synaptic Package Manager:
Synaptic Package Manager. Click thumbnail to expand
To start up Synaptic, click on the System menu at the top left of the desktop menu. Then Click on Administration.
Finally, Click 'Synaptic Package Manager'
Once you type your administrator password (which is the same password as the main user of the machine), you will shortly be presented with a screen similar to the one on the left.
Amongst the many options you see, there is a large list on the left hand side of the window.
This list contains all sorts of different categories of software. If you don't know what you are looking for, start here!
  Searching for packages in synaptic

 By clicking on the Search button at the right hand side of the toolbar, it is possible to type in the name of a program you know the name of.
Note I am typing 'kdegames' here, because I know that I want the software package entitled kdegames.
By pressing the search button in the last step, I have now been shown the package 'kdegames' as well as a description, and version information.
 If you are sure you want to install this title, then right click on it. The menu on the right will appear. By choosing 'Mark for Installation', the software 'kdegames' will be chosen for installation, when you apply these changes.
The example of 'kdegames' was specifically chosen because it is an example of software that has dependencies on other software (it needs other software titles to be installed for it to work). Synaptic/APT is showing you this
 fact and is conveniently telling you that it will also download the extra software shown in the menu to the left to 'satisfy' these dependencies.
You should click 'Mark', in order to continue.
One you click 'Mark', Synaptic will take you back to the main screen so that you may choose more software to install, if you wish.
If you are ready to install the software you chose earlier, click the 'Apply' button.

  Synaptic gives you a warning message, telling you that new packages are going to be installed. By clicking on the Arrow beside 'To be Installed', you can see which ones.
If you are happy with this, click Apply.
Finally, the Synaptic Package Manager goes out to the Net, or perhaps requests a CD (if the data is to be found on the installation CD of your
The final step in downloading and installing software using the Synaptic Package Manager
Linux distro), and then installs the software onto your system.
Once the software is installed, you can generally use it directly from the 'Applications' menu. If you want to find out where the software was installed to, using Synaptic again, locate the software you just installed and right click it, view the Properties, and click on 'Installed Files'.
If you would like to see a video guide on how to install software in Linux, using various methods, see our video tutorial here.
Installing software using APT-GET at the command line
Installing a deb package through apt-get is quick and is as simple as running the following command at the root Linux prompt (for example):
$ sudo apt-get install firefox
  (you will need to input your password)

 That example would install the most recent version of the program 'firefox'. Apt would also tell you that it needs to download some other software (dependencies) in order for 'firefox' to run. A few other commands for Apt you'll need are:
apt-get update
Updates the APT source information, to tell it about any new software in the APT repositories.
apt-get upgrade
Upgrades any old software on your machine to the latest versions automatically.
apt-get dist-upgrade
Upgrades the distribution to the latest available version of the distribution.
apt-get remove
Removes from your system, and any non-required dependencies.
Installing .DEB packages at the command-line shell:
Firstly, download the .deb package and pop it into any folder on your system, then simply install it by running the following command using the terminal:
$sudo dpkg --install package-name.deb
That should be the package installed, although again, there are dependencies to think about, and as with RPMs, make a note of any dependency errors, download the appropriate DEB package(s) to meet the dependenc(ies) and try again.
7.3 Installing RPM files (red hat packages)
      
 Red Hat, one of Linux's first distributors came up with a neat solution to the problems .tar.gz files and compiling has for the normal user. They pre-package the thar file, zip it up and make it do all the hard installation work for you. This system is called RPM and it's the standard software installation method for a lot of Linux distributions today, such as Red Hat, Fedora, SuSE and Mandriva.
If you are unsure if you have an RPM system or you just want to check what version of RPM you are using, then try typing the following at the Linux terminal:
$ rpm -q rpm
You should get a similar answer to this:
rpm-4.0.3-5
If you get something like 'command not found', then it sounds like you don't have RPM installed, you may be using a Linux distribution that does not use RPM natively, for example, Debian, Ubuntu, Gentoo, Slackware, Mepis or Xandros have a look at the DEB or TGZ sections of this page.
It's important that if you go to download an RPM from the net, always try to get one that was packaged by the vendor of your distribution.
For example, if you go to the web and search for an RPM package called 'firefox', and you get 3 RPMs back: One from Red Hat, one from Mandriva and one from SuSE. If you have a Mandriva Linux distribution on your PC, make sure you use the Mandriva one.
The reason for this is all down to fitting into your system configuration structure and things called libraries, which vary from distro to distro.
How to install the package
Okay, let's presume that you have an RPM file ready to install called netscape- 4.76-3.i386.rpm
You can install it in the following ways:
At the terminal/console:
sudo rpm -Uvh netscape-4.76-3.i386.rpm
Preparing 100% Installing 100%
   
 The options -Uvh stand for the following:
U - Upgrade package if already installed, or install if not installed v - Be verbose about the installation
h - show hash symbols to indicate progress of installation
Don't use RPM - YUM is easier and better:
YUM (mentioned in the previous chapter) is a system much like Debian's APT, but for Fedora and other RPM based distributions. It makes dependency problems far less likely for Fedora users.
Installing an RPM package through YUM can be done by the following steps using the Terminal application:
$sudo yum install netscape
Note that you do not need to specify the version of software you are installing. YUM goes out to the Internet and automatically pulls down the latest version it can find of 'netscape', and installs it for you, along with any other software you may need, in order to run 'netscape'.
What if I don't want to type commands in to install software via YUM?
Then use the graphical program, Yum Extender (or similar)! How do you install it, I hear you ask?
$sudo yum install yumex
Now you can access Yum Extender in the "red hat" menu, under "System Tools." For further information on YUM, see This page
7.4 Installing .tar.gz. files (tarballs)
.Tar.gz files, or, Tarballs stand for tape archive and are the Unix equivalent of zip files for the Windows world. They can contain any files, but are often used to package up source code for programs.
   
 Tarballs come packaged in five main flavours:
.tar (standard tar archive with no compression.)
.tar.gz, .tgz (standard gzip compressed tar archive. same as .tar.gz.)
.tar.bz2 (tar archive compressed with extra compression tool, bzip2)
.bin.tar, .bin.tar.gz or .bin.tgz (less common tar archive that contains binary files rather than source).
Most of the time, you will be dealing with .tar.gz files.
Here's how to extract (unzip) a .tar.gz file in two different ways: At the Console:
To explain the latter command, tar decompresses the gzipped file (with the z flag, which is short for gz, or gzip), x means to extract, v is for verbose (so you can see what's happening as it extracts) and f means extract the following file (in this case tarfile.tar.gz). Remember that tar was originally used for extracting archives from tapes, back in the old days, so by default it expects the standard input to be a streaming tape archive.
To extract a tar archive In Gnome or KDE (Graphical Desktop):
Right click on the icon for the appropriate tar file in your file manager. Choose Extract (or in KDE, choose Open with Archiver).
Extract with the tar file with the relevant archiver program.
Okay, now you've extracted it you have to either:
a) Compile the source code you just extracted
b) Run the installer script which is part of the files you extracted
So, how do you distinguish whether you have just extracted a tar file with source code in it, or whether it's a binary, with an installer in it?
 $ cd /directory_that_the_tar_file_is_in<br />
 $ tar zxvf tarfile.tar.gz

 Usually, the contents of the .tar.gz file will help you out here - A file containing source code, will often contain a file called 'Makefile' somewhere in the first folder within the extracted volume. This file is used to compile, or, make, the software.
A tar file which does not contain source code mainly holds a binary installer file in it, the filename of the installer usually ends in .sh or .pl.
For example, the program VMWare, contains a program called vmware-installer.pl in the extracted root folder.
To run the file, you usually need to give yourself 'permission' to run it:
sudo chmod 755 vmware-installer.pl (changes permissions on the file so that it can be read, write and run- executed)
sudo ./install-vmware.pl (runs the installer)
If you found a 'Makefile', then you need to compile the source code. Here's how to do it:
Most of the time, you will need to use the terminal to compile source, so use an xterm/console/terminal and go into the directory that has been made by the package, eg:
$ cd /directory_that_the_tar_file_is_in
$ ls -l Total 302
-rwxr--r-- 1 user group 2907 May 21 17:15 mytarfile.tar -rwxr--r-- 1 user group 0015 May 21 17:15 newdir/
$ cd newdir/
at this point, make sure you read the INSTALL file. You'll find that almost every tarball that you download (especially GNU software) has at least a file called INSTALL, COPYING, README and CHANGES
Most of the time the INSTALL file says the same thing, it's a generic process for installing tarballs, but if a program requires to be compiled in a special way, you'll find out in either INSTALL or README. If it's helpful, it will tell you the names and websites of any other software you will require to download in order to install this software. These other pieces of software required are called 'dependencies'.
  
 If you were installing a generic program, extracted from a tarball and presuming that we just changed into our directory, as above, we could do the following to compile the program:
 $ ./configure
(Take good notes here for any configure errors)
$ make
(Take good notes here for any compile errors)
 $ make install
(Take good notes here for any compile errors)
$ make clean
(this cleans up after a sucessfull compile)
Why compiling is a pain in the ass (for most people), and the problems you might have.
The above procedure doesn't sound too difficult, and in theory, it shouldln't be. But it dosen't always work.
Most of the time this is because of dependencies on other programs, you need other software (usually programming libraries) to be installed first, in order to compile this software.
Picture this scenario: You attempt to install tar.gzipped game called xtux.
The ./configure bombs, and you noticed on the web site of xtux, and also from the output of the ./configure something about SDL. You're not quite sure what it is, but you go onto a site like google anyways and type in SDL.
You find out that SDL is infact a popular graphics library for X and that it's necessary for xtux.
You download SDL-1.2.3.tar.gz from the SDL website and install that tarball. It installs fine, so you try installing xtux once more. It still bombs out, but this time it gives you a different message: could not find Qt equal or greater than 1.3 on a ./configure.
    
 You check your system for QT version 1.3 or greater. You have 1.3.4 so you should be fine. Why is this error coming up? Well, it's probably because Qt (which is another graphics / programming toolkit) is installed, but is not in the folder that ./configure is looking in. You can edit ./configure yourself to see if there is anything you can do to amend the situation yourself, or try removing Qt, and installing another instance of it from another source.
I find that RPM based distros often put stuff like Qt in places that a normal tarball dosen't, so that's often the reason for these compile problems, make sure that if you have installed the normal version of an RPM (binary version), that you also install it's accompanying -dev RPM if you wish to compile .tgz based source against it. By this I mean:
Make sure you have installed qt.i386.rpm and qt-dev.i386.rpm if you are compiling something that relies on QT, as the -dev package will provide the qt source code to the source program you are installing.
Dealing with your files and programs
If you've installed your tarball, RPM or DEB package and you want to run it, or perhaps you are interested in knowing more about the Linux file system including dealing with permissions, have a look at the tutorial on 'managing my files '.
Alternatively, If you want to know more about using your desktop every day, for office use, for multimedia and more, continue on to Chapter 8.
 
 Chapter Eight
 Using Linux every day for work and play
Linux offers so many different uses, and finding out how to do it all can be a difficult task. This chapter makes it easy to find out how to do all the things you want to do with your computer in one easy page. From listening to music, watching TV, using office software and even playing games, this chapter covers all the standard desktop uses of a home or small office PC.
Check out Chapter 8 on the website
   
 Using Linux Every Day
What would be the use in Linux if it didn't have some great software? I'd rather put up with a poorer Operating System than have no software, wouldn't you?
Fortunately, Linux is teeming with great software for all sorts of purposes, and most of it is free of charge. This chapter discusses the most popular uses of a modern-day PC, and where Linux fits in with all of this.
Using Linux for all your office needs
When Linux first came out back in the early 1990s one of the downfalls of Linux was that good office software was lacking, making it an impractical system for business users. From the late nineties onwards, this is no longer the case. Software like OpenOffice and KOffice are excellent, complete packages, and standalone software like AbiWord and MrProject add further to the great selection of tools.
With respect to Groupware tools, either Novell Evolution or Kontact provide all the features of popular groupware offerings from Lotus, Microsoft or Novell.
Office Package Software
LibreOffice is an ideal replacement for Microsoft Office
LibreOffice: Microsoft Office users will be pleased to know that the most popular Office suite in Linux, LibreOffice, supports Microsoft Word Documents, Excel Spreadsheets and PowerPoint presentations.
  
 The latest incarnation of LibreOffice includes a Word Processor (with export to PDF feature), Spreadsheet, Presentation creator and more.
LibreOffice was built on software made by Sun (now owned by Oracle) called OpenOffice and before it, StarOffice.
Although OpenOffice.org is the most popular office suite for Linux today, it should be noted that KDE sports KOffice, which is similar to OpenOffice in many ways, and features much of it's functionality. GNOME also has various office components such as AbiWord and Gnumeric. If you have an older computer with lower memory or storage, you may want to try one of these alternatives.
What if I don't want to use another office or other Windows app? - I like most of my Windows software just fine!
It is understandable that some users may not wish to move from what they know best. Even although OpenOffice is very similar in looks and features to Microsoft Office.
You may find solace in knowing that it is possible to run Microsoft Office as well as a great many other Windows apps on Linux! - Although it is not software written for Linux, it is possible to run it using software from a firm called CodeWeavers. The software, called Crossover supports Microsoft Office, as well as many other popular Windows titles such as Adobe Photoshop, Microsoft Visio, Lotus Notes, Apple iTunes and Dreamweaver.
Groupware Suites (e-Mail, Contacts, Calendars, Tasks)
Evolution
 
 Evolution Groupware in use
Evolution is a groupware suite for performing all of your day to day E-Mail, Scheduling, Contact Management, Address Books and more.
Users can retrieve their E-Mail from a vast array of sources including IMAP, POP3, Microsoft Exchange and Novell GroupWise Servers.
It's overall look and feel is similar to that of Microsoft Outlook, but enhances on a number of features, especially where security is important. It also supports PDA devices and LDAP servers for great connectivity, wherever you are.
Amongst Evolution's competitors are:
Kontact
 synchronisation tool.
KDE's personal information manager management software is a fantastic groupware suite for Linux.
Kontact features a summary overview, a very capable E-Mail client, contact manager, to do list, journal, news reader, note taker, RSS/Syndication client and a mobile device
Support for Novell GroupWare and Microsoft Exchange are not as mature as Evolution, but are pretty much there in terms of usability.
Mozilla Thunderbird
Thunderbird is part of the FireFox family and is as sharp as it's browser counterpart. It offers E-Mail with built in Junkmail filters, IMAP and POP mail server support, contact manager and address book. It is lightweight and easy to use, but not nearly as full featured as Kontact or Evolution.
Using Linux for Artwork
Artwork has often been the lair of Mac users. This is mainly for historic reasons these days - (Apple used to have an exclusive contract with Adobe). However,
 
 times have changed, and Windows users enjoy many of the same fruits as the Mac users do. It's also fair to say that this software is often expensive, however some excellent software exists for Linux for vector and bitmap artists alike and most of it is free.
GIMP
 Gnu Image Manipulation Project (GIMP) is great for editing images
The GIMP is the classic Photoshop-like image editor for Linux. It's now ten years old, and can do most of the features of all the popular off-the-shelf competitors. In case you were wondering, GIMP stands for GNU Image Manipulation Project.
GIMP was made with tasks like photo retouching, image composition and authoring in mind, and it should be fairly easy for an accomplished Photoshop user to convert to the GIMP. If you can't live without Photoshop, it is possible to use Photoshop in Linux, using Crossover.
Inkscape
 Inkscape Vector Image Editing
Inkscape is a vector graphics editor, similar to Adobe Illustrator, Freehand, CorelDraw, or Xara X using the Scalable Vector Graphics format.
Features include shapes, paths, text, markers, clones, alpha blending, transforms, gradients, patterns, and grouping. Inkscape also supports Creative Commons meta-data, node editing, layers, complex path operations, bitmap tracing, text-on-path, flowed text, direct XML editing, and more.
It imports formats such as JPEG, PNG, TIFF, and others and exports PNG as well as multiple vector-based formats.
Don't forget that OpenOffice.org also has a component called Draw, which has a reasonably good vector graphics editor. Also Kivio (part of KOffice), and Dia are

 great alternatives to Microsoft Visio.
Playing and editing Music or Audio
Linux has many applications for playing music and it's also really taken off as a platform for audiophiles. If you are a budding DJ, or play with MIDI instruments, Linux is a great operating system to use. There is a wealth of software available today which exceeds the requirements of many a Cubase user, and all for free!
Audio Players
The first audio player for Linux was XMMS. It is similar to the venerable Winamp product for Windows. XMMS suits as a straightforward no-nonsense audio player, which accepts many plugins and Winamp 2.0 skins, however it's getting a tad dated, especially when it comes to competing with the likes of iTunes and similar software.
As usual, both KDE and GNOME desktops have excellent offerings, and whilst there is a wealth of audio player software available for both platforms, I will limit the following reviews to just two players, one from each desktop platform: Rhythmbox (GNOME), and AmaroK (KDE).
Rhythmbox
Rhythmbox
Rhythmbox is one of the many audio apps available for Linux, similar in interface to iTunes, it allows you to download/upload music to your ipod or other music device, as well as listen and organise all your music on your PC. It also connects you to Internet radio stations, Podcasts and allows you to transfer music to and from your iPod. It now has in-built support for playing, ripping and burning audio CDs.
 
 amaroK
 Amarok in action
amaroK, apart from having a stupid name is a great music player for KDE users. Fans of iTunes will be immediately relieved to hear that it looks very like iTunes and syncs with your iPod flawlessly.
It creates dynamic playlists too, like the party shuffle feature in iTunes, but better! amaroK features automatic CD cover finders for each album on your PC, so you know what the CD looks like when you play it. It also grabs the lyrics for every song you play on demand, as well as telling you pretty much all the info you would ever want to know about the band you are listening to, from Wikipedia. It also features a built in ID3 tag editor to sort out those rogue MP3s with invalid entries, and features MusicBrainz to take some of the guesswork out of it.
Banshee
Banshee is part of the GNOME project and used to be a default player for some Linux distributions. It's still very popular and works very like iTunes. It plays movies, syncs to your iPod or Android device as well as playing music.
Why can't I play MP3s, Xvids or DivX files etc?
If you have just started using Ubuntu, you may notice that the default music player is called Rhythmbox. Furthermore, if you try to play an MP3 file, you will find that can't do it! This may be the same with the movie player when you try to play certain types of encoded movies.
There is a good reason for this - Ubuntu, as with Fedora, Suse Open Edition and any other free Linux distribution cannot ship with software that is either not free, or contains a license which is considered commercial. It may not be illegal to distribute such software, but you may be required to accept a seperate license, or

 use the software on different terms than the rest of the system. In order to keep the licensing system sane, this software is distributed separately from Ubuntu (as with other distributions).
You may have noticed when installing Ubuntu there was a tick-box which asked if you wanted to install "Proprietary codecs", if you ticked the box then, the software you require to play most movie and music formats should already be installed, otherwise, Here is how to add support for these 'codecs' after installation of Ubuntu:
If you are using the Ubuntu Software Centre, simply search for ubuntu-restricted- extras and click 'Install'. Otherwise, if you wish to use the Synaptic Package Manager, follow these steps:
Firstly, open the Synaptic Package Manager.
Next, add the Universe and Multiverse Repositories, by clicking on the Settings Menu and then clicking Repositories.
Select the 'Multiverse' and 'Universe' Repositories so you can download commercially licensed materials. Click OK. Tick both of the bottom boxes, to add the Multiverse and Universe repositories.
You will be asked if you wish to reload the package list from servers, Click Yes. Once the update has been completed, you will be returned to the main Synaptic screen, where you will be able to use the 'Search' button.
Click Search and type ubuntu-restricted-extras in the text box. Right click on ubuntu-restricted-extras and select 'Mark for Installation'.
You may be asked to 'Mark Additional Changes', which is fine. Click on Mark. Click on the Apply button (the green tick). You will be asked to confirm the changes, press the small apply button to continue and the packages will be
          
 downloaded and installed for you.
If you need a refresher on installing software, refer to Chapter 7 for detailed instructions on installing software for your particular distribution
See the official Ubuntu documentation for more info on restricted formats. Sound Editing
Again, there are so many good tools out there for sound editing, it is hard to name but a few here, but we will try to keep it to a good few!
Ardour
Ardour - a digital audio workstation for audio professionals
Ardour is a digital audio workstation which can be used to record, edit and mix multi-track audio. It even goes as far as mixing video soundtracks. Ardour is similar to ProTools in it's ultimate quest, and uses the much acclaimed JACK audio system.
Ardour has an excellent manual, and a quick and easy to use GUI. Ardour appears to be quick, snappy and doesn't use up too much CPU time, making it an excellent choice for a sound buff!
Audacity
Audacity is a fantastic, simple multi-track audio editor
Audacity is well worth a mention because whilst it does not have all of the features and power of Ardour, it does fill all of the needs of a sound-editing novice, whilst still beating any entry level sound editing software on the shelves.
  
 Audacity's standard features can be picked up in a matter of minutes and allows for some really professional results. It offers unlimited tracks and many different effects in-built, so if all you need is straightforward multitrack or single-track editing, Audacity is a great tool.
Rosegarden
Rosegarden is a professional audio and MIDI sequencer, score editor, and general- purpose music composition and editing environment.
Rosegarden is an easy-to-learn, attractive application and ideal for composers, musicians, music students, small studio or home recording environments.
Sound on Sound magazine called Rosegarden the closest native equivalent to Cubase for Linux, which is no mean feat, and Rosegarden has come to the acclaim of many other publications such as Linux Format's Top Stuff awards.
Watching or Editing Video
most popular titles today are:
VLC - Multiplatform media player (Works on Linux, Windows and Mac).
Banshee Media Player for GNOME
Miro (It's also an online video content player, a Hulu or Netflix of Linux, if you will). Banshee (an all-round media player for GNOME, similar to iTunes).
Kaffeine (KDE's answer to Banshee).
Some others to mention: NoAtun, SMPlayer, Totem.
 Click here for a list of some more audio file editors, DJ Software, Effects Processors and control applications for Linux
 
  VideoLAN/VLC is a great app, if a little difficult to navigate, however it offers a wonderful array of playback possibilties - handling almost every format out there, it's very versatile, but it's real power comes from the fact that you can serve up media from any pc and get it to appear anywhere else - beam videos over the net, or just to another
monitor in another room in your house. Support for resampling makes bandwidth problems with Internet broadcasting less of a problem.
Miro is a jack of all trades for Music, Movies, Online video, conversion and more
Miro allows you to convert any video formats you like as well as download and play almost any video. It will work with your current music library and will synchronise content to android and kindle formats. You can also buy music and apps inside Miro.
Watching DVDs and other Rights Managed Media Types
Just as with playing MP3s, DVDs and other formats such as DivX/Xvid, wmv and Quicktime all have their own propriatery plugins or codecs. See the above section about installing 'ubuntu-restricted-extras' if you need extra software to play these formats in Ubuntu.
Video Editing Openshot
Supporting HD video, Blu-Ray and 3D, it's got a lot of features you might not expect from a simple to use video editor. If you are a fan of software like iMovie for the Mac, you'll feel at home with OpenShot.
Cinerella
 
  Cinelarra
If you need more than OpenShot or Kino, then Cinerella is for you. Hue, Saturation, Denoising, Compression, Time Stretching, Text-to-movie, batch rendering and much more are all staples of this sophisticated video editing suite.
Kino
Kino Video Editor
Kino is part of the KDE desktop apps, but will run with only the QT libraries. Kino features excellent integration with IEEE-1394 for capture, VTR control, and recording back to the camera. It captures video to disk in Raw DV and AVI format, in both type-1 DV and type-2 DV (separate audio stream) encodings.
You can load multiple video clips, cut and paste portions of video/audio, and save it to an edit decision list (SMIL XML format). Kino can export the composite movie in a number of formats: DV over IEEE 1394, Raw DV, DV AVI, still frames, WAV, MP3, Ogg Vorbis, MPEG-1, MPEG-2, and MPEG-4.
Blender
 
 Although Blender is not technically a movie editor it's worthy of a quick mention. A number of movies have been created with this sophisticated 3D graphics and animation creator, it's been around a long time and is still in active development.
Watching and Recording TV in Linux
Recently, Linux has come to great acclaim in the TV space, due to the excellent range of software available at no cost. You can literally turn an old PC into a Linux style Sky Plus/Tivo box, all you need is a TV card and a big hard drive!
MythTV
MythTV allows you to turn your PC into a Media Centre complete with PVR and TV options.
MythTV is open source software that turns your PC into a PVR (Personal Video Recorder). It enables the user to pause live TV, Skip ads, use an electronic program guide, set recordings to record whole series of a particular program, edit recording schedules, organise and view your home photo and videocamera collections as well as listening to music and record content from the Internet, it excels at many points, making it a cut above the current offerings from Microsoft (Media Centre) and PowerCinema.
Also check out MythBuntu,which is a pre-packaged distribution of MythTV, making it easy to install on a PC.
If you only want to do the basics, you can record and watch live TV then you don't need to use something as feature-laden as MythTV. Popular titles for viewing and recording TV are tvtime and xawtv.
The Hauppage series of TV cards seems to work best with the Linux TV software as it is the most popular range, and best supported through the video4linux driver.
 
 Playing games in Linux
Games a have been a mixed bag with Linux, and still needs perfecting, however companies like id software and others are releasing their top titles for Linux as well as Windows these days, and is helping the overall popularity of Linux as a gaming platform no end.
Steam
Steam is a popular Windows (and laterally Macintosh) games platform. Made famous by games like Half-Life, Steam now hosts hundreds of blockbuster titles, and is now available for Linux. Not all of the titles are available for Linux yet, but this seems to be a work in progress.
Native Linux Games
Games such as the Team Fortress 2, Quake, Doom and Wolfenstein series are available 'natively' for Linux (that is, the software is written to work in Linux). Other games which will also work with Linux such as the Soldier of Fortune series have been ported from their Windows base. For more titles which work in Linux check out the Games On Linux website.
The number of natively available Linux games is still low, however there is a solution, however - Crossover is a program which allows the user to play most of the Windows games titles within Linux. This software is not free, but is fairly priced, and offers a good degree of ease of use.
There are a great number of games which are also freely available Linux software which you can see at places such as linuxgames.com or happypenguin.org. Tux Games have done a great job of porting commercial games to Linux which you can buy for great prices.
A video demonstrating how to get to grips with the GNOME Desktop
Now that you've read all about the various different applications you can use every day on your Linux desktop, why not see it in action! The following videos taken from our Articles & Further reading section show you each element of the Ubuntu Desktop so you can completely familiarise yourself with all that it has to offer.
Part 1 of 3: The basics of the basics of the GNOME Linux Desktop, Essential

 applications such as text editors, photo editing, instant messaging, e-mail and web browsing with Firefox.
  Part 2 of 3: Using the standard Office suite (OpenOffice/LibreOffice), how to navigate your files and folders on your computer and other computers as well as using the settings menu:
  Part 3 of 3: Using Virtual Desktops and Installing Software as well as software repositories (sources) explained:

 Quick Tips
The following pages have been selected from the website as an example of the useful selection of the tutorials on the website.
Check out all of the tips on the website
   
 How to put a Linux ISO onto a USB stick and make it bootable on a Mac
 So, you've got a mac computer and you want to put the ISO you just downloaded onto it. If you've used tools like UNetBootin before, then you'll have found it a nice easy graphical way on a PC. Unfortunately, Mac users have to go through a few more hurdles to get an ISO image onto a USB stick in order to make it boot properly.
What are we trying to do here?
So, just to be clear, you have downloaded Linux (say Ubuntu) from the Ubuntu website. When you downloaded it you get a .iso file. This .iso file is a disk image. In the past, we'd 'burn' this image onto a blank CD or DVD. They weren't really intended to be put onto USB sticks. USB sticks were more meant to pop regular files onto, not disk images.
However, this is 2016, and people don't have CDRW drives any more, so let's find out how to do this on your beloved mac. If you want a full tutorial on how to install Linux on a Mac computer, check out our guide.
Step 1: Download the ISO
This may seem obvious - but just in case you haven't already downloaded your Linux distro, make sure you grab the right one for your machine (if it's a new Mac, it's going to be the 64-bit ISO image - the filename usually ends amd64.iso. If you are downloading Ubuntu, you can get it here: www.ubuntu.com/download/desktop
Step 2: Erase / Format / Initialise your USB Stick
It's time to pop your USB stick in your Mac. Regardless of whether you have a
 
   blank USB stick, or one with lots of files, you are going to need to completely erase
the contents of it. It's commonly known as 'Formatting', but those Cupertino
How to mount a USB stick as a
Cliques like to call it 'Initialise' instead :)
non-root user with write
To initialise your USB stick, go to your Applications menu. In Utilities you'll find an
Apple app called 'Disk Utility'. Launch that App, and you'll see something similar to the below screenshot:
permission
So you want to use a USB stick or a USB hard drive, and you don't want to mount it as root every time?
WM h a c y D w i o s k u l U d t y i l o i t u y w a n t t o d o t h i s ?
WhIet'ns yaohuaslasulenctoh mthoeuanptpt,hfeinUd SthBestUicSkBusstinckg iscuodno. Ie'vecryirctilemdem- younehaovnethtoe tlyepfte hantdhesidroeo. tOpnacseswyour'dv,eafnodunyoduith, calvicektonspite(cmifaykianlgl tshueremyoundteofpintitoenlys heavche thimee righytoduismk)o, uandt ipt.ress Erase.
The permissions on a FAT32 USB stick or drive don't allow write permissions as you, only root, so you have to sudo any write based file operation on the USB device. This is because the commonly found format of most USB disks is FAT32, as it has the best compatibility with Windows machines and is supported on Mac OS and Linux too, unfortunately FAT32 has no notion of file permissions, unlike EXT4).
Another point worthy of note, if you are someone who uses a shiny, full fat desktop like GNOME or KDE, then you'll likely find that things like USB
   Erase (Initialise) the USB Stick
removable media are automatically mounted for you, so it is often fine to use it in that capacity. However, for Linux luddites and server admins like me, that just
When you click Erase, you'll get a few options. Make sure you choose 'GUID
won't cut it, I want an easy user-level mount at the command line, or bust!
Partition Map' from the Scheme dropdown. I also gave it a name of UBUNTU so it is easy to identify in the following steps, however this is not required.
Ok, you've made up your mind that you want to be able to mount the disk as a real user, not root. The good thing is, is that this is really quick to do.
Click on the Erase button.
Firstly, we need to create a directory where the drive is going to be mounted to.
Step 3: Identify the disk and unmount it
So if you haven't done so already, create this directory:
 $sudo mkdir -p /media/<username>/usb
$sudo chown <username> /media/<username>/usb $sudo chmod 0777 /media/<username>/usb
  
    Obviously, you can call the mount point whatever you want, I've just called it usb and stuck it in the /media/<username>/usb directory (note <username> is your own username). The last two commands change the ownership to be 'you', and sets the permissions to read and write for all users (change this if you want it to be less open).
Next up, we need to ascertain which drive you want to mount. You may already
Use diskutil to list the available disks
know this, but if you don't know what the /dev/ entry for the USB stick is, then you can find this out by sticking it in the usb port on your machine and running
Next up, open another inbuilt Utility on the Mac, this time it's called Terminal.
dmesg:
Launch that and you'll get a blank text window.
U$sdemtehesg'diskutil list' command as per the above screenshot (click the image to see it clearer).
usb-storage 1-2.2:1.0: USB Mass Storage device detected
6
 IMPORTANT!
scsi host5: usb-storage 1-2.2:1.0
scsi 5:0:0:0: Direct-Access USB DISK 2.0 PMAP PQ: 0 ANSI:
Take a note of what device name your newly initialised USB disk is. You can see in
my screenshot that /dev/disk0 is the Mac's hard drive, disk1 is the USB stick in my
sd 5:0:0:0: Attached scsi generic sg2 type 0
case (note the name I gave it, UBUNTU). It is VERY important that you take note of sd 5:0:0:0: 15133248 512-byte logical blocks: (7.74
the correct disk here. If you use the dd program (coming up shortly) on your Mac's
GB/7.21 GiB)
hard drive, instead of the USB stick, your data will be toast! You have been
sd 5:0:0:0: Write Protect is off
warned!
sd 5:0:0:0: Mode Sense: 23 00 00 00
sd 5:0:0:0: No Caching mode page found
Now that you have initialised the USB stick, unmount it. This is different from
sd 5:0:0:0: Assuming drive cache: write through
ejecting it, because we want to make the USB stick still visible to MacOS, we just
<strong> sdc: sdc1</strong>
want to stop it from being used by the OS.
sd 5:0:0:0: Attached SCSI removable disk
To unmount the disk enter the following command:
You can see that it's detected that a USB storage device on sdc, and that the partition it can see is called sdc1 (highlighted above in bold).
 diskutil unmountDisk /dev/diskX
Now all you need to do is edit the /etc/fstab file and add this line at the bottom:
Where diskX is the name you wrote down.
 Step 4: Convert the image type to UDRW
<code>$sudo vim /etc/fstab
/dev/sdc1 /home/storage auto user,umask=000,utf8,noauto 0 0 </code>
Remove the 'noauto' bit if you want it to be mounted automatically on boot, however that's probably a bad idea if its a removable device!

   That's all the hard work done, and you shouldn't have to do that ever again, now all you need to do to mount it, whenever you like, is to issue a simple mount command:
<code>$mount /dev/sdc1</code>
or, alternatively you can mount it by its mount point. Either way, it doesn't matter :)
NHoepxteytohuishsavestoygoou isnotmo ethaegfgorladveartwiohni!ch you downloaded the .iso file. If this is your Downloads folder you would type:
 cd ~/Downloads
Note that it is case sensitive. You can use /home/yourusername instead of the ~
You can use the ls -l command to look at the files in the folder, just to make sure you are in the correct folder. In there, you should see the .iso file you downloaded in Step 1.
In order for the image to be writeable to the USB stick, you need to convert it into the UDRW image format. To do this we use the hdiutil command.
As you can see from the above screen shot, you type hdiutil convert -format UDRW -o
after the -o you provide a filename for the file you are about to create. It doesn't really matter what it's called. I called my one ubuntu1610.img. Note that MacOS will append a .dmg filename on the end of it because. Well, because MacOS!
Finally you provide the source file. The source file is of course the name of the file you downloaded from the web (ubuntu-16.10-desktop-amd64.iso, in my case).
So, the command in full is:
hdiutil convert -format UDRW -o <outputfile.img> <sourcefile.iso>
When the command finishes, you'll see the filename of the newly created UDRW
 Convert the image to UDRW
 <code>$mount /media/<username>/usb</code>
  disk image. You can copy this to the clipboard to help with the next step if you like.

 Step 5: Put the disk image onto the USB stick
Convert images at the command line with ImageMagick
ImageMagick is a very mature tool. It's been around for donkeys years and it even acts as the silent 'back end' to some of the best GUI-based image manipulation
software. However, the jewel in ImageMagick's crown is the tool called 'convert'.
Use DD to write the image to the USB stick
As you can imagine, this tool converts images at the command line. It can do so in
many ways, for example, it can resize, change image quality, change formats (eg This is the vital stage. And this is where, if you didn't take a note of that /dev/diskX
PNG to JPEG) and much, much more.
bit in step 3 properly, you are going to be in a whole world of pain.
Thisisagreatexampleofthepowerofconvertfrom http://climagic.org:Hereyou Still in the Terminal, carefully type the following:
can see how to make thumbnails of images with filesnames in the range
IMG_3000.JPG - IMG_3499.JPG:
sudo dd if=<UDRW_IMG_file_you_made_in_step_4.dmg> of=/dev/diskX bs=1m
 It will ask you for your usual account password. Enter this and the dd command will
for i in IMG_3*.JPG ; do convert -quality 60 -geometry 300 $i
start. Unfortunately, dd is about as old-school as it gets. Literally, you won't see
thumbs/$i ; done
anything happening on your screen for quite some time. If your USB stick has a light on it, you'll be seeing it flash, but otherwise you will have no idea that anything
is happening. Hold on tight though, it's doing its thing. Go find some wet paint to The example shows that through simple one line command you can batch process
watch drying in the mean time. I've tried this a number of times on different USB many items with ease. Doing that with even the most substantial of image editing
sticks. Some were done in 5 minutes, some took 25. software is sometimes either impossible or a real challenge.
Once the process is finished, you'll see a screen that looks pretty much like the one Here is one last example of its simplicity:
above. You'll also likely get a popup from MacOS saying that the USB stick can't be
 convert -resize 1024x768 original.JPG new.JPG
read by the computer. Do not click any of those buttons, no matter how tempting that 'Eject' button might look!
Step 6: Finishing up
As you would expect, it simply changes the size of original.jpg down to 1024x768
pixels and outputs the new image in a new file called new.JPG.
It's now time to eject the disk. We need to do this manually, to do so, enter the following command:

    diskutil eject /dev/diskX
What is X, XFree, XOrg or X
Replacing the X with the number you used earlier in this guide. It's now safe to press the Ignore button on the window you saw in Step 5.
Windows?
That's it! You can now boot your computer (whether it's your Mac, or another PC),
using the newly created USB stick. To start it on your mac, reboot your mac, with the USB stick plugged in. Whilst it's rebooting, hold down the 'option' key (sometimes it's called Alt, depending upon your keyboard).
You should see a selection of disks to start up from. Your USB stick should be visible as a yellow disk icon, you can select the USB stick using the left/right arrow keys. Hit return to start up from it.
What X is Not:
X is not a product by Microsoft with the letter X before it.
X does not affect the way graphical windows on your screen look
X won't let you browse through files in a graphical manager
X is NOT a GUI (Graphical User Interface)
X doesen't sound like it does a lot, does it? Well read on to find out why it's an essential part of Linux!
What X does:
X11 (and it's variants, XOrg, XFree86 etc) is the layer between the hardware on your system (your graphics card, and so on) and the GUI that sits on top of X. Have a look at the following diagram to get the general idea:
       
  When a program is started up, it goes through the process of first talking to the GUI, about what to do with it's windows, ie: placement, focus and so on. The GUI applies it's thoughts to the process, applies the look, menubars (File, Help, Close, Minimise, etc), and all decorations to the window, then passes it to X. X has the final decision on where it places it on a screen. It then talks to the hardware, making it issue the process.
Tux says: GUI stands for Graphical User Interface, and comprises of things like icons, menus, pointers and windows. It is usually pronounced 'Gooey'.
Without X in the equation, the GUI that you use, or properly termed:
the Window Manager couldn't do anything.
X Is also a server. We usually refer to it as XOrg or just as X, but indeed it's proper title is an X Window Server. When you run X on your own linux box, X has to determine whether you want to display it on a local machine and on a local monitor, or on a remote monitor. You can also have more than one X session running on your linux box at the same time. If you have 2 monitors, and a dual headed graphics card (ie: Matrox G400 DH), you can get X to display Jane's X session on monitor 1 and Bob's X Session on monitor 2, all running on one computer, at the same time. Show me Windows Vista do that, please :)
Some X Heritage
 
 If you're interested in knowing how X came to be, this chapter is for you.
X was an idea concieved by many: In 1984, Apple had released it's first graphical user interface. If you were either too young, or never saw it. I reckon you should definitely take a look at the 1984 TV advertisment of the first Macintosh. It's a wonderful piece of art. You can see this great piece in computing history HERE, alhthough be weary- it's around a 13MB quicktime movie-- you'll need a fast connection if you want to see it in the next hour!
Even prior to this, a group of real boffins with some way far-out ideas (circa 1978) had been stroking their beards, drinking lots of hi-caffeine coffee and creating the very first GUI. It was made by the researchers in Xerox's PARC (Paulo Alto Research Center), where they designed a GUI called Exlir, and terminal systems to go with it (called the Star). Unfortunately, it was not a commercial sucess, mainly due to high pricing.
Anyways... After Elixir, a few GUIs appeared (amongst others): Digital's GEM, Atari's TOS and the most famous of all, The Mac System OS, in 1984. Less than two years later in 1986, a consortium of UNIX developers including Sun Microsystems , Silcon Graphics and AT&T created X. Originally it shipped with the window manager called TWM. The source of this product and who created it, are still unknown.
TWM (perhaps, Tom's Window Manager, or, as most know it today; "THE Window Manager"), was the interface that sat ontop of X, and allowed you to open up Xterms, resize windows and do basic window manipulation. It was pretty darn basic to say the least. Then came FVWM, which was a major improvement. For Linux geeks and for people who want a really light window manager, you'll find twm and fvwm still in use today. It still ships with all the latest distros. FVWM2 came out years later, along with other window managers such as NeXt/NeXtStep, AfterStep, IceWM, QvWM (which is supposed to look identical to Windows 98 btw), KDE, Gnome and many others. In 1990, Microsoft Windows 3.0 was released.
 
 How to automatically make your Windows drives become available to Linux on startup.
Here's a handy utility that will save you any technical nastiness. It'll make your Windows drives (partitions) show up in the Ubuntu file manager so you don't have to mount them by hand each time you want to access them.
How to use the ntfsmount tool to automatically connect your Windows partition on startup
1. Launch the Synaptic Package Manager or the Ubuntu Software Centre. 2. Search for 'NTFS Configuration Tool'
3. Install it.
4. Once installed make sure any drive you wish to Auto-mount is unmounted. Do this either my restarting Ubuntu and not mounting the drives, or by ejecting them via nautilus’ side-pane or the terminal.
5. Launch the 'NTFS Configuration Tool' from System > Administration > NTFS
  
 Configuration Tool.
6. In the NTFS Config. window, check the box next to the drive(s) you wish to automount.
7. Click Apply.
A new window will appear, however only check 'Enable Support For Internal Device.' . Your windows NTFS partition should now automatically mount on reboot each time.
 
 How to read and write to Windows NTFS drives as any user
So you have a Windows hard drive using the NTFS partition type. The good news is that most Linux distributions these days can read and write to it automatically without as much as a config change. It automatically sees the partition and mounts it
That's great, but what if you have a one-user Linux box and you want every app on your Linux box to be able to use the files on that partition, not just your user account? I recently ran into this problem when I wanted to share an external NTFS formatted USB drive with my Plex Media Server. The Plex media server runs as the pseudo user 'plex'. My own user account obviously is not named 'plex' and therefore it refused to see any of my music and movies on the USB hard drive, as the files on the hard drive were 'owned' by my user account, not 'plex'.
How to get around this problem? Well, provided you are not worried about sharing everything on that drive with all (or some) of the other real or pseudo users on the machine, then you can create a user group, say called 'ntfs', and have all the users you want to read and write to the drive in that group. Here's how you do it from the command line:
 sudo groupadd ntfs
sudo usermod -a -G ntfs YOUR_USER_NAME
sudo usermod -a -G ntfs USER_NAME_OF_ANY_OTHER_USER_YOU_WANT_TO_ACCESS_THE_DRIVE
So the above has created the group 'ntfs' and added your own username as well as any others you want to that group. The output of the first command should look like this:
 
 The output should look something like this:
 Adding group `ntfs' (1004)... Done
Take note of that number in brackets. That's your GID (group ID number).
Next, let's make the location to mount the partition on your drive. Assuming you are running Ubuntu, this will be in /media, but it can be anywhere you like, for example /mnt, or even under / - just as long as all the users you added to the group can already access that folder.
Now it's time to edit the file system table (fstab). Don't worry - that's not as scary as it sounds, it's just a text file which contains a list of the partitions the Linux system should mount on startup.
sudo nano -w /etc/fstab
Assuming that Windows is installed on the first drive, and first partition we use /dev/sda1. If your windows drive is on another drive in your PC, say the second drive, and it's the third partition, it would be /dev/sdb3 and so on. You can check to see if you got the right drive and partition number with the fdisk tool.
add the following to the bottom of the /etc/fstab file:
Remember to keep the spaces after each item as they instruct the system to read each option. Don't forget those two zeroes at the end of the line either!
Explanation: /media/windows is the new location where the partition is mounted, so when you visit it in your file browser (or with ls at the command line), you'll see the files in /media/windows. The option ntfs-3g is telling the mount program that this is a ntfs partition and we will use the 3g driver to write to it. The next option tells the system to mount the partition automatically at startup and finally the gid/umask information allows all users in the ntfs group to read and write to it. Note we specified the gid of 1004 which is the gid we were given by the groupadd command. If you don't match this number, you and any other user in the newly created ntfs group won't be able to read and write to the /media/windows folder.
 sudo mkdir /media/windows
sudo chgrp ntfs /media/windows
  /dev/sda1 /media/windows ntfs-3g auto,gid=1004,unmask=0002 0 0

  Make sure that the gid= value is the same as whatever you saw when you used the groupadd command earlier.
Save the fstab file and exit the editor. To test it works properly, simply type:
sudo mount -a
This command reads the contents of the newly updated fstab and as long as it is correct, it will mount the windows partition in /media/windows (or wherever you specified to mount it). When you reboot your machine the partition should automatically be mounted so you shouldn't need to do anything!
Enjoy!
  
 How to use a Mac to create a Linux Live USB Stick and Boot it
Ok, let's say you are just about to take the plunge and install Linux on your nice shiny Mac but before then you want to test drive how it really works, using a Live distro. There's a few ways to boot a mac up, firstly there's the good old CD ROM drive (SuperDrive as you mac fans know it), but guess what? Most of the new MacBook Pro's etc don't even have a DVD/CD ROM drive! So scratch that... Next there is network boot and finally there's boot from USB. Network boot is a whole other ball game that we will cover separately for good reason so let's concentrate on how to create a USB stick which is bootable and contains a Linux Operating system of your choice on it. The good thing about this tip is that it's quick and easy. The other, official ways of booting an Apple/EFI system can be quite complex, including Ubuntu's own solution.
I tested this on a Macbook Pro Retina (Late 2013 model), however this should work on any modern Mac with EFI booting. Note that the tool seems to have been tested with Ubuntu and it's derivatives, if you are trying another distribution like RedHat/CentOS, this may not work for you.
What you'll need
1) A Mac with EFI ROM running Snow Leopard or Later ( How do I tell I am running
an EFI mac?). 2)You'llneedtheeasytouseMac-LinuxUSBLoadertoolfrom thisweb
site (SevenBits).
3) An ISO download of your Linux distribution of choice. Be sure to chose a normal 64-bit version made for PCs, don't download an Apple specific version as we require the distribution to support EFI booting. EFI has replaced the good old BIOS in the new macs as well as many newer PCs.
 
 Step 1 - Format your USB stick
Pop your USB stick in and fire up Disk Utility (a built-in App on your Mac). You will need to format the USB stick as FAT32 (MS-DOS FAT) format, and it must have an MBR (Master Boot Record). Make sure that there is one partition on the USB stick and format it (this will destroy any data on it).
Step 2 - Copy the ISO image to your USB stick
To do this, simply fire up the Mac-Linux USB Loader tool as listed in the 'What you'll need' section of this article.
Click on 'Create Live USB'. Select the appropriate ISO image from your Finder and sit back for a while.
Step 3 - Boot Linux
All that's left to do is restart your Mac and boot Linux from the USB stick.
To do this, shut down your mac, turn it back on. When you hear the usual Apple 'Chime', press and hold the Option key. You will see all your drives including the inserted USB stick which will be yellow in colour and will probably be entitled 'EFI Boot'.
Click on the yellow icon and you will see a text screen loading the Linux kernel if all went well.
 
 How to install Linux on a Macintosh computer
So, you've got one of those shiny Macbook Pro retinas?
..But you are a Linux fiend, and now you want to rid yourself of the poor mans' Unix that Apple call Mac OS X? This tutorial is for you!
 This is an advanced tutorial which works at the command line and can cause irreparable damage to your data. If you are a novice, it is not recommended that you undertake this tutorial. If you do proceed, make sure you have backed everything up with TimeMachine or such like tools. I must also acknowledge the awesome work of Jessie Frazelle, her blog entitled 'Linux or Death' was the inspiration for this article, and much of it is shamelessly cribbed from there, simply because it worked, unlike any other blog on the subject we found on the interwebs!
This tutorial has been tested on a late 2013 Macbook Pro 15", however it should work with any EFI based Mac (more on that in a bit). EFI based Mac's started around 2008 (you can check the list of the Apple EFI systems here). This should include Macbook Pros, Macbook Air, iMac etc...
I am also working on the basis that you want to keep Mac OS X on your hard drive and that you wish to dual-boot it at any time. You should have plenty of free space on your disk drive (the more the better), so either delete some cruft or move some of your old data onto a separate external archive hard drive (because I know you got one or ten of them lying around!).
Finally, we used Mac OS X 10.11.1, 'El Capitan', which is the latest OS X at the
 
 time of the release. El Capitan introduced a 'security feature' called 'SIP' (System Integrity Protection) which you will additionally have to overcome if you are using El Capitan or newer. More on that in a bit. We will be installing Ubuntu, specifically Ubuntu GNOME 15.10, but this should apply to any Linux distro more or less, although your mileage may vary with Video stuff particularly.
The tutorial you are about to read has six main sections. These are:
Installing the EFI boot manager
Downloading and converting your Linux distro of choice Partitioning your hard drive
Installing Linux
Finishing up and nice to have items.
Installing the EFI boot manager
EFI stands for Extensible Firmware Interface and is now pretty much commonplace in Macs and PCs across the industry. It replaced the trusty old BIOS system that PCs had used since the 1980s. Installing Linux on a BIOS based machine was trivial, but now with Apple's take on EFI on their customised hardware, it can be a little challenging. No worries, this is the Ultimate Linux Newbie Guide. We got this!
Disabling SIP
Before we go ahead and install rEFInd, we will need to take care of that pesky SIP (System Integrity Protection) rubbish. There are a couple of ways to do this, but we found the easiest way to do so, is pop your system into recovery mode and issue a command from the terminal there. There is a bit more information on this process over here.
To enter recovery mode on your Mac, shut your machine down completely. Give the machine around 30 seconds and then switch back on. Now quickly hold down the Command and R key at the same time until at least you hear the Apple 'chime' sound. Shortly you will enter recovery mode. I recommend plugging in an Ethernet cable to do this, however it is possible to do with WiFi.
Once you are in the Recovery tool, enter the Utilities menu up on the top bar, and click on Terminal.
Issue the following command:
      csrutil disable

 That's it! Restart your computer and you are done. If you ever want to re-enable the SIP functionality (why?), then you can transpose disable with enable using the same steps.
Now you should head back to the terminal. We are ready to install refind!
Download rEFInd
The red circle indicates where to download rEFInd
rEFInd is a boot-loader for EFI based machines. Think of it like bootcamp, or GRUB for GRUB :) You'll want to download rEFInd from the rEFInd website:
rEFInd Website
Now, if you take a look around the rEFInd website, you'll see it looks like the guy that wrote it believes in punishing everyone that wants to use it. It took us about 20 minutes just to find the frigging download link! So the ULNG has taken the time to go through all the pertinent steps to make it shit tons easier for you!
The version of rEFInd that we used is 0.10.0, and we used the zip archive version. Once you download the binary, you are going to need to start the rest of your work from the Terminal, so open up the Terminal from the Utilities folder on your mac and head over to your Downloads folder where you saved rEFInd to.
If the zip archive is not already unzipped, unzip it using the unzip command and head into the   newly created refind-bin-0.10.0 folder:
$unzip refind-bin-0.10.0.zip $cd refind-bin-0.10.0
We now want to install rEFInd, and we should install all the EFI drivers just in case we need them at any time. rEFInd 0.10.0 offers a substantially more improved installer than previous versions. Which is nice :)
     
  $sudo ./refind-install --alldrivers
Now it's time to edit the EFI config file, but you will need to mount that hidden EFI partition first. Thankfully, rEFInd has a little tool you can use to mount the partition:
 $sudo mountesp
Edit /Volumes/ESP/EFI/refind/refind.conf. Like us, you may find the refind.conf file is in /Volumes/ESP/EFI/BOOT, instead of a folder called refind. This is
probably because we fiddled around with rEFInd and it's predecessor, rEFIt before. Just because.
locate the line that says scanfor and edit it to say:
  scanfor internal
If no such line exists, add it into the file near the top.
Load the linux file system driver. Check for a line that starts fs0. If no such line exists, add it as below, otherwise edit it:
fs0: load ext4_x64.efi
fs0: map -r
Save the file and quit your editor. That's pretty much it for the rEFInd bit. That is the hardest part over and done with. If you want to be sure it worked, you should power off your machine and power on again. If you see a grey screen with the rEFInd logo, then it has worked. You should be able to chose the Mac OS X logo and hit return to start up OS X again.
Downloading and converting your Linux distro image of choice
Next, unless you haven't already downloaded the iso image of your choice, it's time to go grab it. For this particular demonstration, we are using Ubuntu 15.10, however most other distros should work. Using more hard-ass systems like Arch or Slackware, or even Debian, will be more challenging. This is challenging enough, so
   $vi refind.conf (or nano, if you are that way inclined. Just
 not emacs!).
   
 do what you will, but we will stick to the easier distros for now!
Make sure you download the x64 version of the distribution you choose, if there is an EFI boot version, choose that also.
Next, you need to convert the iso file into an image file that Mac OS X recognizes so that you can stick it on a USB stick to boot from. Although you are back at the terminal for this, thankfully it's not that onerous a task.
cd (directory where you downloaded the distro to)
(so, in other words, hdiutil convert -format UDRW -o ubuntu1510.iso.img ubuntu- gnome-15.10-desktop-amd64.iso would convert the latter file into ubuntu1510.iso.img, which would be in the RAW, or more specifically UDRW format).
Mac OS likes to rename the file with a .dmg extension, to avoid confusion over that, it's probably best that you rename it. A simple mv command will sort that one:
mv ubuntu1510.iso.img.dmg ubuntu1510.iso.img
(renames the file ubuntu1510.iso.img.dmg to ubuntu1510.iso.img).
Next, quickly type in diskutil list in the terminal. It should list one disk drive (if you have any external drives connected, disconnect them for now). Take a note of your Mac OS disk. It should be called /dev/disk0. Look for tell tale signs in there like 'Macintosh HD'
Next, locate that USB stick of yours and whap it into the usb port. Please note that you want to have an empty USB stick, because this process will destroy any existing data on it.
   hdiutil convert -format UDRW -o <<filename you
 want.iso.img>> <<filename of the download.iso>>
 
 Once you have the USB stick plugged in and all settled down, issue the following command:
 diskutil list
You should see a list of disks like the one in the screenshot to the above. Note the red box around /dev/disk2. You can see that it has a Windows FAT32 partition, our usb stick is 8 GB big, you can see the size there is 8.1GB, which is clearly much smaller than the main hard drive, which is 500GB in size. Just make sure you identify which disk your usb stick is and take a note of that. The one we are using
is /dev/disk2.
Now you need to unmount the usb disk, to do that issue the following command
diskutil unmountDisk /dev/disk2
Obviously if your USB stick is not disk2 then change it to suit. It should tell you that the unmount of all volumes on the disk were successful. Now all we have to do is copy the UDRW version of the iso image to your USB stick. For that, we will use trusty old dd :)
sudo dd if=ubuntu1510.iso.img of=/dev/rdisk2 bs=1m
The things you have to be aware of here:
1. Thisisafullydestructivecommand.Itwillblowupanydiskyoupointitto, that's why we made sure you got the note of that USB stick in diskutil list, above.
2. if=isshortforinputfile,meaningtheinputfileisthenameoftheisofileyou converted into the iso.img file. We are using the shortened filename here just for an example filename.
3. of=isshortforoutputfile.Theoutputfile,isinfactadevice.Inthiscase,we are using (r)disk2; disk2 obviously is the drive we noted earlier, we use the r in front of it because that allows raw device access, so its marginally quicker.
4. bs=1mmeansblocksize,1megabyte.Youdon'thavetousethisoption, however it will significantly increase the speed of the transfer to your USB stick.
Mac OS is going to bitch and moan that you have a volume it can't read inserted. If it says Eject, click that, otherwise type diskutil eject /dev/disk2.
   
 Partitioning your hard drive
This part chops your disk up in the way you want it. Back in the bad old days of Linux, you used to have to download a partition manager and use that to resize your disk. These days, that's mainly gone, but because of Journaled, Encrypted HFS+ partitions, that's not a good idea to let a Linux based partition manager loose with, unless you want to toast your Mac OS data.
Using Disk Utility to resize your Mac OS X hard drive partition for Linux
Thankfully, this can easily be solved. In your Utilities apps folder, you'll find Disk Utility. If you like, quickly scan your hard drive for errors, just to make sure it's all toot sweet before we get down to business. Repair any errors you may have.
Once you are ready, you will see a list of internal drives on the left hand side. Your Disk Utility may look different if you are using an older version of OS X, but it still offers the ability to resize a volume.
On the hard drive that your Mac OS X partition exists on, click on the top drive, not any subsequent partitions listed below it. Click on the 'partition' button, and you'll see a pie chart like the one above (don't worry if it's not quite like that). You will see you can move the slider around the pie to resize your partition(s). Pull the size slider back for the Mac OS partition to release the free space on the disk. Make a blank partition until you have enough space for your new Linux system. As much space as you are willing to.
Apply the changes and let the resize operation complete. If you have an SSD, this should be relatively quick (a few minutes).
Installing Linux
Woo-hoo! This is the fun part! Now we get to install the operating system that your mac has been longing for!
Switch your mac off completely. Connect your Ethernet to Thunderbolt adapter
 
 and your USB drive we made earlier. If you don't have one of those thunderbolt adapters, life is going to be tricky for you, you are going to have to download the wireless drivers and install them manually to get things working. If you don't have one of the adapters, ask a friend for one, or buy one cheap from Ebay or such like. It will save your sanity.
Turn on your computer and hold down the option/alt key. You'll see a menu pop up which you can see your Macintosh HD as well as the USB stick (it's a yellow looking drive thing). It will be named EFI or something similar. Use the cursor keys to select that and hit return. PS: if you are having issues with your bluetooth keyboard at this point, make sure you revert to using your laptop's keyboard and mouse for the time being.
At the step where you have to choose the partition and you are using the Ubuntu style installer, select 'Something else' from the options around partitioning. Locate the empty partition you made and create 2 partitions out of it. Make a big partition and a small partition (roughly 8-16 GB in size). The big partition should be the remainder of the free space. The big partition should be ext4 in type, and should be formatted with the mount point of "/". The small partition should be formatted as swap.
Press next and let the good times roll. Everything else should be pretty normal.
Once the install has finished, restart the computer, no need to hold down alt/option this time. All going well, you should be seeing the rEFInd menu. Use the cursor key to select your Linux installation and hit that return key. Fingers crossed, your system will start up without much of a hitch!
Notably though, you probably won't have a few things that work out of the box. Most of these can be covered off on the next section.
Finishing up and nice to have items.
Wifi.
Some lucky people will experience that their WiFi works straight out of the box. For most of us, we are going to need to install it. You can do this with:
  sudo apt-get install firmware-linux-nonfree broadcom-sta-
 dkms
The broadcom wl, bcwl43 and fwcutter software should all be installed. Reboot to

 enable the puppy and all should be good when you select your wifi from your system's networking setup menu.
Graphics.
The graphics display should generally work out of the box, however there may be 'interesting' graphical issues. Not all of these might be fixable, but give the NVidia drivers a try, and if you still don't have any luck, read the many forums until you get a solution that works for you.
sudo apt-get install nvidia-driver xserver-xorg-video-intel
Note if you are not using xorg, you'll need to make the appropriate changes here. Maybe best to stick with xorg for now!
Screen backlight.
This is a /bit/ of a hack, but it works!
Check out Jessie's blog for the screen-backlight script. The screen backlight section is near the bottom of the blog article.
Keyboard backlight.
Again, Jessie Frazelle to the rescue here. The section below the screen-backlight
section has a keyboard backlight bit too! Mounting your MacOS X partition.
Okay cokey. Now here's the thing. Apple can be real pains in the asses some times. It is quite likely that you have what's called CoreStorage, if you have anything OS X 10.10 or newer. This provides an encrypted, journaled file system; even if you haven't installed FileVault2 (if you have, turn that off!).
To give full read/write access to your Mac OS X partition from Linux, you will need to revert it back to standard HFS+. To do this, you can pretty much enter one simple non-destructive command.
First up, at the terminal, issue the command diskutil cs list. You will see something like the below. If you know LVM in Linux, this is pretty much the same thing. Your main Mac OS X partition (Logical Volume) should be in Apple_HFS format.
     
   As long as the 'Revertible' flag is set to Yes, you are good to go. Simply enter the following command:
diskutil coreStorage revert
The long string of stuff is that big long alphanumeric string of text highlighted in the red box, you want to use copy and paste it to make sure you don't make a mistake!
The conversion took ages for us, however your mileage may vary, depending upon how much data is on your drive, and how fast your drive is. If you type diskutil cs list again, you'll see how much % of the conversion has been accomplished. Don't reboot your machine until that's over and done with, but after then, you can safely mount your OS X partition with full read/write access.
  First, make sure that you have hfsprogs installed. Example installation command:
sudo apt-get install hfsprogs
Next, mount or remount the HFS+ drive; commands need to be as follows:
 
  Okay, that about wraps it up for this ditty, I hope it has worked for you. If it hasn't, or you have some feedback to offer, we would love to hear it! Drop it in the comments, y'all :)
 or
 sudo mount -t hfsplus -o remount,force,rw
 /mount/point
sudo mount -t hfsplus -o force,rw /dev/sdXY
/media/mntpoint
 
 SysAdmin Tips
The following pages have been selected from the website as an example of the more advanced topics that would be suitable for a Linux user who is growing their knowledge towards working with Linux as a career.
Check out all of the tips on the website
   
 Command Line Interface
What's a Terminal/Console/Command Line/CLI?
In some parts of this site, you may see references to using the Console, Terminal or CLI. What this means is that you are required to use a text-mode command system, rather than a graphical command system to perform actions. In most Linux systems, the command line interface can be accessed by looking in your Applications menu and searching for 'Terminal'. Other apps such as Xterm, Rxvt, Konsole and others exist, but they all generally do the same thing.
So, why should I use a CLI?
Commands used to be the way that all computers were operated. Since the beginning of keyboards and monitors, computers required users to provide text based instructions to do things like work on files or use applications. A command interface is often abbreviated to CLI (Command Line Interface or Interpreter). The commands you give are usually entered using a piece of software called a Terminal or Console. This software is usually a small tool such as the Gnome Terminal, xterm, rxvt or the Linux Console which traditionally runs the Bash (Bourne Again Shell) in Linux. The commands you give to the bash shell are interpreted to provide outcomes, for example the command 'chmod u=rwx file.txt' without the parenthesis would change the ownership permissions of the file called file.txt to be readable, writable and executable by the owner of the file (user).
Today of course, most computers are synonymous with the use of a Graphical User Interface or GUI, which uses Windows, Icons, Menus and Mouse pointers (WIMP) to operate the computer rather than commands, however many systems administrators and power users in both Windows and Linux worlds still prefer to use a command line interface to quickly perform actions. It's a great time saver once mastered!
  
 The Gnome Terminal Application can be found under the Applications > Accessories menu in the Debian Desktop.
If you want to know about some of the commands which you can type in at the Terminal, check out the commands tutorial.
 
 Files, Directories and the Linux Filing System
Tell me about /usr, /dev, /etc, /home and friends
You may have wondered what goes where on your Linux system, and what all of the directories or folders in the / (root) folder on your system are doing. This table lists a typical root partition on a standard Linux system. Yours may differ slightly, but the main ones (/bin, /usr, /lib, /var and /etc will always exist).
  Folder Name
   Contents
   /bin
  The rudimentary minimum set of Linux programs are held here. These programs are essential to the operation of your Linux system. It's like a system folder, except it only holds binary programs (as the name /bin suggests). Don't delete anything in here or your system will most likely become broken!
    /usr
 /usr is a place where binary programs are installed into. It is also where your kernel source is held. There are various folders within /usr, such
as bin (where installed software goes), src (your Linux Kernel source is here), X11R6 or X11, (The X Window system is here), share (things like icons and pictures, wallpapers and fonts are held here -- so that they are shared between your systems users), doc (where the programs on your system hold their documentation or manuals), lib (where all the libraries, such as Qt or an OpenGL driver would be held) , etc (global configurations for installed software) and finally local (local binaries and programs to your system are located here, just another place for bin really).
  /dev
  Large directory which holds files that link to real hardware devices attached to your system, ie: /dev/fd0 is the file for the first floppy disk drive (fd) on your PC. /dev/scd1 is the second SCSI cdrom drive attached to your PC and /dev/ttyS0 is the equivalent of COM1 in DOS. Due to this handy architecture, you can point the output of textfiles or running
  
   programs straight to a hardware device, without actually knowing how the hardware works. The kernel knows that. Ie, doing a cat /home/my_modem_at_instructions.txt > /dev/ttyS0 would send the contents of the file my_modem_at_instructions.txt to the modem on COM1 (or ttyS0).
An important directory that you should try not too much to fool with (although some times, you've gotta go there to change things). This directory can be basically described as a configuration directory for system-wide applications and resources. For example, the file /etc/lilo.conf holds the configuration for the LInuxLOader program -- it boots Linux from your hard drive for you. If you edit this file, this will allow you to change the way that your system boots. The file /etc/X11/XF86Config holds the basic configuration for the X server. Don't delete this folder. Your system will crumble!
Note: individual users program profiles are stored in their home directories, ie: a single users profile for the bash shell is stored in ~/.bashrc (a file with a dot infront of it is a hidden file btw).
      /etc
   /home
  This is where all users home directories should be. For example, if your username is jdoe then you will probably have a home directory called /home/jdoe or /home/users/jdoe. All of jdoe's personal files (excluding applications generally), profiles and directories will be stored in here.
   /root
  The root user's (system administrator) home directory. Root and ONLY root should be able to access this folder.
  /lib
   Where standard system libraries are stored, such as the pam (Pluggable Authentication Module) library.
    /mnt
On a UNIX system, all drives are mounted before and after use, instead of just being A:, C: and D:. This means that a drive can just be part of your filesystem (as a directory). Most of the time, people like to put their mounted drives (such as a CDROM or Floppy) in the /mnt (short for mount) folder. Typically, you might have the following folders within a /mnt directory: cdrom, floppy, cdrw and possibly a windows drive: win_c. Whatever you have in the /mnt directory, you will find that the file /etc/fstab (file system table) has an entry relating the /mnt directory to the physical drive. Ie: /mnt/cdrom usually points to /dev/cdrom in the fstab, and /mnt/floppy usually points to /dev/fd0.
  /proc
  If you have a good look at the proc folder, you will find that it's not actually a real folder at all, it's a virtual folder - it's 0 bytes big. Inside /proc, you will find handles for various devices and also, some informative files such as
    
    Keeping your files nice and tidy
It's important that you keep your files tidy on your Linux system, mainly because you'll find them easier, but also because you want to keep your system secure. Place all of your own personal files in your own folder, and make sure that the permissions are set that only you can access them. For example, if you have lots of documents, consider making a folder in your home directory called docs. In docs you can put all of your documents.
Making folders
To make a folder, you can usually enter your file manager in Gnome or KDE
and right click on a white space in the folder that you want to create the folder, then select Create Directory or New Folder.
However, to do it at the terminal, change to the directory that you want to make the folder in (cd /name_of_folder_you_want_to/go_to). Then type:
  meminfo (if you type cat /proc/meminfo it will tell you how much memory you have and are using). /proc/pci holds all the information about your PCI bus and cards attached to it. Have a look, you can't edit any of these files.
   /tmp
   Temporary files usually created by running software are held here, sometimes these are called sockets.
   /sbin
  Where system programs are placed. Much like /usr/local/bin and /usr/bin, however, these binaries are usually ran as root,
for system maintenance reasons. For example, RedHat/Fedora systems store the ifconfig tool here (which will allow you to alter network settings)
    /var
 Holds files that are generally server oriented, such as mail spools (where mail is held for a user until they pick it up). Lock files are held in /var/run. These files stop multiple instances of one program running by one user if necessary. Red Hat 7 and above also puts the web server in this directory, although Apache's default directory is /usr/local/apache.
   /lost+found
  Damaged data that has been found on a drive when e2fsck (equivalent of a Scandisk in Windows) runs is put in this folder for personal examination by root.
  /opt
  Placed on your system generally when KDE is installed. Some KDE and Qt Based programs like to install themselves in the folder /opt/kde/bin for some reason.
  
 mkdir new_folder
Operating on files: Executing (running), copying, moving, renaming and deleting files
Binary Execution
To execute a binary program, at the terminal, you can do the following:
/folder_of_program/name_of_binary_file
So, if I wanted to execute the file myscript.pl in the current directory, I could issue:
./myscript.pl
Some programs such as LokiGames software (www.lokigames.com),
Sun's StarOffice and Corel's WordPerfect Office have their own dedicated binary installers. Most of the time, these sort of binary installers are initially executed from the terminal, by using the example above.
Copying files
To copy a file at the terminal, the cp command is used, with the following syntax:
cp source_dir/source.file destination_dir/destination.file
For example, I want to copy myfile.pl from the current directory to /home/bob/perl:
cp myfile.pl /home/bob/perl Moving files
To move files at the terminal, the format is very similar to the cp command. The move command is mv.
Here is the standard syntax:
mv /source_dir/source.file dest_dir/source.file
So, as a typical example:
mv myscript.pl /home/bob
   Note that sometimes installer packages come without permission to execute (run), so you will need to provide it permission, try chmod 755 before you run the program.
 
 The mv command has many other arguments (options you can pass to it at run time), such as -R, lets investigate the -R switch:
mv /home/jane/docs/* /home/bob/docs -R
This would copy the entire contents of the folder /home/jane/docs (because we gave it the wildcard *), to the folder /home/bob/docs. Additionaly, as we passed the -R argument, if there were any further directories inside /home/jane/docs (ie: folders called CV, letters and notes could exist inside the docs folder), the -R argument moves the CV, letters and notes folders as well as the docs folder.
Renaming files
Unlike DOS, which had a seperate command to rename files with (ren), Unix simply uses the move (mv) command to do it. Take this example:
mv oldname newname
That would rename the file the file in the current directory called oldname to newname.
Deleting files
Deleting files can be done simply with the rm command. Deletion of emtpy directories can be done with rmdir command. Here are some examples:
Deletion of a single file: rm myfile.txt
Deletion of every file in current directory:
rm *
Deletion of every file in current directory and all directories within it (recursive deletion):
rm * -Rvf
Note: if you want to delete a directory and all of it's contents in one swoop, instead of using rm *, then cd .., then rmdir dirname, you can simply do a rm dirname -Rvf.
Removal of an empty directory:
rmdir mydir
Security and files: Permissions and Ownership

 In Unix, all files have permissions. Enabling files to have permissions allows security over and above simple password protection to a system. Imagine the situation: You have a Linux server which is used for 5 people from your companies Research and Development department. The five people are:
bob jane mary mark simon
Consider for a moment that Bob wanted to keep his data (which is stored on the linux server over the network) private from jane, mary, mark and simon. Without the use of permissions, it would be impossible to do this. So for this reason we have the following permission system in Unix:
/home/bob bob users drwxr-xr-x
What you see above is an edited example of a directory listing on a unix system. You can achieve the same result as what you see above by using the ls command with the long listing function (ls -l). Consider that the above result was an abstract of the output of ls -l /home on the linux server.
The part that reads rwxr-xr-x is the permissions bit for the file (or directory).
The bit that says d, can also read -, s, l or c. - means normal file, s means sticky, l means symbolic link (like a shortcut, but but better) or c is a block device (you'll find these in the /dev folder). The d bit that is on the listing that we have is because the listing is of a directory.
So, from the above listing already we know that it is a directory, it has some permissions set, and that the directory is called bob and it is in the /home folder.
The Permissions for /home/bob
But what do the permissions rwxr-xr-x actually mean, I hear you cry?! Have a look at this:
      
 Figure 1: Explanation of permissions on a Linux system: UGO = Users, Groups, Others.
As you can see from the diagram, the first rwx is mapped to the owner of the file. This means that the owner (which is presumably bob), has read (r), write (w) and execution (x) access for that folder.
The second permission, r-x is mapped to the group of the directory. Not only can an induvidual user own a file, but a whole group (if desired) can access a file. This example illustrates that everyone in the group users can read the files in the directory, and that they can execute programs within it, or change into that directory.
The third permission, r-x, is for others (commonly referred to as world), which means everyone else. This is the most dangerous permission bit. Our example allows anyone on the server to be able (like the users group) to read anything within the bob directory, and execute files in the directory.
Ideally, what bob should really do, is set the following permissions, for total privacy:
/home/bob bob users drwx------
Using the chmod command to set permissions
When you want to change the permissions of a file, you can use the ch commands: chmod (which changes the rwx bits of a file), chown (which changes the owner of a file or directory) and chgrp (which changes the group which accesses a file or directory).
This part deals with chmod.
Imagine a file called cv.doc with the following permissions User: read, write, execute. Group: read. Others: none, ie:
cv.doc rwx/r--/---
Let's imagine that we wanted to change the permissions to: rwxrwx---, so user and group can read, write and execute the file cv.doc.
This command would let us change the desired permissions:
chmod ug=rwx,o= cv.doc
So, what we did there, is we ran the chmod command and told it to set
the 'user' and 'group' permissions to read, write and execute. We set
the 'other' (everyone else) permissions to nothing. Finally, we specified the file that we wanted to change the permissions for, cv.doc. Take this other example, as with Unix, there is always more than one way to do something:
chmod 0770 cv.doc

 You will notice the only difference to the above command is the 0770 against the ugo bit. The 0770 (or just 770 would do) means exactly the same thing as ug=rwx,o= . 0770 is the numerical representation for the permissions, octal is a base 8 number system, and the permissions of files are based on this. Ie:
1 = 2 = 4 =
execute only write only read only
You will notice, there are 8 (as in octet) combinations of numbers (0 through 7).
If you add 1, 2 and 4 together, you get 7, which is read, write and execute. By taking any combination of all of the numbers 1, 2 or 4, you get your desired permission that you require. For example, 1+2 = 3, and chmod 300 would give you write and execute permissions.
It really dosen't matter which way you choose to use chmod (either ie: u=rwx,g=rwx,o=rx) or (775), just use what you feel most comfortable with, although it is handy to know how each way works.
Using the chown command to set the owner of files
The syntax of the chown command is relatively simple:
chown bob mydoc.txt
changes the owner from whomever the current owner of mydoc.txt to bob. Note that only the person(s) with write permissions to this file can perform this action. Quick Tip: chown user.group will change the owner and group of the file
Using the chgrp command to set the group owner of files
As you saw in the previous hint, user.group will quickly change the group of a file or directory, and I personally prefer using chown user.group, but the original and proper way to change the group ownership of a file or a directory, can be done with the chgrp command, as follows:
chgrp users mydoc.txt
...which changes the group ownership of mydoc.txt to users.
Even further in the depths of network file management: NFS
Some of you will have a brief idea of what NFS is, and some of you will have never before heard of NFS, and because of this, I will describe NFS from the top. If you know completely what it is, and just want to know how to set it up, feel free to scroll down a bit until we get to the section 'Using NFS'.

 What Exactly is NFS?
NFS is a method that you can easily and very efficiently share files accross a network in a Unix environment. Almost all types of Unix support NFS, and although not natively, Windows NT can be told to read NFS volumes.
A distinct advantage that NFS takes over the 'Windows Shares' mechanism (the system used to share files in Windows), is that NFS does not require to assign a seperate drive on your computer for the use of shared files. Imagine the following scenario:
NFS file sharing, side by side Windows File Sharing (CIFS / SMB).
The image shows that directories of files or drives themselves, under Windows, must be exported to a drive letter (of which only a possible 24 are available). With Linux and Unix, you can export any directory or drive, and it can be viewed under any name on the client.
Imagine the scenario: You have the directory /shared/home on your server (let's call it alpha). You want your other client (desktop) machines, bravo and charlie to be able to see this folder, and everything inside it. Your two client systems are to have their home directories inside this share. You use NFS for this purpose. Percieve the users mary (In this example, Mary will use the Linux PC called bravo), and bob (uses the desktop charlie). Mary's current login directory on bravo is /home/mary, and bob's login directory on charlie is /home/bob. Both of these
 
 directories are local to bravo or charlie and cannot be seen on other machines. You make two folders inside /shared/home on Alpha, one called mary and one called bob.
You move everything inside mary on her computer (bravo) into her folder on alpha, and you do the same for bob.
You remove the /home directory and all it's contents on bravo and charlie -- as it's now redundant.
You then export the directory /shared/home to bravo and charlie (and call it /home)
The net result of all of this is that mary and bob (to them anyway, nothing has changed), but to the administrator of the network on alpha, all of the files are stored on the alpha server, and any files they now request from their home directories is now taken from the folder /shared/home on alpha.
Using NFS
Taking the three servers, alpha, beta and charlie a little further, this is a demonstration of how you can actually set it up:
nfsd.
Edit the file /etc/exports which is where all your exported volumes are listed. On alpha the format of the file would look like this:
/shared/home bravo (rw,no_root_squash) charlie (rw,no_root_squash)
This is what the above line means to you and I:
1) Take the directory /shared/home 2) Allow the computer bravo to read and write (rw) to it, and allow root to be treated as root over exported filesystems (no_root_squash)
3) Allow the computer charlie to read and write (rw) to it, and allow root to be treated as root over exported filesystems (no_root_squash)
Obviously, alpha must know, either by the file /etc/hosts or by using DNS / NIS how to resolve the hostnames bravo or charlie. If you don't think you can manage this at your current stage of Linux networking skills, then I recommend simply replacing the hostname (ie: bravo) with the IP address of that particular host (ie: 10.0.0.2).
NFS works on the basis of one of the rpc (Remote Procedure Call) tools called
All good Linux distributions should have rpc tools already with them (although they may be disabled in the sysv init startup), make sure this is installed and ready to go, and make sure that you have installed nfsd on the system that you wish to export your directories or drives (in our case, this is alpha).

 You may or may not know about the infamous /etc/fstab, but this file holds the key for configuring bravo and charlie with the information they need to see the 'share' that alpha has now been set up to provide.
If you investigate /etc/fstab, you will notice that it has all the points of where all your drives are mounted, and this file is read by Linux when it starts up, to mount each drive. NFS Volumes are no different from physical disks, they too get added to this list, assuming that you want the volume to be mounted every time you use the computer.
Adding this line the the /etc/fstab on bravo and charlie would then kick in the mounting of the nfs volume on boot each time:
alpha:/shared/home /home rsize=8192,wsize=8192
And in english:
1) Take the export or 'share' on the system alpha (/shared/home) (alpha:/shared/home).
2) Mount it on this computer (either bravo or charlie) as /home (ps: an empty directory with the name /home must exist to put this in). (/home)
3) Make the amount of retrieved bytes per block 8K / 8192 bytes (rsize=8192) 4) Make the amount of sent bytes ber block 8K / 8192 (wsize=8192)
Parts 3 and 4 of the statement are not necessary, but they help to improve efficiency over the network.
Also note that again, if you haven't set up an /etc/hosts.txt or DNS to resolve the name alpha, use it's IP address in the place of the 'alpha:', to read something like '10.0.0.1:'.
Once you are sure that nfsd is running correctly, you can do this by typing ps ax | grep "nfsd" at the shell If you get a process called nfsd appearing (don't confuse this with grep nfsd, which is what you just typed), then you know that nfsd is running, and it sounds like it's configured correctly.
Now all you need to do is either start nfs manually on alpha, or reboot it, so that the startup script brings it up. You could reboot bravo and charlie, but preferrably, just typing 'mount -a' at the root prompt on both of the systems is enough for Linux to re-read it's /etc/fstab file and cotton on to the fact that it has a new entry. If you get any errors when it re-reads this configuration, make sure to double check all of your settings.
Further Reading
The Linux Documentation Project should have the definitive guide to using NFS,

 although it's possibly not too newbie-friendly.
Typing man nfsd, man exports and man fstab will all help you, and mainly man exports.
 
 How to Mount Windows or Samba Shares Permanently
This howto describes how to mount Windows CIFS (SMB) shares permanently. The shares might be hosted on a Windows computer/server, or on a Linux/UNIX server running Samba. This document also applies to SMBFS shares, which are similar to CIFS but are deprecated and should be avoided if possible (link).
This attribution is based on the original Ubuntu document ( link), written by Contributors to the Ubuntu documentation wiki.
(This document does not describe how to host the shares yourself, only how to access shares that are hosted somewhere else. For hosting shares, use Samba.)
Prerequisites
We're assuming that:
Network connections have been configured properly. Your local username is ubuntuusername.
Share username on Windows computer is msusername. Share password on Windows computer is mspassword.
The Windows computer's name is servername (this can be either an IP address or an assigned name).
The name of the share is sharename.
You want to mount the share in /media/windowsshare.
CIFS installation
        
   On older systems:
 sudo apt-get install smbfs
Mounting unprotected (guest) network folders
First, let's create the mount directory. You will need a separate directory for each mount.
sudo mkdir /media/windowsshare
Then edit your /etc/fstab file (with root privileges) to add this line:
Where;
guest indicates you don't need a password to access the share,
uid=1000 makes the Linux user specified by the id the owner of the mounted share, allowing them to rename files,
iocharset=utf8 allows access to files with names in non-English languages. This doesn't work with shares of devices like the Buffalo Tera Station, or Windows machines that export their shares using ISO8895-15.
If there is any space in the server path, you need to replace it by \040, for example //servername/My\040Documents
After you add the entry to /etc/fstab type:
sudo mount -a
This will (re)mount all entries listed in /etc/fstab.
Mount password protected
  //servername/sharename /media/windowsshare cifs guest,uid=1000,iocharset=utf8 0 0
     sudo apt-get install cifs-utils

 network folders
The quickest way to auto-mounting a password-protected share is to edit /etc/fstab (with root privileges), to add this line:
This is not a good idea however: /etc/fstab is readable by everyone and so is your Windows password in it. The way around this is to use a credentials file. This is a file that contains just the username and password.
Using a text editor, create a file for your remote servers logon credential:
gedit ~/.smbcredentials
Enter your Windows username and password in the file:
Save the file, exit the editor.
Change the permissions of the file to prevent unwanted access to your credentials:
chmod 600 ~/.smbcredentials
Then edit your /etc/fstab file (with root privileges) to add this line (replacing the insecure line in the example above, if you added it):
Save the file, exit the editor.
Finally, test the fstab entry by issuing:
sudo mount -a
If there are no errors, you should test how it works after a reboot. Your remote share should mount automatically.
 //servername/sharename /media/windowsshare cifs username=msusername,password=mspassword,iocharset=utf8,sec= ntlm 0 0
  username=msusername password=mspassword
  //servername/sharename /media/windowsshare cifs credentials=/home/ubuntuusername/.smbcredentials,iocharset= utf8,sec=ntlm 0 0
 
  Special permissions
If you need special permission (like chmod etc.), you'll need to add a uid (short for 'user id') or gid (for 'group id') parameter to the share's mount options.
Troubleshooting
Login errors
If you get the error "mount error(13) permission denied", then the server denied your access. Here are the first things to check:
Are you using a valid username and password? Does that account really have access to this folder?
Do you have whitespace in your credentials file? It should be password=mspassword, not password = mspassword.
Do you need a domain? For example, if you are told that your username is SALES\sally, then actually your username is sally and your domain is SALES. The fstab entry should read: ...username=sally,password=pass,domain=SALES,... Or: ...credentials=/path/to/file,domain=SALES,...
Is the security setting correct? The most common is sec=ntlm, but you can also try the other options listed at the mount.cifs man page. The man page list leaves out the option sec=lanman for some reason, but you should try that one as well (see discussion).
Unprotected network folder won't automount
I've had a situation where an unprotected network folder wouldn't automount during bootup, but after manually entering "sudo mount -a" was mounted correctly. I solved this by replacing the "guest" option by "username=guest,password=". If anyone has an explanation for this, please leave a comment.
 //servername/sharename /media/windowsshare cifs uid=ubuntuuser,credentials=/home/ubuntuuser/.smbcredentials ,iocharset=utf8,sec=ntlm 0 0
     //servername/sharename /media/windowsshare smbfs username=guest,password=,uid=1000,iocharset=utf8,codepage=u

  Mount during login instead of boot
If for some reason/etc/rc0.d/S31umountnfs.sh (networking problems for example) the automatic mounting during boot doesn't work, you can add the "noauto" parameter to your smbfs fstab entry and then have the share mounted at login.
In /etc/fstab:
In /etc/rc.local:
Slow shutdown due to a CIFS/Network Manager bug
If you use Network Manager, and are getting really slow shutdowns, it's probably because NM shuts down before unmounting the network shares. That will cause CIFS to hang and wait for 60 seconds or so. Here's how to fix it:/etc/rc0.d/S31umountnfs.sh
Ubuntu 12.04 already runs umountnfs.sh at reboot and shutdown by default (/etc/rc0.d/S31umountnfs.sh and /etc/rc6.d/S31umountnfs.sh) so this is no longer necessary.
 //servername/sharename /media/windowsshare cifs noauto,credentials=/home/ubuntuusername/.smbpasswd 0 0
 mount /media/windowsshare exit 0
 sudo ln -s /etc/init.d/umountnfs.sh /etc/rc0.d/K14umountnfs.sh
sudo ln -s /etc/init.d/umountnfs.sh /etc/rc6.d/K14umountnfs.sh
 CIFS Options Deprecated
 nicode,unicode  0  0

  20 Feb 2008 TW
Using dmask or fmask in the fstab file produces the following warnings: WARNING: CIFS mount option 'dmask' is deprecated. Use 'dir_mode' instead. WARNING: CIFS mount option 'fmask' is deprecated. Use 'file_mode' instead.
Instead use this format: file_mode=0777,dir_mode=0777 . Or in some cases you might need to use file_mode=0777,dir_mode=0777,nounix (see discussion)
Use of tilde in pathnames such as "credentials=~/.smbcredentials"
20 Feb 2008 TW
Curiously, using credentials=~/.smbcredentials in fstab didn't work. I had to use the full path, i.e. /home/username/.smbcredentials
(Thisislikelybecausethetilde"~"isonlyashellshort-handaliasfor "$HOME";it isn't something recognized system-wide by all programs, especially not in a system file table where the concept of "HOME" doesn't really exist. -Ian!)
Historic Items (older versions of Ubuntu)
Mount password protected shares using libpam_mount (Ubuntu 9.04)
In addition to the initial assumptions, we're assuming that
Your username and password are the same on the Ubuntu machine and on the network drive.
Install libpam-mount:
sudo apt-get install libpam-mount
Edit /etc/security/pam_mount.conf.xml using your preferred text editor.
    gksudo gedit /etc/security/pam_mount.conf.xml

  First, we're moving the user specific config bits to a file which users can actually edit themselves: remove the commenting tags (<!-- and -->) surrounding the section called <luserconf name=".pam_mount.conf.xml" />. Save the file when done. With this in place, users can create their own ~/.pam_mount.conf.xml.
gedit ~/.pam_mount.conf.xml
Add the following:
  <?xml version="1.0" encoding="utf-8" ?> <pam_mount>
<volume options="uid=%(USER),gid=100,dmask=0700" user="*" mountpoint="/media/windowsshare" path="sharename" server="servername" fstype="cifs" />
</pam_mount>
 The material on this post is available under a free license, see Copyright / License for details.
 
 Disable logging in with the root account
Say you got a new server set up on a VPS system, such as DigitalOcean. These servers often are set up with a root account and not a non-privileged account by default. We all know this is a _bad_ thing, so once you have created a user that you'd like to make the admin user, who has sudo access, you can disable the ability to log in as root by issuing:
 sudo passwd -l root
Note that this does not disable the account, merely disables logging in directly. You can always become root by issuing sudo -s to obtain a root shell :)
  
 Quick tip: Add a user to the sudoers group
Situation: A new user on your server needs to have admin, or 'root' user access. Rather than enabling the root account, or giving out the password details to your elevated account, add the new user to the sudoers group, and hey presto - they will get sudo access with their own account and password:
 usermod -aG sudo <username_of_person_you_want_to_give_root_to>
 
 Adding users to groups
If you have a look at the /etc/groups file, you'll see a list of all the user groups on your Linux server (or desktop).
But first off..
What are groups?
Let's imagine that you are the user 'testuser'. By default, when you add a user on a Linux system, unless you choose otherwise when you create it, the user will be created in a group of his/her own. This group would also be called 'testuser'. This group contains exactly one user: testuser. Great.
However, groups allow you and other users of the same system to share permissions: access to documents, programs and more. For example, if you testuser was suddenly added to a group called 'admins', and that admins group had access to many files in otherwise confidential areas of the Linux system (for example, configuration files in the /etc folder), then 'testuser' would now also be able to access these files also.
Here's an excerpt from a typical directory layout (using the command ls -l):
-rw-r----- 1 syslog adm 5740 Jul 4 23:06 auth.log
The above file belongs to the user 'syslog', and also the group called 'adm'. The permissions of the file allow the user 'syslog' to read and write to the file (rw-), the group 'adm' can read the file only (r--), and everyone else, can't do anything to the file (---). If we added our fictitious users 'testuser' to the group 'adm', then they would be able to read this file.
How do I create a New Group?
To add a new group, all you need to do is use the groupadd command like so:
  groupadd <groupname>
 
 Add an Existing User to a Group
Next we’ll add the user 'testuser' to the group 'adm':
usermod -a -G adm testuser
Change a User’s Primary Group
If you want to switch the primary group that a user is assigned to, use the usermod command with the lower case g switch:
usermod -g <groupname> username
View the Group Assignments of a User
If you want to view which groups a user is a member of, you can use the id command. It shows you the uid (user ID number), the username, the gid (the group ID number), the group name, and the gid and group names of any additional groups the user may be part of. You may also specify someone elses username to view their details.
How to look at all the groups on a system and edit specific details (advanced).
If you are willing to get your hands dirty (and yes, this means you could severely break things), then you can run the vigr command, which allows you to edit the groups file (you need to be root).
$ vigr
you can manually change the group names, gids and user memberships of any groups within the text editor.
Add a New User and Assign a Group in One
   $ id
uid=1000(testuser) gid=1000(testuser) groups=1000(testuser), 4(adm)
 
 Command
Sometimes you might need to add a new user that has access to a particular resource or directory, like adding a new FTP user. You can do so with the useradd command, using the -G flag:
For example, to create a brand new user named 'testuser2' to the postfix group, you'd issue the following command:
useradd -G postfix testuser2
Don't forget to assign a password for that user:
 passwd testuser2
Add a User to Multiple Groups
You can add a user to more than one group by specifying them in a comma- delimited list:
usermod -a -G postfix,adm,othergroup testuser2
Finally, Have a look at the adduser and addgroup commands also. Adduser makes it easy to interactively make new users without worrying about remembering the flags.
    
 How To Set Up SSH Keys
About SSH Keys
SSH keys provide a more secure way of logging into a virtual private server with SSH than using a password alone. While a password can eventually be cracked with a brute force attack, SSH keys are nearly impossible to decipher by brute force alone. Generating a key pair provides you with two long string of characters: a public and a private key. You can place the public key on any server, and then unlock it by connecting to it with a client that already has the private key. When the two match up, the system unlocks without the need for a password. You can increase security even more by protecting the private key with a passphrase.
This guide was mainly written by the folks at DigitalOcean. Check out their great, cost competitive server options over at digitalocean.com
Step One—Create the RSA Key Pair
The first step is to create the key pair on the client machine (there is a good chance that this will just be your computer):
 ssh-keygen -t rsa
Step Two—Store the Keys and Passphrase
Once you have entered the Gen Key command, you will get a few more questions:
You can press enter here, saving the file to the user home (in this case, my example user is called demo).
  Enter file in which to save the key (/home/demo/.ssh/id_rsa):
 Enter passphrase (empty for no passphrase):
 
 It's up to you whether you want to use a passphrase. Entering a passphrase does have its benefits: the security of a key, no matter how encrypted, still depends on the fact that it is not visible to anyone else. Should a passphrase-protected private key fall into an unauthorized users possession, they will be unable to log in to its associated accounts until they figure out the passphrase, buying the hacked user some extra time. The only downside, of course, to having a passphrase, is then having to type it in each time you use the Key Pair.
The entire key generation process looks like this:
 ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/demo/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/demo/.ssh/id_rsa.
Your public key has been saved in /home/demo/.ssh/id_rsa.pub.
The key fingerprint is: 4a:dd:0a:c6:35:4e:3f:ed:27:38:8c:74:44:4d:93:67 demo@a
The key's randomart +------+
| .oo.| | . o.E | |+.o| |.==.| |=S=.| |o+=+| | .o+o. | |.o| || +-----------------+
image is:
The public key is now located in /home/demo/.ssh/id_rsa.pub The private key (identification) is now located in /home/demo/.ssh/id_rsa
Step Three—Copy the Public Key
Once the key pair is generated, it's time to place the public key on the virtual

 server that we want to use.
You can copy the public key into the new machine's authorized_keys file with the ssh-copy-id command. Make sure to replace the example username and IP address below.
ssh-copy-id user@123.45.56.78
Alternatively, you can paste in the keys using SSH:
No matter which command you chose, you should see something like:
  cat ~/.ssh/id_rsa.pub | ssh user@123.45.56.78 "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"
 The authenticity of host '12.34.56.78 (12.34.56.78)' can't be established.
RSA key fingerprint is b1:2d:33:67:ce:35:4d:5f:f3:a8:cd:c0:c4:48:86:12.
Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added '12.34.56.78' (RSA) to the list of known hosts.
user@12.34.56.78's password:
Now try logging into the machine, with "ssh 'user@12.34.56.78'", and check in:
~/.ssh/authorized_keys
to make sure we haven't added extra keys that you weren't expecting.
Now you can go ahead and log into user@12.34.56.78 and you will not be prompted for a password. However, if you set a passphrase, you will be asked to enter the passphrase at that time (and whenever else you log in in the future).
Optional Step Four—Disable the Password for Root Login
Once you have copied your SSH keys unto your server and ensured that you can log in with the SSH keys alone, you can go ahead and restrict the root login to only be permitted via SSH keys.

 In order to do this, open up the SSH config file:
 sudo nano /etc/ssh/sshd_config
 Within that file, find the line that includes
ensure that users can only connect with their SSH key:
PermitRootLogin without-password
Put the changes into effect:
service openssh-server restart
and modify it to
PermitRootLogin
   
 SysAdmin Tips: ViM Text Editor 101 Guide
The ViM text editor, Vi Improved, has been around for a very, very long time. However, it remains arguably the most popular text editor amongst Unix users young and old due to it's speed, ability to adapt to almost any purpose, and the fact that it will be found on any Unix/Linux box anywhere. You can't say that for nano or even emacs.
Suffice it to say, learning how to the ViM a text editor effectively will make your life better, even if at first it drives you crazy.
The following slide deck is a takeaway and print off guide to using ViM effectively, and starts you off from zero knowledge.
ViM 101 Essentials Guide
  
 What is Docker (and Linux containers?)
A while ago, around the release of the Linux kernel version 3, the concept of namespaces and containerization was introduced through a module called lxc (Linux containers).
The idea behind a container is sort of similar to the idea of a virtual machine. For example, with virtualisation, you have a server (the 'host' ) running something like KVM or VMware. The machines running under it are called guests. They are fully self-contained computers, running on top of the host.
Containers take this concept to the next level. Containers help developers especially (but also systems administrators) deploy applications or services rapidly. Containers are very, small Linux machines that run as a normal Linux process (in userspace). An average Linux server is gigabytes in size, and has a kernel choc-full of handy drivers for all sorts of hardware and so forth. A container, conversely is only a few hundred megabytes in size. A VM will boot in minutes, a container will start up, including its intended application, in a few seconds or less. It runs just as you'd expect any normal Linux application to run - as a process you can see using the ps command.
The below diagram from the folks at CoreOS shows the relation between containers and the Operating System well. On the top, you can see a normal Linux server, running all of the usual services you might imagine, such as Java, the nginx web server etc, there will also likely be a few other applications running too.
In the Figure 2, you can see an example of an Operating System that is geared towards containerisation. It has only limited, minimal applications, such as the ssh server running. All of the other applications are now running within completely isolated containers.
 
   Figure 1: A traditional Linux server, running all of the usual services as well as the provided applications, all within the same stack, depending upon the server's shared software libraries.
Figure 2: A minimal Linux distro, with all served applications running in discrete containers.
Ephemeral Beings
Containers are ideally made to be single purpose in nature: imagine you have an application that uses JBoss and PostgreSQL. You'd likely have a container for both JBoss and PostgreSQL components. The two containers are isolated from each other, but it is possible for them to be linked, so they can talk to each other. Containers are also designed to be ephemeral: once it's purpose has been served, you blow it away, you can always spin up another one in seconds. This also means that data stored inside a container is not persistent. If you want data, such as databases or web sites to remain, you can put them in an exported storage volume on the host server. In security best practice, you would update your base-image with any new patches or security hardening procedures, and then roll on your application. After this, you'd destroy your container from last week, and use the new, securer container the next week.
  Containers fit great with the whole SaaS (software as a service model), and it's also enabling developers and operations staff to work together

 Docker
Docker has been around for a while now. Docker took to Linux what lxc could not: ease of use. Once developers found out how empowering it was just to spin up a docker container on their laptop and be guaranteed it would operate in exactly the same way on a server somewhere else, with the greatest of ease, it quickly became a no-brainer.
Docker has its critics, some (like the coreOS team) believe that Docker isn't secure enough, and they are becoming too commercialised (that's why they made rkt as a competitor to Docker), but love it or hate it, Docker has a huge following, and not just in companies you'd expect, like Amazon and Google.
More Reading
You can read more about containerisation, over at the following websites:
LinuxContainers.org
Docker: What is Docker?
Amazon AWS: What are Containers? Rkt (pronounced Rocket), from CoreOS
 in a friendlier way (read DevOps way). But let's not get ahead of ourselves here, tooling isn't going to fix cultural problems, that's a whole 'nother topic for another website!

 running a command against every line in a textfile
So, you have a text file like so:
And you want to run a command on each line of the file (say, chmod 644). Like all things UNIX, there are more than one way to do thing, but here's the quick and dirty answer:
xargs -0 -n 1 chmod 644 < <(tr \\n \\0 <filelist.txt)
So, this will run xargs on the std. input (filelist.txt).
-n is max arguments - in this case we have 1 arg. (the list of files in the file - per line).
-0 means that input lines are terminated by a null char, not a whitespace, to keep things tidy.
Finally, we run tr which deletes characters, in this case removing the newlines and whitespace.
 file1
file2
..
  
 Monitoring network bandwidth, CPU and memory effectively
Here is a bunch of handy tips for today that will likely remain in your armoury forever.
As a Linux sysadmin it's sometimes difficult to visualise just what is causing a performance problem. Sure, it's easy enough to see which process is hogging the CPU with tools like 'top' or its fancier brother, htop. When it comes to figuring out the long term load on a machine or understanding how much memory and network bandwidth is being used can be a little more of a challenge if you aren't aware of the tools out there.
CPU & memory monitoring with (h)top
Use the F6 button in htop to sort by CPU or memory etc.
 htop real time cpu analyser
 
 Analysing CPU, Memory and Disk I/O over a measured time
To analyse the average CPU, memory and disk I/O load over a measured amount of time, use the vmstat tool. It is ugly looking in comparison to htop but once you understand the display it can be highly effective in understanding what's going on with the system except network utilisation. Note as well that virtualised guest servers might not give the true CPU & I/O figures as these can vary dynamically based on the hypervisor settings.
Like top, vmstat is almost ubiquitous in availability for each Linux version. Vmstat normally takes two arguments: the sample time and the number of samples to measure. So for example running
Will make a sample each second and will perform the sample 100 times. By default vmstat will show you the output of the CPU load, memory/swap and block I/O, when it runs its 100 samples, it will give you the averages over the time samples for, in this case 100 seconds. If you wish to run vmstat continuously use 0 as the sample number. More information on the syntax and output of vmstat is available here (or use man vmstat).
Finally as an text based alternative you can brew this function in your .bashrc or in a shell script, this will allow you to execute it at intervals using the at command or schedule with cron or perhaps combine it with another script to make further analysis over time.
 vmstat 1 100
 memcpu() echo "--- Top 10 cpu eating process ---"; ps auxf | sort -nr -k 3 | head -10;
echo "--- Top 10 memory eating process ---"; ps auxf | sort -nr -k 4 | head -10;
Analysing network utilisation quickly

 Monitoring network utilisation is arguably as important as your CPU and memory. The amount of built in tools that do this vary between distributions. There is a multitude of tools you can install via yum or apt-get in the respective distributions. You can try ntop or nmon. Today we are going to look at nload. Although ntop touts itself as the 'top' command of networking, it's a web based tool which whilst good, isn't as simple to get going as nload. To execute nload simply run it without any arguments and it will output the load on the current network interface.
 nload at work
Nload does just what it says on the tin. The historic analysis makes it easy to see how busy the network is, unfortunately that won't show you what application is causing the load but there are apps which can help there too like the excellent nethogs app. It looks and works just like top- showing processes by name and sorted by order of which process is chewing the most bandwidth.

  nethogs at work
In conclusion and further options
What I've demonstrated here are some great, quick analysis tools to get you out of a potentially difficult to diagnose issue. If you need longer term analysis of almost any aspect measurable then you should look to something like nagios and combine it with rrdtool to graph historical trend analysis. Look at cacti (rrd graphing) and munin (sort of like nagios + rrdtool + cacti in one easy package).
 
 How to tar (compress) files up, excluding certain files or directories
If you've ever been making a backup of an entire Linux system, or maybe just a number of folders but there were certain folders or files that you didn't want to have in the backup or zip file, then Look no further than this Quick Tip!
First, change to the folder you want to zip, or back up and make sure you have permissions to access all of the files within the folder. For example, if the folder is / (root) then you will need superuser permissions so don't forget to run tar with the sudo command!
cd /folder_to_backup<br />
Next, you want to run the tar command to create the archive/zip file. The usual z (gzip compression), c (create), v (verbose), f (file) flags are used, but note that they come at the latter part of the command line. This placement seems important across differing distributions of Linux.
You can see that using the --exclude option we can specify the folders and/or files to exclude, you can have as many --exclude options as you need. Note how the path is prefixed with a period (denoting the current directory). This is important because the exclude flag matches text patterns, not actual filenames, and the pattern starts with ./ - You can also use other regular expressions. For example you can use a wildcard such as file* to match any file or folder name beginning with the word file.
  tar --exclude='./folder_to_exclude' --
 exclude='./myfolder/file.txt' -zcvf /backup/filename.tgz .
 
 Analysing system performance with 'Top'
There are literally hundreds of guides on the Internet detailling how to use the 'top' command. A very handy command-line tool that has come with UNIX since back in the dark ages, however not all of these guides are directed flatly at
the new Linux user. This one won't go into loads of detail but will give you the basics.
The top command in action
Why would I want to run 'top' ?
Topisagreatutilitytofindoutifyour Linuxmachineisrunningslowly,orperhaps you want to see what a server is doing most of the time, top tells you loads of things about how well your box is performing and can be compared to tools like the Windows Task Manager.
How do I run 'top'?
Top is a command-line tool. That is, you need to run the Terminal or Konsole
  
 program in order to run it. For example, in Ubuntu, click on Applications, then click Accessories, then click 'Terminal'. You will be presented with a command prompt. Type the word top (in lower case) and press return. You will then see the 'top' program running.
What am I seeing here?
With any luck, your terminal window should look a bit like this:
top - 16:17:41 up 100 days, 18:01, 4 users, load average: 0.20, 1.13, 1.77 Tasks: 126 total, 1 running, 125 sleeping, 0 stopped, 0 zombie
Cpu(s): 0.0%us, 0.1%sy, 0.0%ni, 99.8%id, 0.2%wa, 0.0%hi, 0.0%si, 0.0%st Mem: 16383952k total, 15630644k used, 753308k free, 4180008k buffers Swap: 7815580k total, 64k used, 7815516k free, 10127600k cached
PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 1 root 20 0 1948 600 508 S 0 0.0 0:21.74 init
Whoa! What is all that nonsense?! Have no fear, it will all make sense in a second and you'll be able to impress all your friends with your new found knowledge!
The first line shows all of the stats that the command 'uptime' shows. For example, you can see the time of the system, how many days the system has been running (the 'uptime') - in this case my system has been running for 100 days, 18 hours, 1 minute. There are four active users on the system and finally you see the 'load average' figures.
The load average shows how many processes (program tasks) are ready to run over three time averages: 1 minute, 5 minutes and 15 minutes. You can tell that the 'load' on this box has come down from 1.77 to 0.20 in the last 15 minutes. Typically, you will find that a load average of over 10 is fairly high and you will definitely start to notice the computer being slower.
The next line is useful, but not as useful as the last one. The amount of tasks currently waiting and running is listed, note that 125 out of the 126 tasks at this time were 'sleeping'. The only running process was in fact 'top', everything else was doing nothing - just waiting around for something to happen, thus they are sleeping. You'll also notice that there are 0 zombie processes - these are when a process spawns (starts) another process (eg a child process) and the parent process fails and leaves a child process behind. The processes are still running but have nothing to do and nothing to speak to, so essentially they are 'Zombified processes!'. They are often difficult to get rid of, but I rarely see them these days

 unless you aren't looking after your system.
The next line will show you how much % of the CPU is being used, and in what states. If the CPU is 100% used for a blink and then back to around 5% use, this is quite normal and you will note that it happens quite a lot. The %us means this is how much percent of the system CPU usage is being occupied by user tasks (eg a task that you run as user 'bob'. The opposite of root or system processes). The %sy is the amount of system processes are using the CPU. Next, %ni means the amount of processes in percent that are 'niced' processes, eg processes that have had their normal weighting of priority adjusted in some way. Finally the %id is the percentage of the CPU that is currently idle, waiting for instructions, you can see that this box is really doing very little here, thus the high idle value.
There is a lot to say about Mem (Memory) and Swap ( Virtual Memory) usage, beyond the scope of this article, but needless to say, you should always expect the amount of free memory to be low - this is by design, it's not like the old days in Windows or DOS. Linux automatically allocates most of your available
RAM memory to use in caches.
The rest of the top program shows you the 'top' running processes (thus why the program is called top!). By default, it shows you the top processes sorted by CPU usage.
The example below shows an idle system, but you might see that a number of processes are above the process '1' (called init), and these are all chewing up more CPU usage. Here is what all the fields mean in that bar along the top:
PID - Process ID. The unique number given to each process on the system.
The init process always has PID 1 because it is the first thing that runs, and it spawns all other proceses. Don't kill this process unless you want to reboot your box!
USER - Username. This is the user or username that 'owns' the process in question. This way you can quite quickly see which user or users are chewing up most of the system's utilisation. Remember that the 'root' user is the system user.
PR - Priority. This is the priority of the process. This is often of little use to you as the kernel automatically works out the priority of a process depending upon the load and usage of a process. The higher the number, the lower the priority, +20 being the lowest priority, -20 the highest.
NI - 'Nice' Value. The 'nice' value can be between -19 and +20. This over-rides the

 priority of a process a bit, so if you have a big heavy duty process that you want to run, but don't want it to overpower everything else, you can 'renice' a priority to +20. If you want it to go above the normal threshold of kernel prioritisation (0), then you need to be the root user, you can renice a process down to -19 to beef up the priority of a task over any others.
VIRT - Virtual Memory allocated. This is the amount of virtual memory the process is using presently.
RES - Resident Memory allocated. This is the amount of 'real' memory allocated.
SHR - Shared Memory allocated. Processes can share memory with other processes, this is the amount of memory they are using which is considered to be 'shared' memory.
S - Status. This is the status of the process, it will either be R (Running), S (Sleeping) or Z (Zombie).
%CPU - This is the amount in percent that this process is using of the CPU at that instance.
%MEM - This is the amount of allocated memory that this process is using at that instance. Often you will find that this is fairly low.
TIME+ - This is the amount of CPU time a process is using in hundredths of a second.
COMMAND - This is the actual command that is running, or the name of the process.
Cool, what else can I do with top?
There are a few keys you can press within top, that will help you analyse other parts of your system's performance.
Kill - If you press k and enter a process ID (PID), you will kill (close down) that process. Be careful with this though, as if you kill a process that you shouldn't, the system can become unstable, especially if you are running top as the super-user (root). If you are asked for a 'signal' to give a process, there are a number of signals you can give but 15 and 9 are the most common. See 'man kill' for an idea of what each one does. Essentially 15 will terminate a normal process gracefully, 9 will kill it

 straight away (not graceful - doesn't have time to save it's state or data). Quit - to quit out of top, press q (lower case q).
Renice - to renice a process (see above section) use the r key.
Sort by memory usage - press lower case m.
Sort by CPU Usage - Press capital P. This is the default view
Further Usage and Reading
For further information, at the command line, type man top and you will see the manual page on the top program which gives you detailled information for top. You'll also find plenty of other guides on the Internet that go into further depth, but hopefully this helps you to diagnose your system's performance. For example, if something is running slowly (often a problem with programs like firefox crashing and chewing up CPU usage). You are likely to see firefox at the top of the top list. You can kill it by pressing k and entering the PID number of firefox, then pressing return. Once that's done, unless there are other processes still chewing up the CPU, you should notice things returning to normal.
Finally, there's also a newer, prettier (arguably nicer) version of top, which although is not on every linux system, it can be easily installed. It's called htop.
 
 Thanks for Reading!
Don't forget to check out the website for all the latest updates, quick tips, video tutorials. Support the author in keeping it free, too!
linuxnewbieguide.org
  made with
 Learn Linux in 5 Days JASON CANNON

 JASON CANNON
Copyright © 2015 Jason Cannon All rights reserved.
ii

 LEARN LINUX IN 5 DAYS
Contents
Introduction
Day1 3 Getting Access 4 Getting Connected 8 Welcome to Shell 33 Day2 36 Linux Directory Structure 37 Basic Linux Commands 48 Teach Yourself to Fish 50 Working with Directories 54 Listing Files and Understanding ls Output 58 Day3 67 File and Directory Permissions Explained 68 Finding Files 86 Viewing and Editing files 91 Comparing Files 106 Determining a File's Type 108 Searching in Files 109 Day 4 115 Deleting, Copying, Moving, and Renaming Files 116
Sorting Data
Creating a Collection of Files
121 123
iii
1

 JASON CANNON
Compressing Files To Save Space 125 Compressing Archives 127 Redirection 129 Transferring and Copying Files 136 Welcome Back to Shell 142 Day 5 161 Processes and Job Control 162 Scheduling Repeated Jobs with Cron 169 Switching Users and Running Commands as Others 174 Installing Software 179 The End and the Beginning 189 About the Author 190 Other Books by the Author 191 Additional Resources Including Exclusive Discounts for You 192
Appendices
Appendix A:
Abbreviations and Acronyms Appendix B: FAQ
Appendix C: Trademarks
197
198
198
202
205
iv

 LEARN LINUX IN 5 DAYS
OTHER BOOKS BY THE AUTHOR
Bash Command Line Pro Tips http://www.linuxtrainingacademy.com/bash-pro-tips
Command Line Kung Fu: Bash Scripting Tricks, Linux Shell Programming Tips, and Bash One-liners http://www.linuxtrainingacademy.com/command-line-kung-fu-book
High Availability for the LAMP Stack: Eliminate Single Points of Failure and Increase Uptime for Your Linux, Apache, MySQL, and PHP Based Web Applications http://www.linuxtrainingacademy.com/ha-lamp-book
Python Programming for Beginners http://www.linuxtrainingacademy.com/python-programming-for- beginners
     v

 JASON CANNON
YOUR FREE GIFT
As a thank you for reading Learn Linux in 5 Days, I would like to give you a copy of Linux Alternatives to Windows Applications. In it, you will be introduced to over 50 of the most popular applications available for Linux today. These applications will allow you to browse the web, watch movies, listen to music, connect to your favorite social networks, create presentations, and more. This gift is a perfect complement to this book and will help you along your Linux journey. Visit http://www.linuxtrainingacademy.com/linux-apps to download your free gift.
 vi

 INTRODUCTION
As the founder of the Linux Training Academy and an instructor of several courses, I've had the good fortune of helping thousands of people hone their Linux skills. Interacting with so many people who are just getting started with the Linux operating system has given me invaluable insight into the particular struggles and challenges people face at this stage.
One of the biggest challenges for people interested in learning the ins and outs of Linux is simply a lack of time. When you are working with a limited and extremely valuable resource you want to make sure you make the most of it.
The next biggest challenge for Linux newcomers is knowing where to start. There is so much information available that deciding what to focus your attention on first is a big enough hurdle to keep many people from even starting. What's worse is starting down the path of learning only to discover too many concepts, commands, and nuances that aren't explained. This kind of experience is frustrating and leaves you with more questions than answers.
That's why I've written this book.
1

 JASON CANNON
Not only have I condensed the most important material into five sections, each designed to be consumed in a day, I've also structured the content in a logical and systematic manner. This way you'll be sure to make the most out of your time by learning the foundational aspects of Linux first and then building upon that foundation each day.
In Learn Linux in 5 Days you will learn the most important concepts and commands, and be guided step-by-step through several practical and real-world examples. As new concepts, commands, or jargon are encountered they are explained in plain language, making it easy to understand.
Let's get started.
2

 LEARN LINUX IN 5 DAYS
DAY 1
3

 JASON CANNON
GETTING ACCESS
In order to start learning your way around and putting your newfound knowledge to the test, you're going to need access to a Linux system. If you already have an account on a Linux system, you can skip ahead to the next chapter.
Web Hosting Shell Accounts
If you use a web hosting service to host your website you may already have a Linux account that you can use. Consult your hosting company's documentation and search for "SSH" or "shell access." SSH stands for Secure Shell and it provides a way to connect to a server over a network, like the Internet. If you don't already have a web hosting provider, you can sign up for one and use it for shell access. Shared web hosting providers typically charge just a few dollars a month.
Here are some shared web hosting companies that can provide you with a shell account and SSH access.
4

 LEARN LINUX IN 5 DAYS
 1and1.com BlueHost.com DreamHost.com HostGator.com Site5.com
Using Preinstalled Linux Images
VirtualBox is virtualization software that can be installed on Windows, Mac, Solaris, or Linux. It allows you to run an operating system (guest) inside your current operating system (host). It's more time consuming than the other options, but it can be worth the extra effort to have your own personal Linux system. In this scenario you will spend a few minutes installing the virtualzation software, downloading a pre- installed Linux image, and importing that image.
To get started, head over to the VirtualBox download page located at https://www.virtualbox.org/wiki/Downloads and grab the installer for your current operating system. Click through the install screens and accept the defaults.
Next, download a virtual disk image (VDI) from http://virtualboxes.org to use. I recommend that you download a CentOS or Ubuntu image unless you already know which Linux distribution you will be working with in the future. Honestly, you can't make a wrong decision. The concepts that you will be learning in this book apply to any Linux distribution.
Launch VirtualBox, create a new virtual machine, and use the virtual disk image that you just downloaded. When you are asked for a hard disk image select the "Use existing hard disk" radio button and click on the directory icon. Next, click "Add" and select the virtual disk image.
         5

 JASON CANNON
When the virtual machine is powered on you can log into the server using the username and password provided with the downloaded image.
6

 LEARN LINUX IN 5 DAYS
Deep Dive
These links along with other supplemental material is available at: http://www.linuxtrainingacademy.com/lfb
How to Install VirtualBox on Mac - A video that guides you through the installation of VirtualBox on Mac. http://youtu.be/xBQdflx1L1o
How to Install VirtualBox on Windows - A video that guides you through the installation of VirtualBox on Windows. http://youtu.be/CBhppdewtEQ
VirtualBox Documentation - Official VirtualBox documentation https://www.virtualbox.org/wiki/Documentation
VirtualBox download page - Where to obtain a copy of the VirtualBox software. https://www.virtualbox.org/wiki/Downloads
VirtualBoxes.org - A good source of virtual disk images. http://virtualboxes.org/
           7

 GETTING CONNECTED
When your account is created you will be provided with details on how to connect to the Linux server. You may be provided with some or all of the following information:
Username. This is also known as an account, login, or ID. Password
SSH key
Server name or IP address
Port number
Connection protocol
The connection protocol will either be SSH (Secure Shell) or telnet. SSH and telnet provide ways to connect to a server over the Internet or a local area network. In the vast majority of cases the connection protocol will be SSH. Telnet is practically obsolete at this point, however you may run into it if you need to access a legacy system.
      8

 LEARN LINUX IN 5 DAYS
Choosing an SSH Client
If you were given a specific SSH client to use, use that program and follow the documentation for that product. If you are free to choose your own client or were not provided one, I suggest using PuTTY for Windows or Terminal for Mac.
PuTTY can be downloaded from this website: http://www.LinuxTrainingAcademy.com/putty/. You only need putty.exe to get started.
The Terminal application comes pre-installed on Macs and is located in the /Applications/Utilities folder.
A list of other SSH clients is provided in the Deep Dive section at the end of this chapter.
 9

 JASON CANNON
Connecting via SSH with a Password from Windows
To connect to the Linux server using the SSH connection protocol, launch PuTTY.
 10

 LEARN LINUX IN 5 DAYS
Type the host name or IP address you were given into the Host Name (or IP address) box. If no port was given to you, leave it at the default value of 22.
 11

 JASON CANNON
Enter your username by clicking on Data in the left pane. It is located directly below Connection. Type your username into the Auto- login username field. If you skip this step you will be prompted for your username when you connect to the server.
 12

 LEARN LINUX IN 5 DAYS
Save your session by typing in a name in the Saved Sessions box and clicking Save. This allows you to speed up this process by simply double clicking on your saved session to connect to the Linux server.
 13

 JASON CANNON
When you click Open a connection attempt will be made. The first time you connect to a particular server, PuTTY will ask to cache that server's host key. You will not be prompted again on subsequent connections. To add the server's SSH host key to PuTTY's cache, simply click Yes when prompted.
 14

 LEARN LINUX IN 5 DAYS
Once you are successfully logged in, you will see something similar to this:
Connecting via SSH with a Password from Mac
The built-in SSH client on Mac is a command line program. Command line programs can be run with the Terminal application that comes with the Mac operating system. It is located in the /Applications/Utilities folder. The format of the ssh command is ssh -p port_number username@servername. If you were not provided a port number, then the default port of 22 is assumed and you can omit -p 22 from the ssh command. Similarly, the username only needs to be specified if it is different on the server than it is on your Mac workstation. For example, if your username on your Mac is bob and your username on linuxsvr is also bob, you can omit bob@ and simply type ssh linuxsvr. Once Terminal is running, type in the ssh command. Commands are case-sensitive and the ssh command is lowercase. It should look like one of these three options:
 15

 JASON CANNON
 ssh linuxsvr
ssh bob@linuxsvr
ssh -p 2222 bob@linuxsvr
The first time you connect to a particular server you will be asked to verify that server's host key. You will not be prompted again on subsequent connections. When you are asked Are you sure you want to continue connecting (yes/no)? type yes and press Enter. Once you have established a connection, you will be prompted for your password.
Like Mac, Linux also comes with a terminal program and an SSH client. Once you are connected to one Linux server you can use the ssh command to connect to another Linux server. You can nest multiple connections and navigate through your network of Linux servers in this fashion.
 16

 LEARN LINUX IN 5 DAYS
General Information on Connecting via SSH with Keys
You may have not be given a password, but rather given an SSH key or even asked to generate one. In the physical world a key unlocks a door. Similarly, an SSH key is used to unlock the access to your account on a server. If you do not have a key, you cannot unlock the door.
Using account passwords or a combination of account passwords and SSH keys is a common practice. With the growth of cloud computing in recent years, it is becoming more and more popular to use SSH keys exclusively. Since cloud servers are often connected to the public internet, they are prone to brute force attacks. A mischievous person could write a program that repeatedly connects to your server trying a new username and password combination each time. They can increase their odds of gaining entry by using a list of common usernames and passwords. Configuring your cloud server to not accept account passwords and to only accept SSH keys eliminates this threat.
You can further increase the security of your SSH key by giving it a passphrase. In this case it takes something you have -- the key -- and something you know -- the passphrase -- to gain access to your account. If you feel confident that your key will only be under your control, you can forgo providing a passphrase for your key. This will allow you to log into servers without typing a password at all. Having an SSH key without a passphrase can allow you to automate and schedule tasks that require logging in to remote systems.
Importing SSH Keys on Windows
If you were given an SSH key that is not already in the PuTTY format, you will need to convert it. PuTTYgen is required in order to convert an SSH key on a Windows system.
17

 JASON CANNON
Run PuTTYgen, click Load and navigate to the private SSH key you were given. The names of the files are typically id_rsa or id_dsa for private keys, and id_rsa.pub or id_dsa.pub for public keys.
Now you can save the public and private keys for later use with PuTTY.
 18

 LEARN LINUX IN 5 DAYS
Generating SSH Keys on Windows
In order to create an SSH key on a Windows system, you will need PuTTYgen.
 19

 JASON CANNON
When you run PuTTYgen you will be asked to move the mouse around to create some random data that will be used in the generation of the key.
 20

 LEARN LINUX IN 5 DAYS
You have the option to use a passphrase for your key. You can also change the comment to something more meaningful like Bob's key.
Now, save the public and private keys buy pressing Save public key and then Save private key. Give the public key to the system administrator so they can associate it with your account. The private key is for your eyes only. Do not share your private key!
 21

 JASON CANNON
Next, export the key as an OpenSSH key by clicking on Conversions and then Export OpenSSH Key. This OpenSSH key can later be used on Unix or Linux systems.
Connecting via SSH from Windows
Follow the "Connecting via SSH with a Password from Windows" instructions, but this time add one additional step to specify your SSH private key file. You can do this by by clicking on the plug sign (+) next to SSH in the left pane to reveal more options. Next click on Auth. In the right pane select Browse under the Private key file for authentication field and locate your private SSH key.
 22

 LEARN LINUX IN 5 DAYS
 Generating SSH Keys on Mac
If you are asked to generate an SSH key, launch the Terminal application and use the command line utility named ssh-keygen. You will be asked a series of questions. Accept all the defaults by pressing Enter. Optionally enter a passphrase for your SSH key.
 mac:~ bob$ ssh-keygen
Generating public/private rsa key pair. Enter file in which to save the key (/Users/bob/.ssh/id_rsa):
Enter passphrase (empty for no passphrase): Enter same passphrase again:
23

 JASON CANNON
 Your identification has been saved in
/Users/bob/.ssh/id_rsa.
Your public key has been saved in
/Users/bob/.ssh/id_rsa.pub.
The key fingerprint is: 0b:14:c5:85:5f:55:77:35:5f:9e:15:a9:b4:b0:54:05 bob@mac
The key's randomart image is:
+--[ RSA 2048]----+
| .o.o. .E+=@|
 | .o o..oO| | . ...+o.o| | . ..o | |.S| |..| |.| || || +-----------------+
Connecting via SSH with Keys from Mac
If you generated your keys, this part is already done for you. If you were given an SSH key, you need to place it in a directory named .ssh underneath your home directory. Open the Terminal application and type in the following commands. Press the Enter key at the end of each line.
You will gain a full understanding of what these commands do as you progress through this book. In order to expedite the process of getting connected, the details will be saved for later.
Switch to the Finder to copy your keys into the .ssh folder. In the Finder menu click Go and then Go to Folder... and type ~/.ssh when prompted. When you click go, the .ssh folder will be displayed.
 mkdir ~/.ssh
chmod 700 ~/.ssh
24

 LEARN LINUX IN 5 DAYS
Now you can drag your keys into place.
Back in the Terminal window, set the proper permissions on your key files. (Again, these commands will be covered later.)
I highly recommend naming the keys in the following format: id_rsa and id_rsa.pub or id_dsa and id_dsa.pub Otherwise, you will have to specify the location of your key when you use the ssh command or perform some additional configuration to tell SSH that your keys are not named in the standard way.
As a general rule it makes your life much easier if you follow the standard conventions and common practices. I will point them out along the way. One of the things I love most about Linux is the freedom and power it gives you to do things in a myriad of ways. There are cases where not following the standard conventions will be the right thing to do.
If you still wish to name your key something else, you can tell SSH where to find it by adding -i key_location to the ssh command. Remember, the format of the ssh command we used above is ssh -p
  cd ~/.ssh
chmod 600 *
25

 JASON CANNON
port_number username@servername. It can be expanded to ssh -i key_location -p port_number username@servername. Here's an example:
ssh -i /Users/bob/.ssh/bobs_key bob@linuxsvr
Connecting via Telnet
Telnet used to be the de facto way to connect to a Unix or Linux server. Over the years telnet has been replaced with Secure Shell, abbreviated SSH. SSH is, as its name implies, more secure than telnet. Telnet sends your login credentials over the network in plain text. SSH encrypts the communications between the client and the server, thus greatly improving security. If someone were to be packet snooping or eavesdropping on your connection, they would see garbled text and random characters. If you do have a need to telnet to a system you can use the SSH instructions from above, but with a couple of minor changes.
Connecting via Telnet from Windows
Run PuTTY and select the Telnet radio button. If no port was given to you, leave it at the default value of 23. You will be prompted for your username and password when you connect to the server.
 26

 LEARN LINUX IN 5 DAYS
 Connecting via Telnet from Mac
The built-in telnet client on Mac is a command line program. Command line programs can be run with the Terminal application that comes with the Mac operating system. It is located in the /Applications/Utilities folder. The format of the telnet command is telnet servername port_number. You only need to include a port number if it is different than the default value of 23. You will be prompted for your username and password when you connect to the server.
27

 JASON CANNON
 mac:~ bob$ telnet linuxsvr
Trying 10.0.0.7...
Connected to 10.0.0.7.
Escape character is '^]'.
Ubuntu 12.04.3 LTS
linuxsvr login: bob
Password:
Last login: Thu Nov  7 01:26:37 UTC 2013
Welcome to Ubuntu 12.04.3 LTS
 * Documentation: https://help.ubuntu.com/ System info as of Nov 7 01:26:52 UTC 2013
  System load:  0.42
  Usage of /:   3.1% of 40GB
  Memory usage: 32%
  Swap usage:   0%
  Processes:
  Users logged in:     0
  IP address for eth0: 10.0.0.7
bob@linuxsvr:~$
89
Connecting Directly
If you are running Linux in VirtualBox as described in the previous chapter or you have dedicated hardware with Linux installed on it, you can simply log in directly to the server. You will be presented with a prompt requesting your username and password. If it is a graphical environment, you will need to find a terminal application to use after you have logged in. In most cases it will literally be "terminal", but you might see some slight variations like "gnome terminal", "konsole", or "xterm."
Here is what opening the terminal application looks like in CentOS. You will find it in one of the menus.
28

 LEARN LINUX IN 5 DAYS
  29

 JASON CANNON
In some Linux graphical environments there may not be a traditional menuing system. In these cases you will want to search for the terminal application. In this Ubuntu example, click the button in the top left of the screen to bring up the dashboard. You can now start typing to find applications that are installed on the system.
 30

 LEARN LINUX IN 5 DAYS
 31

 JASON CANNON
Deep Dive
List of Mac SSH clients http://www.openssh.org/macos.html
List of SSH clients, all platforms http://en.wikipedia.org/wiki/Comparison_of_SSH_clients
List of Terminal Emulators - Includes terminals for Windows, Mac, and Linux. http://en.wikipedia.org/wiki/List_of_terminal_emulators
List of Telnet Clients https://en.wikipedia.org/wiki/Telnet#Telnet_clients
List of Windows SSH clients http://www.openssh.org/windows.html
OpenSSH.org - The official website for OpenSSH.
PuTTY http://www.LinuxTrainingAcademy.com/putty/
Watch Star Wars over a telnet connection.
           telnet towel.blinkenlights.nl
To disconnect, hold down the Ctrl key and press the right bracket (]). At the telnet > prompt type quit and press Enter.
Using SSH Public Key Authentication http://macnugget.org/projects/publickeys
                  32

 WELCOME TO SHELL
When you log into a server over the network the shell program is started and acts as your default interface to the system. The shell is nothing more than a program that accepts your commands and executes those commands. Said another way, the shell is a command line interpreter.
Let's look at the shell prompt you'll be working with. The prompt just sits and stares at you waiting for you do something interesting like give it a command to execute. Here is Bob's shell prompt.
bob@linuxsvr $
Bob's prompt is in a common format of username@servername $. In this example, the prompt is displaying the username, the server name, and if that user is using the system as a normal user ($) or a superuser (#).
The superuser on a Linux system is also called root. Anything that can be done on a server can be done by root. However, normal users can only do a subset of the things root can do. Root access is typically restricted to system administrators, but if you happen to support an application
 33

 JASON CANNON
on a Linux server you may need root privileges to install, start, or stop it. There are ways to grant specific users root privileges for specific cases. This is often accomplished with the sudo -- SuperUser Do -- program. That will be covered later. For now, just know that most of your day to day activities will be performed using a normal user account.
Your prompt might not look like Bob's. Common items that appear in prompts include the username, server name, present working directory, and the current time. Here are a few more prompt examples.
 [bob@linuxsvr /tmp]$
linuxsvr:/home/bob>
bob@linuxsvr:~>
[16:45:51 linuxsvr ~]$
$
% >
In two of the prompt examples you will notice a tilde (~). The tilde is a shorthand way of representing your home directory. In this example the tilde (~) is equivalent to /home/bob, which is Bob's home directory. This is called tilde expansion. A username can be specified after the tilde and it will be expanded to the given user's home directory. For example, ~mail would expand to the home directory of the mail user which is /var/spool/mail. Another example is ~pat expanding to /home/pat.
Prompts do not have to be contained on a single line. They can span multiple lines as in the following examples.
 linuxsvr:[/home/bob]
$
(bob@linuxsvr)-(06:22pm-:-11/18)-]- (~)
[Mon 13/11/18 18:22 EST][pts/0][x86_64] <bob@linuxsvr:~>
34

 LEARN LINUX IN 5 DAYS
 zsh 14 %
█▓▒░linuxsvr░▒▓██▓▒░ Mon Nov 18 06:22pm
~/
For the remainder of this book the prompt will be shortened to the dollar sign ($) unless displaying the full prompt provides additional clarity. Also, the default prompt may vary from system to system, but you can customize it to your liking. That, along with other shell related topics, is covered in a later chapter.
Deep Dive
Tilde Expasion http://gnu.org/software/bash/manual/html_node/Tilde- Expansion.html
   35

 DAY 2
36

 LEARN LINUX IN 5 DAYS
LINUX DIRECTORY STRUCTURE
Now that you are able to connect to the server and have been introduced to the interface you will be using, it's time to learn about the directory layout. Understanding the directory structure will help you in the future when you are searching for components on the system. It can help you answer questions like:
Where are programs located?
Where do configuration files live?
Where might I find the log files for this application?
Common Directories
Here are the most common top level directories that you need to be aware of and may interact with as a normal user.
37

 JASON CANNON
Dir Description
The directory called "root." It is the starting point for the file / system hierarchy. Note that this is not related to the root, or
superuser, account.
/bin Binaries and other executable programs. /etc System configuration files.
/home Homedirectories.
/opt Optional or third party software.
/tmp Temporary space, typically cleared on reboot. /usr User related programs.
/var Variable data, most notably log files.
Comprehensive Directory Listing
Here is a comprehensive list of top level directories that you may find on various Linux systems. Some subdirectories are included to help clearly define the purpose of the top level directory. You may never interact with many of these directories. Some of these directories will be on every system you encounter like /usr. Other directories are unique to specific Linux distributions. You can safely skim over this list and refer back to it if or when you have a practical need to do so.
38

 /dev
/etc System configuration files.
/export
Shared file systems. Most commonly found on Solaris systems.
LEARN LINUX IN 5 DAYS
Dir Description
The directory called "root." It is the starting point for / the file system hierarchy. Note that this is not related
to the root, or superuser, account. /bin Binaries and other executable programs.
/boot Files needed to boot the operating system. /cdrom Mount point for CD-ROMs.
/cgroup Control Groups hierarchy.
Device files, typically controlled by the operating system and the system administrators.
/home Home directories.
/lib System Libraries.
/lib64 System Libraries, 64 bit.
/lost+found Used by the file system to store recovered files after a file system check has been performed.
/media Used to mount removable media like CD-ROMs. /mnt Used to mount external file systems.
/opt Optional or third party software.
39

 JASON CANNON
Dir Description
/proc Provides information about running processes. /root The home directory for the root account. /sbin System administration binaries.
/selinux Used to display information about SELinux. /srv Contains data which is served by the system. /srv/www Web server files.
/srv/ftp FTP files.
/sys /tmp
Used to display and sometimes configure the devices and busses known to the Linux kernel.
Temporary space, typically cleared on reboot. This directory can be used by the OS and users alike.
User related programs, libraries, and documentation. /usr The sub-directories in /usr relate to those described
above and below.
/usr/bin Binaries and other executable programs.
/usr/lib Libraries.
Locally installed software that is not part of the base operating system.
/usr/local
/usr/sbin System administration binaries.
/var Variable data, most notably log files. 40

 LEARN LINUX IN 5 DAYS
Dir Description
/var/log Log files.
Unix Specific Directories
Linux is often found in environments with other Unix variants. If you ever have a need to log into a Unix server you may see some of the following Unix specific directories.
Dir
/devices
/kernel
/platform
/rpool
/net
/nfs4 /stand
Note that you
been listed above. However, those were most likely created by the system administrator.
Application Directory Structures
Applications can follow the same conventions employed by the
Description
Device files, typically controlled by the operating system and the system administrators.
Kernel and kernel modules. (Solaris)
Platformspecificfiles.(Solaris)
ZFS root pool directory. (Solaris)
Used to mount external file systems. (HP-UX)
Used to mount the Federated File System domain root. (Solaris)
Files needed to boot HP-UX.
may encounter other top level directories that have not
41

 Here is what it might look like if it was installed in /opt.
Dir
/opt/apache/bin
/opt/apache/etc
/opt/apache/lib
/opt/apache/logs
Description
The application's binaries and other executable programs.
Configuration files for the application.
Application libraries. Application log files.
JASON CANNON
operating system. Here is a sample directory structure of an application named apache installed in /usr/local.
Dir
/usr/local/apache/bin
/usr/local/apache/etc
/usr/local/apache/lib
/usr/local/apache/logs
Description
The application's binaries and other executable programs.
Configuration files for the application.
Application libraries. Application log files.
A common alternative to placing all the application subdirectories in /opt/app-name is to also use /etc/opt/app-name and /var/opt/app-name. Here is what that might look like for our example apache application.
42

 Dir
/etc/opt/apache
/opt/apache/bin
/opt/apache/lib
/var/opt/apache
Description
Configuration files for the application.
The application's binaries and other executable programs.
Application libraries. Application log files.
LEARN LINUX IN 5 DAYS
Sometimes applications that are not part of the standard operating system are installed in a shared manner and are not given their own subdirectory. For example, if apache was installed directly into /usr/local its binaries would live in /usr/local/bin and its configuration would live in /usr/local/etc. Apache may not be the only locally installed software so it would share that space with the other installed applications.
Another common practice is to create a directory structure based on a company, organization, or team name. For example, if you work at the Acme Corporation you may find a directory named /opt/acme or /usr/local/acme. Sometimes scripts and utilities are installed directly in that structure and other times there are segregated into their own subdirectories. Here's an example.
Dir Description
/opt/acme Company top level directory.
/opt/acme/bin
Binary programs created by or installed by the Acme Corporation.
43

 Alternatively you may see something like this.
Dir
/opt/acme
/opt/acme/apache
/opt/acme/apache/bin
Description
Company top level directory.
The top level directory for Acme's installation of apache.
The apache binary programs.
JASON CANNON
Here are variations on the same idea, but based on a team within the company.
Dir Description
/opt/web-team
/opt/acme/web-team
The web support team's top level directory.
The web support team's top level directory.
/usr/local/acme/web-team The web support team's top level directory.
Example Top Level Directory Listings
Here is a listing of the top level directories for a few different Linux servers. Listing files and directories with the ls command will be covered in the next chapter.
44

 Red Hat Enterprise Linux 7 (RHEL)
LEARN LINUX IN 5 DAYS
 [bob@rhel6 ~]$ ls -1 /
bin
boot
cgroup
dev
etc
home
lib
 lib64
lost+found
media
mnt
opt
proc
root
sbin
selinux
srv
sys
tmp
usr
var
SUSE Linux Enterprise Server 11 (SLES)
 [bob@sles11 ~]$ ls -1 /
bin
boot
 dev
etc
home
lib
lib64
lost+found
media
mnt
opt
proc
root
45

 Ubuntu 14.04 LTS
JASON CANNON
 sbin
selinux
srv
sys
tmp usr
 [bob@ubuntu12 ~]$ ls -1 /
 bin
boot
dev
etc
home
lib
lib64
lost+found
media
mnt
opt
proc
root
run
sbin
selinux
srv
sys tmp usr
 var
46

 LEARN LINUX IN 5 DAYS
Deep Dive
Filesystem Hierarchy Standard http://refspecs.linuxfoundation.org/FHS_2.3
man hier
RedHat Enterprise Linux http://redhat.com/products/enterprise-linux/
SUSE Linux Enterprise Server https://www.suse.com/products/server/
Ubuntu http://www.ubuntu.com/
         47

 BASIC LINUX COMMANDS
Here is a short list of basic, but essential commands. In Linux, commands are case-sensitive and more often than not they are entirely in lowercase. Items that are surrounded by brackets ([]) are optional. You will more than likely use at least some of these commands every time you log into a Linux system. Become familiar with these commands because they can get you pretty far in a short amount of time.
ls - Lists directory contents. You will use ls to display information about files and directories.
cd [dir] - Changes the current directory to dir. If you execute cd without specifying a directory, cd changes the current directory to your home directory. This is how you navigate around the system.
pwd - Displays the present working directory name. If you don't know what directory you are in, pwd will tell you.
cat [file] - Concatenates and displays files. This is the command you run to view the contents of a file.
echo [argument] - Displays arguments to the screen. 48

 LEARN LINUX IN 5 DAYS
man command - Displays the online manual for command. Type q to quit viewing the manual page. The documentation provided by the man command is commonly called "man pages."
exit, logout, or Ctrl-d - Exits the shell or your current session. clear - Clears the screen.
Here is a screen capture of Bob's session using the above commands.
 $ ls
PerformanceReviews sales-lecture.mp3 sales.data tpsreports
$ cd tpsreports
$ pwd
/home/bob/tpsreports
$ ls -l
total 2
-rw-r--r-- 1 bob users 31 Sep 28 14:49 coversheet.doc -rw-r--r-- 1 bob users 35 Sep 27 08:47 sales-report
$ cat sales-report
We sold lots of widgets this week!
$ echo $PATH
/bin:/usr/bin:/usr/sbin:/usr/local/bin
$ man ls
NAME
...
ls - list directory contents
More details on how you can fully exploit the power of these simple commands will be covered later. But right now, grab your fishing pole -- you're about to learn how to fish.
49

 TEACH YOURSELF TO FISH
Knowing where executable commands live and the man command can take you a long way. You can teach yourself how to use Linux with this method, but it would be a long, slow process. More often than not, the man command will be used as a quick reference. It would be nearly impossible to memorize every option for every command and there is no need to do so when you have the man command at your fingertips.
To get help for the man command type the letter h while viewing a manual page. That will give you a list of commands you can use to navigate or search. Here is the concise version.
Enter - Move down one line. Space - Move down one page.
g - Move to the top of the page.
G - Move to the bottom of the page. q - Quit.
An environment variable is a storage location that has a name and a
50

 LEARN LINUX IN 5 DAYS
value. The one we are interested in at the moment is PATH. The PATH environment variable contains a list of directories that contain executable commands. You can determine the value of PATH by prepending it with a dollar sign ($PATH) and using the echo command to display its value to the screen.
When you type in a command at the prompt and press Enter, that command will be searched for in the directories in your $PATH. In this example, /bin will be searched first. If the command is found it will be executed. If it is not found, then /usr/bin will be searched and so on. If no executable command is found that matches your request, you will be politely told that it cannot be found.
If you want to know exactly where a command is located you can use the which command. If the program cat is located in /usr/bin and in /usr/local/bin, the one which will get executed depends on your $PATH.
Putting this all together, you can start looking at what is in each directory in your $PATH and use the man command to discover what each one of them does and how to use them. Remember, to exit the man command type the letter q.
 $ echo $PATH /bin:/usr/bin:/usr/sbin:/usr/local/bin
 $ whatsupdoc
-bash: whatsupdoc: command not found
 $ which cat
/bin/cat
$ which tac
/usr/bin/tac
 $ echo $PATH /bin:/usr/bin:/usr/sbin:/usr/local/bin
$ cd /bin
$ ls
awk diff cal cat cp date du echo grep groups less
51

 JASON CANNON
 more
$ man diff
NAME
      diff - compare two files
...
$ cd /usr/bin
$ ls
clear crontab cut dos2unix find kill mv pstree pwd sed strings touch ...
$ man touch
Note that the output of the above ls commands was truncated. In reality there can be hundreds of commands in /bin and /usr/bin.
Many commands will provide hints for how to use them at the command line. Some commands will accept the -h flag, others will accept --help, and some will refuse to give you any help at all.
 $ cal -h
Usage:
 cal [options] [[[day] month] year]
Options:
 -1, --one
 -3, --three
 -s, --sunday
 -m, --monday
 -j, --julian
show only current month (default)
show previous, current and next month
Sunday as first day of week
Monday as first day of week
output Julian dates
 -y, --year show whole current year
-V, --version display version information and exit -h, --help display this help text and exit
$ diff --help
Usage: diff [OPTION]... FILES
Compare files line by line.
-i --ignore-case Ignore case differences in file contents.
--ignore-file-name-case Ignore case when comparing file names.
52

 ...
LEARN LINUX IN 5 DAYS
 If you are not sure what command to use, you can search through the man pages with man -k KEYWORD. From there you can read the man page for the command or ask it for help with -h or --help.
Deep Dive
ExplainShell - Type in a command-line to display help for each item.
http://explainshell.com/
Getting Help From Linux - An article from the Linux Journal on using man pages. http://www.linuxjournal.com/node/1022962
LinuxManPages.com - This website allows you to search man pages or browse a category of commands and man pages. http://www.linuxmanpages.com/
Linux commands broken down by category. http://linux.math.tifr.res.in/manuals/categories-index.html
 $ man -k calendar
cal        (1)  - display a calendar
zshcalsys  (1)  - zsh calendar system
        53

 WORKING WITH DIRECTORIES
Directories are simply containers for files and other directories. They provide a tree like structure for organizing the system. Directories can be accessed by their name and they can also be accessed using a couple of shortcuts. Linux uses the symbols . and .. to represent directories. Think of . as "this directory" and .. and "the parent directory."
Symbol Description
. This directory.
.. The parent directory.
/
Directory separator. Directories end in a forward slash and this is often assumed.
The directory separator is optional for the last subdirectory in a path or command. For example, the following commands work identically.
 $ cd /var/tmp
$ cd /var/tmp/
54

 LEARN LINUX IN 5 DAYS
Using the shortcuts can make navigating easier. For example, type cd.. to go to the directory just above your current directory.
 $ pwd
/home/bob
$ cd tpsreports
$ pwd
/home/bob/tpsreports
$ cd ..
$ pwd
 /home/bob
$ cd ..
$ pwd
/home
$ cd .
$ pwd
/home
The cd . command did not take you anywhere. Remember that . is "this directory" and .. is "the parent directory." Another shortcut for navigating directories is cd -. This command takes you to the previous directory. The environment variable that represents your previous working directory is OLDPWD. So, cd - and cd $OLDPWD are equivalent.
 $ pwd
/home/bob
$ cd /var/tmp
$ pwd
 /var/tmp
$ echo $OLDPWD
/home/bob
$ cd -
/home/bob
$
How would you execute a command that is in your current directory? Assume your current directory is your home directory. By default your home directory is not in your $PATH. Here is how to do that.
55

 $ ./program
JASON CANNON
 Why does that work? Well, . represents "this directory", / is the directory separator, and program is the program to execute. You can always use the full path to be explicit. Here are two ways to execute program.
Creating and Removing Directories
The mkdir command is used to create directories and the rmdir command removes them.
mkdir [-p] directory - Create a directory. Use the -p (parents) option to create intermediate directories.
rmdir [-p] directory - Remove a directory. Use the -p (parents) option to remove all the specified directories. rmdir only removes empty directories. To remove directories and their contents, use rm.
rm -rf directory - Recursively removes the directory and all files and directories in that directory structure. Use with caution. There is no "trash" container to quickly restore your file from when using the command line. When you delete something, it is gone.
 $ pwd
/home/bob
$ ./program
 $ /home/bob/program
56

 LEARN LINUX IN 5 DAYS
 $ mkdir newdir
$ mkdir newdir/product/reviews
mkdir: Failed to make directory "newdir/product/reviews"; No such file or directory $ mkdir -p newdir/product/reviews
$ rmdir newdir
rmdir: directory "newdir": Directory not empty
$ rm -rf newdir
$ ls newdir
ls: newdir: No such file or directory
 $ pwd
/home/bob
$ cd ..
$ pwd
/home
57

 JASON CANNON
LISTING FILES AND UNDERSTANDING LS OUTPUT
Here is the output from an ls command using the -l option. The -l flag tells ls to display output in a long format. If you need to see what files or directories exist, use ls. However, if you need detailed informationusels -l.
On the far left of the ls output is a series of characters that represent the file permissions. The number that follows the permissions represents the number of links to the file. The next bit of information is the owner of the file followed by the group name. Next the file size is displayed followed by the date and time when the file was last modified. Finally, the name of the file or directory is displayed. Here is the information displayed by the ls -l command in table form.
 $ ls -l
-rw-rw-r-- 1 bob users 10400 Sep 27 08:52 sales.data
Item
Permissions Number of links
Value
-rw-rw-r-- 1
58

 Item
Owner name
Group name
Number of bytes in the file Last modification time
File name
Value
bob
users
10400
Sep 27 08:52 sales.data
LEARN LINUX IN 5 DAYS
The meaning of -rw-rw-r-- will be covered in detailed in the "File and Directory Permissions Explained" chapter.
Listing All Files, Including Hidden Files
Files or directories that begin with a period (.) are considered hidden and are not displayed by default. To show these hidden files and directories, use the -a option.
 $ ls -a
.
..
.profile
.bash_history
lecture.mp3
 PerfReviews
sales.data
tpsreports
Up until this point when you have used options, you have preceded each option with a hyphen (-). Examples are -l and -a. Options that do not take arguments can be combined. Only one hyphen is required followed by the options. If you want to show a long ls listing with hidden files you could run ls -l -a or ls -la. You can even change the order of the flags, so ls -al works too. They are all
59

 equivalent.
JASON CANNON
 $ ls -l
total 2525
-rw-r--r--  1  bob  sales  25628 Sep 27 08:54 lecture.mp3
drwxr-xr-x  3  bob  users  512   Sep 28 09:20 PerfReviews
-rw-r--r--  1  bob  users  10400 Sep 27 08:52 sales.data
drwxr-xr-x  2  bob  users  512   Sep 28 14:49 tpsreports
$ ls -l -a
total 2532
drwxr-xr-x  4  bob  sales  512   Sep 28 14:56 .
 drwxr-xr-x  14 root root   512   Sep 27 08:43 ..
-rw-r--r--  1  bob  users  28    Sep 28 14:22 .profile
-rw-------  1  bob  users  3314  Sep 28 14:56 .bash_history
-rw-r--r--  1  bob  sales  25628 Sep 27 08:54 lecture.mp3
drwxr-xr-x  3  bob  users  512   Sep 28 09:20 PerfReviews
-rw-r--r--  1  bob  users  10400 Sep 27 08:52 sales.data
drwxr-xr-x  2  bob  users  512   Sep 28 14:49 tpsreports
$ ls -la
total 2532
drwxr-xr-x  4  bob  sales  512
drwxr-xr-x  14 root root   512
-rw-r--r--  1  bob  users  28
-rw-------  1  bob  users  3314
.bash_history
-rw-r--r--  1  bob  sales  25628 Sep 27 08:54 lecture.mp3
drwxr-xr-x  3  bob  users  512   Sep 28 09:20 PerfReviews
-rw-r--r--  1  bob  users  10400 Sep 27 08:52 sales.data
drwxr-xr-x  2  bob  users  512   Sep 28 14:49 tpsreports
$ ls -al
total 2532
drwxr-xr-x  4  bob  sales  512   Sep 28 14:56 .
drwxr-xr-x  14 root root   512   Sep 27 08:43 ..
Sep 28 14:56 .
Sep 27 08:43 ..
Sep 28 14:22 .profile
Sep 28 14:56
 -rw-r--r--  1  bob  users  28    Sep 28 14:22 .profile
-rw-------  1  bob  users  3314  Sep 28 14:56 .bash_history
-rw-r--r--  1  bob  sales  25628 Sep 27 08:54 lecture.mp3
drwxr-xr-x  3  bob  users  512   Sep 28 09:20 PerfReviews
-rw-r--r--  1  bob  users  10400 Sep 27 08:52 sales.data
drwxr-xr-x  2  bob  users  512   Sep 28 14:49 tpsreports
Listing Files by Type
When you use the -F option for ls a character is appended to the file name that reveals what type it is.
60

 LEARN LINUX IN 5 DAYS
 $ ls
dir1 link program regFile
$ ls -F
dir1/ link@ program* regFile
$ ls -lF
total 8
drwxr-xr-x 2 bob users 117 Sep 28 15:31 dir1/
lrwxrwxrwx 1 bob users 7   Sep 28 15:32 link@ -> regFile
-rwxr-xr-x 1 bob users 10  Sep 28 15:31 program*
-rw-r--r-- 1 bob users 750 Sep 28 15:32 regFile
Symbol Meaning
/ Directory.
Link. The file that follows the -> symbol is the target of the link.
@
* Executable program.
A link is sometimes called a symlink, short for symbolic link. A link points to the location of the actual file or directory. You can operate on the link as if it were the actual file or directory. Symbolic links can be used to create shortcuts to long directory names. Another common use is to have a symlink point to the latest version of installed software as in this example.
 bob@linuxsvr:~$ cd /opt/apache
 bob@linuxsvr:/opt/apache ~$ ls -F
2.3/ 2.4/ current@
bob@linuxsvr:/opt/apache$ ls -l
drwxr-xr-x 2 root root 4096 Sep 14 12:21 2.3
drwxr-xr-x 2 root root 4096 Nov 27 15:43 2.4
lrwxrwxrwx 1 root root    5 Nov 27 15:43 current -> 2.4
Listing Files by Time and in Reverse Order
If you would like to sort the ls listing by time, use the -t option. 61

 JASON CANNON
 $ ls -t
tpsreports
PerfReviews
lecture.mp3
sales.data
$ ls -lt
total 2532
drwxr-xr-x 2 bob users 512
drwxr-xr-x 3 bob users 512
-rw-r--r-- 1 bob sales 2562856 Sep 27 08:54 lecture.mp3
-rw-r--r-- 1 bob users 10400   Sep 27 08:52 sales.data
Sep 28 14:49 tpsreports
Sep 28 09:20 PerfReviews
When you have a directory that contains many files it can be convenient to sort them by time, but in reverse order. This will put the latest modified files at the end of the ls output. The old files will scroll off the top of your display, but the most recent files will be right above your prompt.
 $ ls -latr
total 2532
drwxr-xr-x 14 root root 512   Sep 27 08:43 ..
-rw-r--r-- 1 bob users 10400  Sep 27 08:52 sales.data
-rw-r--r-- 1 bob sales 256285 Sep 27 08:54 lecture.mp3
drwxr-xr-x 3 bob users 512
-rw-r--r-- 1 bob users 28
drwxr-xr-x 2 bob users 512
drwxr-xr-x 4 bob sales 512
-rw------- 1 bob users 3340
Sep 28 09:20 PerfReviews
Sep 28 14:22 .profile
Sep 28 14:49 tpsreports
Sep 28 14:56 .
Sep 28 15:04 .bash_history
Listing Files Recursively
Using the -R option with ls causes files and directories to be displayed recursively.
62

 LEARN LINUX IN 5 DAYS
 $ ls -R
.:
PerfReviews lecture.mp3 sales.data tpsreports ./PerfReviews:
Fred John old
./PerfReviews/old:
 Jane.doc $
You can also use the tree command for more visually appealing output. If you only want to see the directory structure, use tree -d.
tree - List contents of directories in a tree-like format. tree -d-Listdirectoriesonly.
tree -C-Colorizeoutput.
 $ tree
.
├── PerfReviews
│ ├── Fred
│ ├── John
│ └── old
│       └── Jane.doc
 ├── sales.data
├── sales-lecture.mp3
└── tpsreports
2 directories, 6 files
$ tree -d
.
└── PerfReviews
└── old
2 directories
$
63

 JASON CANNON
List Directories, Not Contents
Normally when you run ls against a directory the contents of that directory are displayed. If you want to ensure you only get the directory name, use the -d option.
 $ ls -l PerfReviews
total 3
-rw-r--r-- 1 bob users  36 Sep 27 08:49 Fred
 -rw-r--r-- 1 bob users 36 Sep 28 09:21 John drwxr-xr-x 2 bob users 512 Sep 27 12:40 old
$ ls -ld PerfReviews
drwxr-xr-x 3 bob users 512 Sep 28 09:20 PerfReviews $ ls -d PerfReviews
PerfReviews
Listing Files with Color
Earlier you used ls -F to help differentiate file types by adding a character to the end of their names in the ls output. You can also use color to distinguish file types by using ls --color.
 64

 LEARN LINUX IN 5 DAYS
Commonly Used ls Options Here is a recap of the ls options you have learned.
Option Description
-a All files, including hidden files
--color List files with colorized output
-d List directory names and not their contents -l Long format
-r Reverse order
-R List files recursively
-t Sort by time, most recently modified first
Working with Spaces in Names
If you want to make your life easier when working from the command line, do not use spaces in file and directory names. Hyphens (-) or underscores (_) can be good substitutes for spaces. CamelCase, the practice of capitalizing each word, is another good option. For example, instead of naming your latest literary attempt "the next great american novel.txt" you could use "the-next-great-american-novel.txt", "the_next_great_american_novel.txt" or even "TheNextGreatAmericanNovel.txt."
Sooner or later you will encounter a file or directory that contains a space in the name. There are two ways to deal with this. The first is to use quotation marks. Even though the file name is a file, operate on it using "a file." The second option is to escape the space. Escaping
65

 JASON CANNON
is like using quotes, but for single characters. The escape symbol is \, also known as a backslash. To escape a space, precede the space with the backslash (\) character.
 $ ls -l
-rw-r--r-- 1 bob users 18 Oct 2 05:03 a file
$ ls -l a file
ls: a: No such file or directory
ls: file: No such file or directory
$ ls -l "a file"
 -rw-r--r-- 1 bob users 18 Oct 2 05:03 a file
$ ls -l a\ file
-rw-r--r-- 1 bob users 18 Oct 2 05:03 a file
$ ls -lb a*
-rw-r--r-- 1 bob users 18 Oct 2 05:03 a\ file
$
The -b option to ls causes it to print escape codes. Note that quoting and escaping not only applies to spaces, but with other special charactersaswellincluding| & ' ; ( ) < > space tab.
Deep Dive
Escaping Special Characters in Linux and Unix: With 7 Practical Examples - An article that takes a in-depth look at escaping. http://linuxg.net/escaping-special-characters-in-linux-and-unix- with-7-practical-examples/
man bash - Look at the "QUOTING" section for handling special characters including spaces.
man ls - To learn about all of the available options to ls refer to the man page.
     66

 LEARN LINUX IN 5 DAYS
DAY 3
67

 JASON CANNON
FILE AND DIRECTORY PERMISSIONS EXPLAINED
Looking back at the long listings provided by the ls command you see that the first bit of information displayed is the permissions for the given file or directory.
The first character in the permissions string reveals the type. For example, - is a regular file, d is a directory, and l is a symbolic link. Those are the most common types you will encounter. For a full listing read the ls man page.
Symbol Type
- Regular file d Directory
l Symbolic link
 $ ls -l sales.data
-rw-r--r-- 1 bob users 10400 Sep 27 08:52 sales.data
68

 Permission
Read Write
Execute
File Meaning
Allows a file to be read.
Allows a file to be modified.
Allows the execution of a file.
Directory Meaning
Allows file names in the directory to be read.
Allows entries to be modified within the directory.
Allows access to contents and metadata for entries in the directory.
LEARN LINUX IN 5 DAYS
You will also notice other characters in the permissions string. They represent the three main types of permissions which are read, write, and execute. Each one is represented by a single letter, also known as a symbol. Read is represented by r, write by w, and execute by x.
Symbol Permission
r Read
w Write
x Execute
Read, write, and execute are rather self explanatory. If you have read permissions you can see the contents of the file. If you have write permissions you can modify the file. If you have execute permissions you can run the file as a program. However, when these permissions are applied to directories they have a slightly different meaning than when they are applied to files.
There are three categories of users that these permissions can be applied to. These categories or classes are user, group, and other. Like the permission types, each set is represented by a single letter. The user who owns the file is represented by u, the users that are in the file's
69

 JASON CANNON
group are represented by g, and the other users who do not own the file or are not in the file's group are represented by o. The character a represents all, meaning user, group, and other. Even though these characters do not show up in an ls listing, they can be used to change permissions.
Symbol Category
u User
g Group
o Other
a All - user, group, and other.
Every user is a member of at least one group called their primary group. However, users can and often are members of many groups. Groups are used to organize users into logical sets. For example, if members of the sales team need access to some of the same files and directories they can be placed into the sales group.
Run the groups command to see what groups you are a member of. If you supply another users ID as an argument to the groups command you will see the list of groups to which that user belongs. You can also runid -Gn [user]togetthesameresult.
 $ groups
users sales
$ id -Gn
users sales
$ groups pat
users projectx apache
$ groups jill
users sales manager
70

 LEARN LINUX IN 5 DAYS
Secret Decoder Ring for Permissions
Now you have enough background information to start decoding the permissions string. The first character is the type. The next three characters represent the permissions available to the user, also known as the owner of the file. The next three characters represent the permissions available to the members of the file's group. The final three characters represent the permissions available to all others.
In this case order has meaning. Permission types will be displayed for user, followed by group, and finally for others. Also, the permission types of read, write, and execute are displayed in that order. If a particular permission is not granted a hyphen (-) will take its place.
Here is a graphical representation of the permission information displayedbyls -l.
If you happen to see an extra character at the end of the permissions string an alternative access control method has been applied. If you see a period (.), the file or directory has an SELinux (Security Enhanced Linux) security context applied to it. If you see a plus sign (+), ACLs (Access Control Lists) are in use. SELinux and ACLs are beyond the scope of this book. However, you will be pleased to know that the use of either of these is rare. If you are having troubles with permissions and notice an extra character in the permissions string, know that further investigation may be necessary.
  $ ls -l sales.data.selnx
-rw-r--r--. 1 bob users 1040 Sep 27 08:52 sales.data.selnx
$ ls -l sales.data.acl
-rw-r--r--+ 1 bob users 1040 Sep 27 08:52 sales.data.acl
71

 ugoa
+-=
rwx
JASON CANNON
Changing Permissions
Permissions are also known as modes. That is why the command you use to change permissions is called chmod, short for "change mode." The format of the chmod command is chmod mode file. There are two ways to specify the mode. The first way is called symbolic mode. The symbolic mode format is chmod user_category operator permission. Here is a table view of the chmod command symbolic mode format.
Item Meaning
chmod Thechangemodecommand.
The user category. One or more of u for user, g for group, o for other, a for all.
One of +, -, or =. Use + to add permissions, - to subtract them, or = to explicitly set them.
The permissions. One or more of r for read, w for write, and x for execute.
You can add, subtract, or set permissions using user category and permission pairs. For example, if you want to add the write permission for the members of a file's group, you would specify chmod g+w file.
 $ ls -l sales.data
-rw-r--r-- 1 bob users 10400 Sep 27 08:52 sales.data $ chmod g+w sales.data
$ ls -l sales.data
-rw-rw-r-- 1 bob users 10400 Sep 27 08:52 sales.data
Notice that after running chmod g+w sales.data the permissions 72

 LEARN LINUX IN 5 DAYS
string changed from '-rw-r--r--' to '-rw-rw-r--'. Remember that the permissions are displayed in the order of user, group, and other. The group permission set now includes the w symbol indicating that the write permission has been granted. Now the owner of the file (bob) and members of the group (users) can read and write to the sales.data file. Here is the reverse. This is how you would subtract the write permission.
You can change more than one permission at a time. This time write and execute permissions are added for the file's group.
You can even set permissions on different user categories simultaneously. Here is how to change permissions for the user and group. Notice that before running this command that the user already has the write permissions. Using + to add permissions does not negate any existing permissions, it just adds to them.
 $ ls -l sales.data
 -rw-rw-r-- 1 bob users 10400 Sep 27 08:52 sales.data $ chmod g-w sales.data
$ ls -l sales.data
-rw-r--r-- 1 bob users 10400 Sep 27 08:52 sales.data
 $ ls -l sales.data
-rw-r--r-- 1 bob users 10400 Sep 27 08:52 sales.data $ chmod g+wx sales.data
$ ls -l sales.data
-rw-rwxr-- 1 bob users 10400 Sep 27 08:52 sales.data
 $ ls -l sales.data
-rw-r--r-- 1 bob users 10400 Sep 27 08:52 sales.data $ chmod ug+wx sales.data
$ ls -l sales.data
-rwxrwxr-- 1 bob users 10400 Sep 27 08:52 sales.data
If you want to set different permissions for different user categories, you can separate the specifications with a comma. You can mix and match to produce the outcome you desire. Here is how you can specify
73

 JASON CANNON
rwx for user while adding x for group.
If you want to set the file to be just readable by everyone, run chmod a=r file. When you use the equal sign (=) the permission are set to exactly what you specify. If you specify just read, then only read will be available regardless of any existing permissions.
If you do not specify permissions following the equal sign, the permissions are removed. Here is an illustration of this behaviour
Numeric Based Permissions
In addition to symbolic mode, octal mode can be used with chmod to set file and directory permissions. Understanding the concepts behind symbolic mode will help you learn octal mode. However, once you learn octal mode you may find that it is even quicker and easier to use than symbolic mode. Since there are only a few common and practical permission modes they can be readily memorized and recalled.
In octal mode permissions are based in binary. Each permission type is treated as a bit that is either set to off (0) or on (1). In permissions,
 $ ls -l sales.data
-rw-r--r-- 1 bob users 10400 Sep 27 08:52 sales.data $ chmod u=rwx,g+x sales.data
$ ls -l sales.data
-rwxr-xr-- 1 bob users 10400 Sep 27 08:52 sales.data
 $ ls -l sales.data
-rw-r--r-- 1 bob users 10400 Sep 27 08:52 sales.data $ chmod a=r sales.data
$ ls -l sales.data
-r--r--r-- 1 bob users 10400 Sep 27 08:52 sales.data
 $ ls -l sales.data
-rw-r--r-- 1 bob users 10400 Sep 27 08:52 sales.data $ chmod u=rwx,g=rx,o= sales.data
$ ls -l sales.data
-rwxr-x--- 1 bob users 10400 Sep 27 08:52 sales.data
74

 rwx
0 0 0
1 1 1
rww 0 0 0 4 2 1
Binary Value for off Binary Value for on
Base 10 (decimal) value for off Base 10 (decimal) value for on
LEARN LINUX IN 5 DAYS
order has meaning. Permissions are always in read, write, and execute order. If r, w, and x are all set to off, the binary representation is 000. If they are all set to on, the binary representation is 111. To represent read and execute permissions while omitting write permissions, the binary number is 101.
To get a number that can be used with chmod, convert the binary representation into base 10 (decimal). The shortcut here is to remember that read equals 4, write equals 2, and execute equals 1. The permissions number is determined by adding up the values for each permission type. There are eight possible values from zero to seven, hence the name octal mode. This table demonstrates all eight of the possible permutations.
75

 Octal Binary String
0 000 ---
1 001 --x
2 010 -w-
3 011 -wx
4 100 r--
5 101 r-x
6 110 rw-
7 111 rwx
Description
No permissions
Execute only
Write only
Write and execute (2 + 1) Read only
Read and execute (4 + 1)
Read and write (4 + 2)
Read, write, and execute (4+2+1)
JASON CANNON
Again, in permissions order has meaning. The user categories are always in user, group, and other order. Once you determine the octal value for each category you specify them in that order. For example, to get - rwxr-xr--, run chmod 754 file. That means the user (owner) of the file has read, write, and execute permission; the members of the file's group have read and execute permission; and others have read permissions.
UGO Symbolic rwx r-x r-- Binary 111 101 100
Decimal 7 5 4
76

 Symbolic Octal
-rwx------ 700
-rwxr-xr-x 755
-rw-rw-r-- 664
-rw-rw---- 660
-rw-r--r-- 644
Use Case / Meaning
Ensures a file can only be read, edited, and executed by the owner. No others on the system have access.
Allows everyone on the system to execute the file but only the owner can edit it.
Allows a group of people to modify the file and let others read it.
Allows a group of people to modify the file and not let others read it.
Allows everyone on the system to read the file but only the owner can edit it.
LEARN LINUX IN 5 DAYS
Commonly Used Permissions
Here are the most commonly used permissions. These five permissions will let you do just about anything you need to permissions wise.
When you encounter 777 or 666 permissions, ask yourself "Is there a better way to do this?" "Does everybody on the system need write access to this?" For example, if a script or program is set to 777, then anyone on the system can make changes to that script or program. Since the execute bit is set for everyone, that program can then be executed by anyone on system. If malicious code was inserted either on purpose or on accident it could cause unnecessary trouble. If multiple people need write access to a file consider using groups and limiting the access of others. It is good practice to avoid using 777 and 666 permission modes.
77

 JASON CANNON
Working with Groups
If you work on the sales team and each member needs to update the sales.report file, you would set the group to sales using the chgrp command and then set the permissions to 664 (rw-rw-r--). You could even use 660 (rw-rw---) permissions if you want to make sure only members of the sales team can read the report. Technically 774 (rwxrwxr--) or 770 (rwxrwx---) permissions work also, but since sales.report is not an executable program it makes more sense to use 664 (rw-rw-r--) or 660 (rw-rw----).
When you create a file its group is set to your primary group. This behaviour can be overridden by using the newgrp command, but just keep in mind when you create a file it typically inherits your default group. In the following example Bob's primary group is users. Note that the format of the chgrp command is chgrp GROUP FILE.
 $ nano sales.report
$ ls -l sales.report
-rw-r--r-- 1 bob users 6 Dec 4 20:41 sales.report $ chgrp sales sales.report
$ ls -l sales.report
-rw-r--r-- 1 bob sales 6 Dec 4 20:41 sales.report $ chmod 664 sales.report
$ ls -l sales.report
-rw-rw-r-- 1 bob sales 6 Dec 4 20:41 sales.report
Instead of keeping files in the home directories of various team members, it is easier to keep them in a location dedicated to the team. For example, you could ask the system administrator of the server to create a /usr/local/sales directory. The group should be set to sales and the permissions should be set to 775 (rwxrwxr-x) or 770 (rwxrwx---). Use 770 (rwxrwx---) if no one outside the sales team needs access to any files, directories, or programs located in /usr/local/sales.
78

 LEARN LINUX IN 5 DAYS
 $ ls -ld /usr/local/sales
drwxrwxr-x 2 root sales 4096 Dec 4 20:53 /usr/local/sales
$ mv sales.report /usr/local/sales/
$ ls -l /usr/local/sales
total 4
-rw-rw-r-- 1 bob sales 6 Dec 4 20:41 sales.report
Directory Permissions Revisited
This example demonstrates how permissions effect directories and their contents. A common problem is having proper permissions set on a file within a directory only to have the incorrect permissions on the directory itself. Not having the correct permissions on a directory can prevent the execution of the file, for example. If you are sure a file's permissions have been set correctly, look at the parent directory. Work your way towards the root of the directory tree by running ls -ld . in the current directory, moving up to the parent directory with cd .., and repeating those two steps until you find the problem.
 $ ls -dl directory/
drwxr-xr-x 2 bob users 4096 Sep 29 22:02 directory/ $ ls -l directory/
total 0
-rwxr--r-- 1 bob users 0 Sep 29 22:02 testprog
$ chmod 400 directory
$ ls -dl directory/
 dr-------- 2 bob users 4096 Sep 29 22:02 directory/ $ ls -l directory/
ls: cannot access directory/testprog: Permission denied
total 0
-????????? ? ? ? ? ? testprog
$ directory/testprog
-su: directory/testprog: Permission denied
$ chmod 500 directory/
$ ls -dl directory/
dr-x------ 2 bob users 4096 Sep 29 22:02 directory/
79

 JASON CANNON
 $ ls -l directory/
total 0
-rwxr--r-- 1 bob users 0    Sep 29 22:02 testprog
$ directory/testprog
This program ran successfully.
Default Permissions and the File Creation Mask
The file creation mask is what determines the permissions a file will be assigned upon its creation. The mask restricts or masks permissions, thus determining the ultimate permission a file or directory will be given. If no mask were present directories would be created with 777 (rwxrwxrwx) permissions and files would be created with 666 (rw- rw-rw-) permissions. The mask can and is typically set by the system administrator, but it can be overridden on a per account basis by including a umask statement in your personal initialization files.
umask [-S] [mode] - Sets the file creation mask to mode if specified. If mode is omitted, the current mode will be displayed. Using the -S argument allows umask to display or set the mode with symbolic notation.
The mode supplied to umask works in the opposite way as the mode given to chmod. When you supply 7 to chmod, that is interpreted to mean all permissions on or rwx. When you supply 7 to umask, that is interpreted to mean all permissions off or ---. Think of chmod as turning on, adding, or giving permissions. Think of umask as turning off, subtracting, or taking away permissions.
A quick way to estimate what a umask mode will do to the default permissions is to subtract the octal umask mode from 777 in the case of directories and 666 in the case of files. Here is an example of a umask 022 which is typically the default umask used by Linux distributions or set by system administrators.
80

 LEARN LINUX IN 5 DAYS
                      Dir    File
Base Permission      777     666
Minus Umask         -022    -022
                    ----    ----
Creation Permission  755     644
Using a umask of 002 is ideal for working with members of your group. You will see that when files or directories are created the permissions allow members of the group to manipulate those files and directories.
Here is another possible umask to use for working with members of your group. Use 007 so that no permissions are granted to users outside of the group.
Again, using this octal subtraction method is a good estimation. You can see that the method breaks down with the umask mode of 007. In reality, to get an accurate result each time you need to convert the octal permissions into binary values. From there you use a bitwise NOT operation on the umask mode and then perform a bitwise AND operation against that and the base permissions.
It is fine to gloss over the subtleties here since there are only a few practical umask modes to use. They are 022, 002, 077, and 007. Save yourself the binary math homework and look at the following table containing all the resulting permissions created by each one of the eight mask permutations.
                      Dir    File
Base Permission      777     666
Minus Umask         -002    -002
                    ----    ----
Creation Permission  775     664
                      Dir    File
Base Permission      777     666
Minus Umask         -007    -007
                    ----    ----
Creation Permission  770
660 *
81

 Octal Binary Dir Perms
0000rwx 1001rw- 2010r-x 3011r-- 4100-wx 5101-w- 6110--x 7111---
Special Modes
File Perms
rw-
rw-
r--
r--
-w-
-w-
---
---
JASON CANNON
Look at this output of umask when the mask is set to 022.
You will notice an extra leading 0. So far you have only been dealing with three characters that represent permissions for user, group, and other. There is a class of special modes. These modes are setuid, setgid, and sticky. Know that these special modes are declared by prepending a character to the octal mode that you normally use with umask or chmod. The important point here is to know that umask 0022 is the same as umask 022. Also, chmod 644 is the same as chmod 0644.
Even though special modes will not be covered in this book, here they are for your reference. There are links at the end of this chapter so you can learn more about these modes if you are so inclined.
 $ umask 0022
82

 LEARN LINUX IN 5 DAYS
setuid permission - Allows a process to run as the owner of the file, not the user executing it.
setgid permission - Allows a process to run with the group of the file, not of the group of the user executing it.
sticky bit - Prevents a user from deleting another user's files even if they would normally have permission to do so.
umask Examples
Here are two examples of the effects umask modes have on file and directory creation.
 $ umask
0022
$ umask -S
u=rwx,g=rx,o=rx
$ mkdir a-dir
$ touch a-file
$ ls -l
total 4
drwxr-xr-x 2 bob users 4096 Dec  5 00:03 a-dir
-rw-r--r-- 1 bob users    0 Dec  5 00:03 a-file
$ rmdir a-dir
$ rm a-file
$ umask 007
$ umask
 0007
$ umask -S
u=rwx,g=rwx,o=
$ mkdir a-dir
$ touch a-file
$ ls -l
total 4
drwxrwx--- 2 bob users 4096 Dec  5 00:04 a-dir
-rw-rw---- 1 bob users    0 Dec  5 00:04 a-file
83

 JASON CANNON
Free Training Videos on Linux Permissions
I know learning Linux permissions can be challenging. That's why I've recorded two videos that cover this subject in depth. In the videos I not only explain the concepts behind Linux permissions, but I also demonstrate them on an actual Linux server. Watching these will reinforce what you've learned in this chapter and hopefully clear up any confusion you might have. You can watch them here: http://www.linuxtrainingacademy.com/perms/
 84

 LEARN LINUX IN 5 DAYS
Deep Dive
Binary Number System - There are only 10 kinds of people in the world: those who understand binary and those who don't. http://mathsisfun.com/binary-number-system.html
Every Possible Umask Mode - An article that lists every possible umask mode.
http://linuxtrainingacademy.com/all-umasks
Linux Permissions Explained Videos
Watch these two videos that explain and demonstrate Linux file system permissions. http://www.linuxtrainingacademy.com/perms/
Modes - Detailed permission information. https://en.wikipedia.org/wiki/Modes_(Unix)
SELinux - The official SELinux project page. http://selinuxproject.org/
Special File Permissions - An article describing setuid, setgid, and the sticky bit. http://docs.oracle.com/cd/E19683-01/806-4078/secfiles-69
Ubuntu ACL Documentation – This applies not only to Ubuntu, but to other Linux distributions as well. http://help.ubuntu.com/community/FilePermissionsACLs
              85

 LEARN LINUX IN 5 DAYS
FINDING FILES
If you ever need to locate a file or directory you can use the find command. It can be used to find files by name, size, permissions, owner, modification time, and more.
find [path...] [expression] - Recursively finds files in path that match expression. If no arguments are supplied it find all files in the current directory.
 $ find
.
./.profile
./.bash_history
 ./PerfReviews
./PerfReviews/Fred
./PerfReviews/current ./PerfReviews/current/tps-violations.log ./PerfReviews/John
./sales.data
...
Here are some useful ways in which to use the find command.
86

 LEARN LINUX IN 5 DAYS
find . -name pattern - Displays files whose name matches pattern. This is case sensitive.
-iname pattern-Sameas-name,butignorescase. -ls - Performs an ls on each of the found files or directories.
find .
find .
find . -mtime num_days - Finds files that are num_days old.
find .
find .
Let's look at some examples. Let's say you are looking for a file or directory named "apache." You think it is in /opt somewhere and are not quite sure if it is "Apache" or "apache." You could provide find with the path of /opt, use -iname to ignore case, and look for "apache."
To find all the files in /usr/local that end in "conf", you can use this command.
If you are looking for files that are more than 10 days old, but less than 13 days old in the current directory you can use this command.
-size num - Finds files that are of size num. -newer file - Finds files that are newer than file.
-exec command {} \; - Run command against all the files that are found.
find .
 $ find /opt -iname apache
/opt/web/Apache
 $ find /usr/local -name *conf
/usr/local/etc/dhcpd.conf
/usr/local/etc/httpd.conf
 $ find . -mtime +10 -mtime -13
./.profile
./PerfReviews
87

 JASON CANNON
 ./PerfReviews/John
./tpsreports
./tpsreports/coversheet.doc
Find files that start with an "s" and perform an ls on them.
The -size argument to find takes a number followed by a letter that represents the unit of space. Valid options are:
c for bytes
k for Kilobytes (units of 1024 bytes)
M for Megabytes (units of 1048576 bytes)
G for Gigabytes (units of 1073741824 bytes)
Here is an example of how to find files that are larger than 300 megabytes.
Here is how to find directories that are newer than a given file. In this case you are looking for directories that are newer that "b.txt."
On some occasions you may want to run a command against a list of files. You can use the find command with the -exec option to do this sort of thing. Use a pair of braces ({}) to act as a placeholder for the current file being processed. The command is terminated with the
 $ find . -name "s*" -ls
52 11 -rw-r--r-- 1 bob users 1040 Sep 27 08:52 ./sales.data
48 1 -rw-r--r-- 1 bob users 35 Sep 27 08:47 ./demos/sr.txt 53 112 -rw-r--r-- 1 bob sales 266 Sep 27 08:54 ./salesdemo.mp3
 $ find . -size +300M ./PerfReviews/current/tps-violations.log
 $ find . -type d -newer b.txt
./PerfReviews
./PerfReviews/current
./tpsreports
88

 LEARN LINUX IN 5 DAYS
semicolon (;) character. You need to either escape or quote the semicolon like this ';' or like this \;. If you want to run the command file FILE_NAME on every file in the current directory you would use the following command.
 $ find . -exec file {} \;
.: directory
./.profile: ASCII text
./.bash_history: ASCII text
./PerfReviews: directory
 ./PerfReviews/Fred: directory
./PerfReviews/current: directory ./PerfReviews/current/tps-violations.log: ASCII text ./PerformanceReviews/John: empty
./sales.data: data
As you can see find is a really powerful tool and it has even more features than you have seen so far. Take a look at the man page or refer to the links at this end of this chapter.
Locate - A fast find
Every time you run the find command it evaluates each file and returns the appropriate response. This can be a slow process at times. For instance, if you are looking for a file on the system and cannot narrow its location down to a subdirectory you would run find / - name something. That command looks at each and every file on the system. If you know the file's name or at least part of its name and just want to know where it resides, the locate command is the right tool for that job.
locate pattern - List files that match pattern.
Once a day all the files on the system are indexed by a process called updatedb. When you run locate it is simply querying the index or database created by updatedb and not looking at each file on the system. This is really, really fast. The down side is that the data is not in
89

 JASON CANNON
real time. If you are trying to find a file you created just a few minutes ago, chances are it is not yet indexed and locate will not find it. Also, locate can potentially return a file that matches your search, but the file may have removed from the system since the index was last updated. On some servers locate is not installed or enabled, so your only choice may be to use find.
Here is what it looks like when locate is disabled.
If it is enabled you will get a quick response to your queries. Notice that you do not need to know the entire file name, just a portion works.
Deep Dive
Find - Ubuntu documentation on the find command. https://help.ubuntu.com/community/find
Locate - An article on the locate command. http://www.linfo.org/locate.html
The /etc/passwd file - An article on the /etc/passwd file. http://www.linfo.org/etc_passwd.html
 $ locate bob
locate: /var/locatedb: No such file or directory
 $ locate tpsrep
/home/bob/tpsreports /home/bob/tpsreports/coversheet.doc /home/bob/tpsreports/sales-report.txt
      90

 LEARN LINUX IN 5 DAYS
VIEWING AND EDITING FILES
Here are some simple commands that display the contents of files to the screen.
cat file-Displaytheentirecontentsoffile.
more file - Browse through a text file. Press the Spacebar to advance to the next page. Press Enter to advance to the next line. Type q to quit viewing the file. Commands are based on the vi editor, which is covered in the next section.
less file - Like more but allows backward movement and pattern searches.
head file - Output the beginning (or top) portion of file. tail file - Output the ending (or bottom) portion of file.
This is how you might examine a file named file.txt with the commands cat, tail, and more.
91

 JASON CANNON
 $ cat file.txt
This is the first line.
This is the second.
Here is some more interesting text.
Knock knock.
Who's there?
More filler text.
The quick brown fox jumps over the lazy dog.
The dog was rather impressed.
Roses are red,
 Violets are blue,
All my base are belong to you.
Finally, the 12th and last line.
$ head file.txt
This is the first line.
This is the second.
Here is some more interesting text.
Knock knock.
Who's there?
More filler text.
The quick brown fox jumps over the lazy dog.
The dog was rather impressed.
Roses are red,
Violets are blue,
$ tail file.txt
Here is some more interesting text.
Knock knock.
Who's there?
More filler text.
The quick brown fox jumps over the lazy dog.
 The dog was rather impressed.
Roses are red,
Violets are blue,
All my base are belong to you.
Finally, the 12th and last line.
$ more file.txt
Here is some more interesting text.
Knock knock.
Who's there?
...
92

 LEARN LINUX IN 5 DAYS
By default head and tail only display ten lines. You can override this behavior and tell them to display a specified number of lines. The format is -n where n is the number of lines you want to display. If you only want to display the first line of a file use head -1 file. Want to display the last three lines? Then run tail -3 file.
 $ head -2 file.txt
This is the first line.
This is the second.
$ tail -1 file.txt
 Finally, the 12th and last line.
$
Viewing Files In Real Time
Using cat can be a fine way to view files that have fairly static content. However, if you are trying to keep up with changes that are being made in real time to a file, cat is not the best choice. A good example of files that can change often and rapidly are log files. For example, you may need to start a program and look at that program's log file to see what it is doing. For this case, use the tail -f file command.
tail -f file - Follow the file. Displays data as it is being written to the file.
 $ tail -f /opt/app/var/log.txt
Oct 10 16:41:17 app: [ID 107833 user.info] Processing
 request 7680687
Oct 10 16:42:28 app: [ID 107833 user.err] User pat denied access to admin functions
...
Editing Files
Nano
If you need to edit a file right now and do not want to spend any time
93

 JASON CANNON
learning obscure editor commands, use nano. Nano is a clone of pico, so if for some reason the nano command is not available, pico probably is. It's not as powerful as some other editors, but it's definitely easier to learn.
When you start nano you will see the file's contents and a list of commands at the bottom of the screen. To run the commands, replace the caret symbol (^) with the Ctrl key. For example, to exit nano type Ctrl-x.
Editing in nano is quite easy. The up and down arrow keys will take you to the previous or next lines as expected. The right and left arrow keys let you navigate forwards and backwards on the same line. Simply type the desired text into the editor. To save the file, type Ctrl-o. If you forget to save the file before you exit, nano will ask you if you want to save the file. To learn more type Ctrl-g for help.
Vi
While nano is great for simple edits, vi and emacs have more advanced and powerful features. There is a learning curve to using these editors as they are not exactly intuitive. It will require a bit of a time investment to become proficient. Let's start by looking at vi.
 94

 LEARN LINUX IN 5 DAYS
vi [file]-Editfile.
vim [file] - Same as vi, but with more features.
view [file] - Starts vim in read-only mode. Use view when you want to examine a file but not make any changes.
Vim stands for "Vi IMproved." It is compatible with the commands found in vi. Some of the additional features of vim include syntax highlighting, the ability to edit files over the network, multi-level undo/redo, and screen splitting. On many Linux distributions when you invoke vi, you are actually running vim.
One advantage of knowing vi is that vi or a vi variant like vim is always available on the system. Another advantage is that once you learn the key mappings for vi you can apply them to other commands like man, more, less, view, and even your shell.
Vi Modes
Command Mode
Vi has the concept of modes. You are always working in one of three modes: command mode, insert mode, or line mode. When vi starts you are placed into command mode. To get back to command mode at any time hit the escape key (Esc). Letters typed while in command mode are not sent to the file, but are rather interpreted as commands. Command mode allows you to navigate about the file, perform searches, delete text, copy text, and paste text.
Here are some commonly used key bindings for navigation. k - Up one line.
j - Down one line.
95

 JASON CANNON
h - Left one character.
l - Right one character.
w - Right one word.
b - Left one word.
^ - Go to the beginning of the line. $ - Go to the end of the line.
Note that commands are case sensitive. For example, if you want to move down one line type the lowercase j. The uppercase J joins lines together. The original vi editor did not employ the use of arrow keys, however vim does, so you may find that you can use arrow keys on your system. The advantages of learning the original key bindings are 1) they always work and 2) it's faster since your hand does not have to leave the home row.
Insert mode
To enter insert mode, press one of the following keys. i - Insert at the cursor position.
I - Insert at the beginning of the line.
a - Append after the cursor position.
 96

 LEARN LINUX IN 5 DAYS
A - Append at the end of the line.
After entering into insert mode, type the desired text. When you are
finished, type Esc to return to command mode.
Line mode
To enter line mode you must start from command mode and then type a colon (:) character. If you are in insert mode, type Esc to get back to command mode and then type a colon for line mode. Here are some of the most common line mode commands you will want to know.
:w - Writes (saves) the file.
:w! - Forces the file to be saved even if the write permission is not set.
This only works on files you own.
:q - Quit. This will only works if there have not been any modifications to the file.
:q! - Quit without saving changes made to the file.
:wq! - Write and quit. After modifying a file this command ensures it
gets saved and closes vi. :x - Same as :wq.
:n - Positions the cursor at line n. For example, :5 will place the cursor on the fifth line in the file.
:$ - Positions the cursor on the last line of the file.
:set nu-Turnonlinenumbering.
:set nonu-Turnofflinenumbering.
:help [subcommand] - Get help. If you want more information on
97

 the :w
Mode
Command Insert
Line
Key
Esc
i I a A
:
command type :help :w.
Description
Used to navigate, search, and copy/paste text.
Also called text mode. Allows text to be inserted in the file.
Also called command-line mode. Save the file, quit vi, replace text, and perform some navigation.
JASON CANNON
Here is a screenshot of vim. Tildes (~) represent lines beyond the end of the file.
 98

 LEARN LINUX IN 5 DAYS
Advanced Editing with vi
You can repeat commands in vi by preceding them with a number. For instance, if you would like to move the cursor up 5 lines type 5k. If you would like to insert a piece of text 80 times, type 80i and start entering the text. Once you hit Esc to return to command mode the text you typed will be repeated 80 times. If you would like to make a line of asterisks, you could type 80i*Esc. Can you start to see how vi is more powerful than an editor like nano?
Deleting Text
x - Delete a character.
dw - Delete a word. To delete five words, type d5w. The repeating
concept in vi shows up in many places.
dd - Delete a line. To delete 3 lines, type 3dd.
D - Delete from the current position to the end of the line. Changing Text
r - Replace the current character.
cw - Change the current word.
cc - Change the current line.
c$ - Change the text from the current position to the end of the line.
C - Same as c$.
~ - Reverses the case of a character.
Copying and Pasting
yy - Yank (copy) the current line.
99

 JASON CANNON
y<position> - Yank the <position>. For example, to yank a word type yw. To yank three words type y3w.
p - Paste the most recent deleted or yanked text. Undo / Redo
u - Undo.
Ctrl-r - Redo.
Searching
/<pattern> - Start a forward search for <pattern>. ?<pattern> - Start a reverse search for <pattern>. Emacs
Emacs is another powerful editor. Some people really find themselves drawn to vi while others thoroughly enjoy using emacs. It's a bit of a rivalry in the Linux world, actually. Experiment with emacs and vi to see which one works for you. You can't make a bad choice as they are both great editors.
emacs [file]-Editfile.
When reading emacs documentation know that C-<char> means to hold down the Ctrl key while pressing <char>. For example, C-h means to hold down the Ctrl key while pressing the h key. If you see C-h t, that means to hold down Ctrl key while pressing the h key, release the Ctrl key and then type the letter t.
When you see M-<char>, that means hold down the "meta" key, which is the Alt key, while pressing <char>. You can also substitute the Esc key for the Alt key. So M-f translates to holding down the Alt key and pressing f or pressing and releasing Esc followed by typing the
100

 LEARN LINUX IN 5 DAYS
f key. You may need to use Esc for the meta key since Alt may be intercepted by your terminal program, for instance. If you want to simplify things, always use Esc for the meta key as it will work in all situations.
Here are some helpful emacs commands. C-h - Help.
C-x C-c - Exit. While holding down Ctrl press x, continue to hold down Ctrl and press c.
C-x C-s-Savethefile.
C-h t - Emacs has a nice built-in tutorial.
C-h k <key> - Describe key. Use this to get help on a specific key command or key combination.
Navigating
C-p - Previous line.
C-n - Next line.
C-b - Backward one character.
C-f - Forward one character.
M-f - Forward one word.
M-b - Backward one word.
C-a - Go to the beginning of the line. C-e - Go to the end of the line.
M-< - Go to the beginning of the file. 101

 JASON CANNON
M-> - Go to the end of the file. Deleting Text
C-d - Delete a character.
M-d - Delete a word.
Copying and Pasting
C-k - Kill (cut) the rest of the current line of text. To kill the entire line, position the cursor at the beginning of the line.
C-y - Yank (or paste) from the previously killed text. C-x u - Undo. Keep repeating for multi-level undo. Searching
C-s - Start a forward search. Type the text you are looking for. Press C- s again to move to the next occurrence. Press Enter when you are done searching.
C-r - Start a reverse search.
Repeating
Like vi, emacs provides a way to repeat a command.
C-u N <command>-Repeat<command>Ntimes.
For instance, to kill three lines of text type Ctrl-U 3 Ctrl-k.
102

 LEARN LINUX IN 5 DAYS
 You have only scratched the surface with the vi and emacs editors. There is so much more to learn if you are interested. Both editors have features that include macros, global replace, and more. Entire books have been written on each of the these editors.
Graphical Editors
So far you have learned about command line editors that are appropriate to use when you connect to a server via ssh. However, if you are running Linux as a desktop operating system you might be interesting in some graphical text editors and word processors. Here are some for your consideration.
emacs - Emacs has a graphical mode, too.
gedit - The default text editor for the Gnome desktop
environment.
gvim - The graphical version of vim.
kedit - The default text editor for the KDE desktop environment.
    103

 JASON CANNON
If you are looking for a MicroSoft Word replacement, consider AbiWord or LibreOffice. LibreOffice not only includes a word processor, but it is a complete office suite with a spreadsheet program, a database, and presentation software.
If you are looking for a source code editor to aid in computer programming, look at Geany, jEdit, or Kate. Sublime Text is another option. It is a commercial product that runs on Windows, Mac, and Linux.
Specifying a Default Editor
Some commands rely on the $EDITOR environment variable to tell them which program to use for editing. Since cron's primary purpose is to schedule jobs, it delegates the task of editing files to another program. The crontab -e command invokes the editor specified by the $EDITOR environment variable. You can set $EDITOR in your personal initialization files to ensure your favorite editor is used, be it nano, emacs, vi, or something else.
 $ echo $EDITOR
vi
104

 LEARN LINUX IN 5 DAYS
Deep Dive
Emacs How To - An emacs tutorial. http://help.ubuntu.com/community/EmacsHowto
Emacsbuilt-intutorial-StartemacsandtypeCtrl-h t. The Beginner’s Guide to Nano
http://www.howtogeek.com/howto/42980/
Vi tutorial https://www.washington.edu/computing/unix/vi.html
vimtutor - Run vimtutor from the command line start the vim tutorial.
Welcome Back to Shell - The commands more and less are called pagers because they allow you to page through a file. You will learn more about them in the "Welcome Back to Shell" chapter.
         105

 LEARN LINUX IN 5 DAYS
COMPARING FILES
If you want to compare two files and display the differences you can use
diff, sdiff, or vimdiff.
diff file1 file2 - Compare two files.
sdiff file1 file2 - Compare two files side by side.
vimdiff file1 file2 - Highlight the differences between two files in the vim editor.
 $ cat secret
site: facebook.com
user: bob
pass: Abee!
$ cat secret.bak
site: facebook.com
user: bob
pass: bee
$ diff secret secret.bak
3c3
106

 LEARN LINUX IN 5 DAYS
 < pass: Abee!
---
> pass: bee
$ sdiff secret secret.bak
site: facebook.com
user: bob
pass: Abee!
  site: facebook.com
  user: bob
| pass: bee
In the diff output, the text following the less-than sign (<) belongs to the first file. The text following the greater-than sign (>) belongs to the second file. The first line of the diff output provides some additional information. The first number represents line numbers from the first file and the second number represent lines from the second file. The middle character separating the line numbers will be a c meaning change, a d meaning deletion, or an a meaning an addition. In this example the third line of the first file is changed from "pass: Abee!" to the text on the third line in the second file which is "pass: bee."
In the sdiff output the pipe (|) character means that the text differs in the files on that line. You will also see the less-than sign (<) meaning that line only exists in the first file. The greater-than sign (>) means that line only exists in the second file.
Here is a screenshot of vimdiff secret secret.bak demonstrating how the changes are highlighted using color.
 107

 LEARN LINUX IN 5 DAYS
DETERMINING A FILE'S TYPE
There are clues as to what a file might contain. For instance, some files will have extensions. If a file ends in .txt, it is probably a text file. If a file has execute permissions, it might be a program. An easy way to determine the type of a file is to run the file command against it.
file file-Displaythefiletype.
 $ file /etc/passwd
/etc/passwd: ASCII text
$ file *
 bin: directory
bob.tar: POSIX tar archive
test.data: data
test.txt: ASCII English text
email-reports.sh: Bourne-Again shell script, ASCII text executable
108

 LEARN LINUX IN 5 DAYS
SEARCHING IN FILES
Searching for Text in ASCII Files
If you are looking for text within a file, use the grep command. grep pattern file - Search for pattern in file.
grep -v pattern file - Invert match. Return lines from file that do not match pattern.
 $ cat secret
site: facebook.com
user: bob
pass: Abee!
$ grep user secret
user: bob
$ grep o secret
site: facebook.com
user: bob
$ grep -v o secret
pass: Abee!
109

 JASON CANNON
Here are some more common options to use with grep. grep -i - Perform a search, ignoring case.
grep -c - Count the number of occurrences in a file. grep -n - Precede output with line numbers from the file.
 $ grep User secret
 $ grep -i User secret
user: bob
$ grep -ci User secret
1
$ grep -ni User secret
2:user: bob
Searching For Text in Binary Files
If you run grep against a binary file, it will simply display whether or not that information was found in the file, but it will not display the surrounding text. To look at textual data within a binary file use the strings command.
strings file-Displayprintablestringsinbinaryfiles.
 $ grep -i john BlueTrain.mp3
Binary file BlueTrain.mp3 matches
 $ strings BlueTrain.mp3 | grep -i john
John Coltrane
John Coltrane
$
Pipes
You will notice that two commands have been chained together with a vertical bar, also known as the pipe symbol. The pipe (|) means take the standard output from the preceding command and pass it as the
110

 LEARN LINUX IN 5 DAYS
standard input to the following command. If the first command displays error messages those will not be passed to the second command. Those error messages are called "standard error" output. You will learn how to manipulate standard error output in the "Redirection" chapter.
Also notice that in the first occurrence of the grep command the format of grep -i pattern file was used. In the second, the format of grep -i pattern was used. In the first format the input for grep came from file. In the second format the input for grep came from the preceding command via the pipe.
If you run strings BlueTrain.mp3 a lot of text will be displayed on the screen. Instead of letting that text pass you by, you can feed it to grep -i john using a pipe. The result, as you can see, is that 'John Coltrane'wasfoundtwiceinthestrings BlueTrain.mp3output.
Pipes aren't limited to just two commands. You can keep chaining commands together until you get the desired result you are looking for. Let's feed the output from grep to head -1 to limit the output to just one line.
Let's say you only want to display the second word of the above output. You can use the cut command to accomplish that goal.
cut [file] - Cut out selected portions of file. If file is omitted, use standard input.
cut -d delimiter - Use delimiter as the field separator.
cut -f N-DisplaytheNthfield.
To extract 'Coltrane' from 'John Coltrane', use a space as the delimiter (-d ' ') and print the second field (-f 2). The space was quoted
 $ strings BlueTrain.mp3 | grep -i john | head -1
John Coltrane
$
111

 JASON CANNON
since spaces are typically ignored by the shell. Single quotes or double quotes work the same in this situation.
You will find that there are many small commands that do just one thing well. Some examples are awk, cat, cut, fmt, join, less, more, nl, pr, sed, seq, sort, tr, and uniq. Let's take an example using some of those commands and chain them together with pipes.
The /etc/passwd file contains a list of accounts on the system and information about those accounts. In this example, the goal is to find all of the users named "bob" listed in the /etc/passwd file and print them in alphabetical order by username in a tabular format. Here is one way you could do that.
 $ strings BlueTrain.mp3|grep -i john|head -1|cut -d ' ' -f2
Coltrane
$
 $ cd /etc
$ grep bob passwd bob:x:1000:1000:Bob:/home/bob:/bin/bash bobdjr:x:1001:1000:Robert Downey:/home/bobdjr:/bin/bash bobh:x:1002:1000:Bob Hope:/home/bobh:/bin/bash bobs:x:1003:1000:Bob Saget:/home/bobs:/bin/bash bobd:x:1004:1000:Bob Dylan:/home/bobd:/bin/bash bobb:x:1005:1000:Bob Barker:/home/bobb:/bin/bash $ grep bob passwd | cut -f1,5 -d:
bob:Bob
 bobdjr:Robert Downey
bobh:Bob Hope
bobs:Bob Saget
bobd:Bob Dylan
bobb:Bob Barker
$ grep bob passwd | cut -f1,5 -d: | sort
bob:Bob
bobb:Bob Barker
bobd:Bob Dylan
bobdjr:Robert Downey
bobh:Bob Hope
112

 LEARN LINUX IN 5 DAYS
 bobs:Bob Saget
$ grep bob passwd | cut -f1,5 -d: | sort | sed 's/:/ /'
bob Bob
bobb Bob Barker
bobd Bob Dylan
bobdjr Robert Downey
bobh Bob Hope
bobs Bob Saget
$ grep bob passwd | cut -f1,5 -d: | sort | sed 's/:/ /' |column -t bob Bob
 bobb    Bob     Barker
bobd    Bob     Dylan
bobdjr  Robert  Downey
bobh    Bob     Hope
bobs    Bob     Saget
The above example shows the step-by-step thought process of how to go from one set of output and pipe it as the input to the next command. If you need to perform this action often you could save the final command for later use. As you can see, this simple concept of piping makes Linux extremely powerful.
Pipe Output to a Pager
Another common use of pipes is to control how output is displayed to your screen. If a command produces a significant amount of output it can scroll off your screen before you have the chance to examine it. To control the output use a pager utility such as more or less. You've already used those commands directly on files, but keep in mind they can take redirected input too.
 $ grep bob /etc/passwd | less bob:x:1000:1000:Bob:/home/bob:/bin/bash bobdjr:x:1001:1000:Robert Downey:/home/bobdjr:/bin/bash bobh:x:1002:1000:Bob Hope:/home/bobh:/bin/bash bobb:x:1005:1000:Bob Barker:/home/bobb:/bin/bash
113

 JASON CANNON
 ...
$ ls -l /usr/bin | less
total 62896
-rwxr-xr-x 1 root root 35264 Nov 19 2012 [ -rwxr-xr-x 1 root root 96 Sep 26 20:28 2to3-2.7 -rwxr-xr-x 1 root root 96 Sep 25 18:23 2to3-3.2 -rwxr-xr-x 1 root root 16224 Mar 18 2013 a2p -rwxr-xr-x 1 root root 55336 Jul 12 2013 ab
....
$ ps -ef | more
 UID   PID  PPID  C STIME TTY
    TIME CMD
00:00:00 /sbin/init
00:00:00 [kthreadd]
00:00:01 [ksoftirqd/0]
00:00:00 [migration/0]
00:00:04 [watchdog/0]
root    1
root    2
root    3
root    6
root    7
...
$
0  0 Jan08 ?
0  0 Jan08 ?
2  0 Jan08 ?
2  0 Jan08 ?
2  0 Jan08 ?
114

 LEARN LINUX IN 5 DAYS
DAY 4
115

 JASON CANNON
DELETING, COPYING, MOVING, AND RENAMING FILES
Removing Files
Eventually you will get tired of all the old files you created just laying around, cluttering up your home directory, and taking up precious space. To delete them, use the rm command.
rm file-Removefile.
rm -r directory - Remove the directory and its contents recursively. If you want to remove a directory with rm, you have to supply the -r argument.
rm -f file - Force removal and never prompt for confirmation.
Search patterns can be used to delete multiple files at once. It's a good idea to double check what you are going to remove with ls before you execute rm.
116

 LEARN LINUX IN 5 DAYS
 $ ls s*
sales-lecture.mp3 sales.data secret secret.bak $ rm s*
$ ls -d .*
. .. .profile .bash_history
$ rm .*
rm: cannot remove ‘.’: Is a directory
rm: cannot remove ‘..’: Is a directory
$ ls -d .*
. ..
Note that rm .* will not remove . (this directory) and .. (the parent directory).
Copying Files
To copy files, use the cp command. If you want to create a copy of a file you can run cp source_file destination_file. You can also copy a file, or a series of files, to a directory by using cp file(s) dir.
cp source_file destination_file - Copy source_file to destination_file.
cp source_file1 [source_fileN ...] destination_directory - Copy source_files to destination_directory.
cp -i source_file destination_file - Run cp in interactive mode. If the destination_file exists, cp will prompt you before it overwrites the file.
cp -r source_directory destination - Copy source_directory recursively to destination. If destination exists, copy source_directory into destination, otherwise create destination with the contents of directory.
117

 JASON CANNON
 $ cp file1 file2
$ mkdir dir
$ cp file1 file2 dir/
$ ls dir
file1 file2
$ rm dir/*
$ cp file1 file2 dir
$ cp -i file1 file2
overwrite file2? (y/n [n]) n
not overwritten
 $ cp -r dir dir2
$ ls dir2
file1 file2
$ cp dir dir3
cp: dir is a directory (not copied).
$ mkdir dir3
$ cp -r dir dir2 dir3
$ ls dir3
dir  dir2
$ tree dir3
dir3 ├── dir
│ ├── file1
│   └── file2
└── dir2
    ├── file1
    └── file2
Moving and Renaming Files
The way to rename files or directories in Linux is to use the mv command. The mv command moves files from one location to another. This can be used to relocate files or directories and it can be used to rename them also.
mv source destination - Move files or directories. If destination is a directory, source will be moved into destination. Otherwise source will be renamed to destination.
118

 LEARN LINUX IN 5 DAYS
mv -i source destination - Run mv in interactive mode. If the destination exists, mv will prompt you before it overwrites the file.
Look at the following examples. They should make it clear how the mv command behaves in various situations.
 $ ls -F
dir/   dir2/  dir3/  file1  file2
$ mv dir firstdir
$ ls -F
 dir2/     dir3/     file1
$ mv file1 file1.renamed
$ ls -F
dir2/          dir3/
firstdir/
$ mv file1.renamed firstdir/
$ ls -F
dir2/     dir3/     file2
$ ls -F firstdir/
file2     firstdir/
file1.renamed  file2
firstdir/
file1          file1.renamed  file2
$ cat firstdir/file1
This text started out in file1.
$ cat firstdir/file2
This text started out in file2.
$ mv firstdir/file1 firstdir/file2
$ cat firstdir/file2
This text started out in file1.
$ ls -F firstdir/
file1.renamed file2
$ mv -i firstdir/file1.renamed firstdir/file2
 overwrite firstdir/file2? (y/n [n]) n
not overwritten
$
In the above example, a directory was renamed with mv dir firstdir. Next, a file was renamed with mv file file1.renamed. Next file1.renamed was relocated to the firstdir directory with the mv file1.renamed firstdir/ command. A file was overwritten with the mv firstdir/file1
119

 JASON CANNON
firstdir/file2 command. If you want to be prompted before a file is overwritten use the -i option.
120

 LEARN LINUX IN 5 DAYS
SORTING DATA
You have already seen the sort command in use. In the simplest form it sorts lines of text alphabetically.
sort file-Sorttextinfile.
sort -k F file - Sort by key. The F following -k is the field
number.
sort -r file-Sortinreverseorder.
sort -u file - Sort text in file, removing duplicate lines.
121

 JASON CANNON
 $ cat more-secrets
tags: credentials
site: facebook.com
user: bob
pass: Abee!
tags: credentials
$ sort more-secrets
pass: Abee!
site: facebook.com
tags: credentials
 tags: credentials
user: bob
$ sort -u more-secrets
pass: Abee!
site: facebook.com
tags: credentials
user: bob
$ sort -ru more-secrets
user: bob
tags: credentials
site: facebook.com
pass: Abee!
$ sort -u -k2 more-secrets
pass: Abee!
user: bob
tags: credentials
site: facebook.com
122

 LEARN LINUX IN 5 DAYS
CREATING A COLLECTION OF FILES
If you want to bundle a group of files and/or directories together in an archive, you can use the tar command. You may want to create a copy or backup of a group of files. You may have several files you want to transfer at once or as a set. In these situations, tar can help.
tar [-] c|x|t f tarfile [pattern] - Create, extract or list contents of a tar archive using pattern, if supplied.
You will notice that tar does not require a hyphen (-) to precede its arguments. Traditionally the hyphen is excluded, but tar still works with it. If you see tar cf file.tar it is the same as tar -cf file.tar. Here is a look at some of the most commonly used tar options.
c - Create a tar archive.
x - Extract files from the archive.
t - Display the table of contents (list). v - Causes tar to be verbose.
123

 JASON CANNON
f file - The tar archive file to perform operations against.
In the following example tar is used to create (tar cf tps.tar) an archive, list the contents of the archive (tar tf tps.tar) and extract the contents (tar xf tps.tar).
 $ tar cf tps.tar tpsreports/
$ tar tf tps.tar
tpsreports/
tpsreports/sales-report.txt
 tpsreports/coversheet.doc
$ cd /tmp
$ tar xf /home/bob/tps.tar
$ ls tpsreports/
coversheet.doc sales-report.txt
$
If you would like to see the files that are getting placed into the archive or extracted from the archive, use -v to enable verbose mode.
 $ tar cvf misc.tar sec* tpsreports
secret
secret.bak
tpsreports/
tpsreports/sales-report.txt
tpsreports/coversheet.doc
$ tar xvf /home/bob/misc.tar
secret
secret.bak
tpsreports/
 tpsreports/sales-report.txt
tpsreports/coversheet.doc
124

 LEARN LINUX IN 5 DAYS
COMPRESSING FILES TO SAVE SPACE
gzip file - Compress file. The resulting compressed file is named file.gz.
gunzip file - Uncompress files.
gzcat or zcat - Concatenates and prints compressed files.
You can use the command du to display how much space is used by a file.
du - Estimates file usage.
du -k - Display sizes in Kilobytes.
du -h - Display sizes in human readable format. For example, 1.2M, 3.7G, etc.
Here are a couple of quick examples that demonstrate how to compress and uncompress files.
125

 JASON CANNON
 $ du -k data
15360 data
$ gzip data
$ du -k data.gz
26 data.gz
$ ls data*
data.gz
$ gunzip data.gz
 $ ls data*
data
$ du -k misc.tar
10 misc.tar
$ gzip misc.tar
$ du -k misc.tar*
misc.tar.gz
$
126

 LEARN LINUX IN 5 DAYS
COMPRESSING ARCHIVES
In modern versions of the tar command gzip compression is built-in. If you want to create, extract, or list the contents of a compressed archive use the -z argument. As a matter of convention compressed tar files will end in either .tar.gz or .tgz. Here is how this looks.
 $ tar zcf tps.tgz tpsreports
$ ls *.tgz
tps.tgz
$ tar ztf tps.tgz
tpsreports/
tpsreports/sales-report.txt
tpsreports/coversheet.doc
 $
If you run across an older version of tar without gzip compression built-in, you can use pipes to create compressed archives. When a hyphen (-) is used in place of a file name that means to use standard output. Running the command tar cf - pattern will create an archive of "pattern" and send the output to standard output which is normally your screen. If you follow the command with a pipe that standard output will be used as the input for the next command following the pipe. To force gunzip to send its output to standard out,
127

 JASON CANNON
use the -c argument. With this in mind, here is how you can create, list, and extract a compressed archive using tar, gzip, and pipes.
 $ tar cf - tpsreports | gzip > tps.tgz
$ ls *.tgz
tps.tgz
$ gunzip -c tps.tgz | tar tf -
tpsreports/
tpsreports/sales-report.txt
tpsreports/coversheet.doc
 $ cd /tmp
$ gunzip -c /home/bob/tps.tgz | tar xf -
$ ls tpsreports/
coversheet.doc sales-report.txt
$
128

 LEARN LINUX IN 5 DAYS
REDIRECTION
You have already learned how to redirect output from one command and send it as input to another one by using pipes. In the previous example you saw another way to redirect output using the greater-than (>) sign. Let's take a closer look at I/O (input/output) redirection.
There are three default types of input and output. They are standard input, standard output, and standard error. By default, standard input comes from the keyboard and standard output and standard error are displayed to the screen. Each one of these I/O types is given a file descriptor. File descriptors are just numbers that represent open files. For humans it is easier for us to reference files by name, but it is easier for computers to reference them by number.
You may be thinking, "my keyboard isn't a file, nor is my screen." On one level that is true, but on another level it is not. Linux represents practically everything as a file. This abstraction allows you to do powerful things like take the standard output of one command that would normally be displayed to your screen and use it as input to another command. It's easier to run cat file.txt | sort than it is to type the entire contents of file.txt as the input to the sort
129

 JASON CANNON
command.
To demonstrate this concept, run sort, type in some text, and press Ctrl-d on a blank line. Here is how that looks.
 $ sort
dddd
a
ccc
bb
 <<<< Type Ctrl-d here >>>>
a
bb
ccc
dddd
$ cat file.txt
dddd
a
ccc
bb
$ cat file.txt | sort
a
bb
ccc
dddd
$
I/O Name
standard input standard output standard error
Abbreviation
stdin stdout stderr
File Descriptor Number
0 1 2
Use the greater-than sign (>) to redirect output and the less-than sign (<) to redirect input. The explicit way of using redirection is to provide a
130

 LEARN LINUX IN 5 DAYS
file descriptor number, however if it is omitted then file descriptor 0 is assumed for input redirection and 1 for output redirection.
> - Redirects standard output to a file, overwriting (truncating) any existing contents of the file. If no file exists, it creates one.
>> - Redirects standard output to a file and appends to any existing contents. If no file exists, it creates one.
< - Redirects input from a file to the command preceding the less-than sign.
 $ ls -lF /opt/apache
drwxr-xr-x 2 root root 4096 Sep 14 12:21 2.3
drwxr-xr-x 2 root root 4096 Nov 27 15:43 2.4
lrwxrwxrwx 1 root root    5 Nov 27 15:43 current -> 2.4
-rw-r--r-- 1 root root 1048 Sep 14 12:58 README
$ ls -lF /opt/apache > files.txt
$ cat files.txt
drwxr-xr-x 2 root root 4096 Sep 14 12:21 2.3
drwxr-xr-x 2 root root 4096 Nov 27 15:43 2.4
lrwxrwxrwx 1 root root    5 Nov 27 15:43 current -> 2.4
-rw-r--r-- 1 root root 1048 Sep 14 12:58 README
$ ls -lF /opt/apache >> files.txt
$ cat files.txt
drwxr-xr-x 2 root root 4096 Sep 14 12:21 2.3
drwxr-xr-x 2 root root 4096 Nov 27 15:43 2.4
lrwxrwxrwx 1 root root    5 Nov 27 15:43 current -> 2.4
 -rw-r--r-- 1 root root 1048 Sep 14 12:58 README
drwxr-xr-x 2 root root 4096 Sep 14 12:21 2.3
drwxr-xr-x 2 root root 4096 Nov 27 15:43 2.4
lrwxrwxrwx 1 root root    5 Nov 27 15:43 current -> 2.4
-rw-r--r-- 1 root root 1048 Sep 14 12:58 README
$ sort < files.txt
-rw-r--r-- 1 root root 1048 Sep 14 12:58 README
-rw-r--r-- 1 root root 1048 Sep 14 12:58 README
drwxr-xr-x 2 root root 4096 Nov 27 15:43 2.3
drwxr-xr-x 2 root root 4096 Nov 27 15:43 2.3
drwxr-xr-x 2 root root 4096 Sep 14 12:21 2.4
drwxr-xr-x 2 root root 4096 Sep 14 12:21 2.4
131

 JASON CANNON
 lrwxrwxrwx 1 root root    5 Nov 27 15:43 current -> 2.4
lrwxrwxrwx 1 root root    5 Nov 27 15:43 current -> 2.4
In the above examples ls -lF /opt/apache > files.txt is the same as ls -lF /opt/apache 1> files.txt. Also, sort < files.txt is the same as sort 0< files.txt. Do not use a space between the file descriptor number and the redirection operator. The file descriptor must immediately precede the redirection operator, otherwise it will be interpreted as another item on the command line.
 $ ls -lF /opt/apache 1 > files.txt
ls: 1: No such file or directory
$ ls -lF /opt/apache 1> files.txt
$ sort 0 < files.txt
sort: open failed: 0: No such file or directory
$ sort 0< files.txt
-rw-r--r-- 1 root root 1048 Sep 14 12:58 README -rw-r--r-- 1 root root 1048 Sep 14 12:58 README drwxr-xr-x 2 root root 4096 Nov 27 15:43 2.3
drwxr-xr-x 2 root root 4096 Nov 27 15:43 2.3
drwxr-xr-x 2 root root 4096 Sep 14 12:21 2.4
drwxr-xr-x 2 root root 4096 Sep 14 12:21 2.4
lrwxrwxrwx 1 root root 5Nov27 15:43 current -> 2.4 lrwxrwxrwx 1 root root 5Nov27 15:43 current -> 2.4 $
Input and output redirection can be combined. This example shows files.txt being redirected as input for the sort command. The output of the sort command is then redirected to the
sorted_files.txt
file.
 $ sort < files.txt > sorted_files.txt
$ cat sorted_files.txt
-rw-r--r-- 1 root root 1048 Sep 14 12:58 README
-rw-r--r-- 1 root root 1048 Sep 14 12:58 README
drwxr-xr-x 2 root root 4096 Nov 27 15:43 2.3
drwxr-xr-x 2 root root 4096 Nov 27 15:43 2.3
drwxr-xr-x 2 root root 4096 Sep 14 12:21 2.4
drwxr-xr-x 2 root root 4096 Sep 14 12:21 2.4
lrwxrwxrwx 1 root root    5 Nov 27 15:43 current -> 2.4
132

 LEARN LINUX IN 5 DAYS
 lrwxrwxrwx 1 root root    5 Nov 27 15:43 current -> 2.4
Standard Error
When a program encounters an error it reports its findings to standard error. File descriptor 1 is for standard output, 2 is for standard error. Remember that file descriptor 1 is the default file descriptor for output redirection. This can mean that not all of the output generated by a program is captured by default. Here is an example.
 $ ls here not-here
ls: not-here: No such file or directory
here
$ ls here not-here > out
ls: not-here: No such file or directory
$ cat out
here
$ ls here not-here 2> out.err
here
$ cat out.err
ls: not-here: No such file or directory
$ ls here not-here 1> out 2> out.err
$ cat out
here
$ cat out.err
ls: not-here: No such file or directory
$
You will notice that when using > the error message was displayed to the screen and not redirected to the out file. To redirect the error messages you had to explicitly specify file descriptor 2 with 2>. You can send standard output to one file while sending standard error to another file. You can use this to your advantage by having one file that contains known good output and another file that you can examine for errors.
If you want to capture both standard output and standard error, use
133

 JASON CANNON
2>&1. Normally with redirection a file follows the redirection operator. If you want to use a file descriptor instead of a file name, use the ampersand (&) symbol. So instead of redirecting standard error to a file (2>out.err), redirect it to standard output (2>&1). If you omit &, 1 will be treated as a file named 1.
& - Used with redirection to signal that a file descriptor is being used instead of a file name.
2>&1 - Combine standard error and standard output. 2> file - Redirect standard error to a file.
The command, ls here not-here > out.both 2>&1 means "send the standard output of ls here not-here to file the named out.both and append standard error to standard output." Since standard error is redirected to standard output and standard output is redirected to out.both, all output will be written to out.both.
Null Device
>/dev/null - Redirect output to nowhere.
If you want to ignore output, you can send it to the null device, /dev/null. The null device is a special file that throws away whatever is fed to it. You may hear people refer to it as the bit bucket. If you do not want to see errors on your screen and you do not want to save them to a file, you can redirect them to /dev/null.
 $ ls here not-here > out.both 2>&1
$ cat out.both
ls: not-here: No such file or directory
here
$
 $ ls here not-here 2> /dev/null
here
134

 LEARN LINUX IN 5 DAYS
 $ ls here not-here > /dev/null 2>&1
$
Deep Dive
File Descriptors http://en.wikipedia.org/wiki/File_descriptor
Here Documents http://en.wikipedia.org/wiki/Here-document
Null Device http://en.wikipedia.org/wiki//dev/null
Redirection http://en.wikipedia.org/wiki/Redirection_(computing)
        135

 TRANSFERRING AND COPYING FILES
You already know how to copy files from one location to another on the same system using the cp command. But what if you want to copy files from your local workstation to a Linux server or between Linux servers? For that you can use SCP or SFTP.
SCP is secure copy and SFTP is SSH file transfer protocol. Sometimes SFTP is referred to as secure file transfer protocol. SCP and SFTP are both extensions of the secure shell (SSH) protocol. This means that if you have SSH key authentication configured for SSH, it will also work with SCP and SFTP.
In order to use SCP or SFTP you need a client. Mac and Linux come with scp and sftp command line utilities. If you are running Windows, you can use the PuTTY Secure Copy Client (pscp.exe) and the PuTTY Secure File Transfer client (psftp.exe) programs. Command line utilities aren't your only option. There are graphical clients for each platform as well. Some run on Windows, Linux, and Mac like FileZilla, while others only run on one platform like WinSCP for Windows.
136

 LEARN LINUX IN 5 DAYS
  137

 JASON CANNON
scp source destination - Copy source to destination.
sftp [username@]host - Connect to host as username to begin a
secure file transfer session.
If you are looking for a more interactive experience where you can examine the local and remote file systems, use SFTP. With SCP you need to know what files you want to transfer before using the command. Here is a sample SFTP session.
 bobby@laptop:/tmp $ sftp bob@linuxsvr
bob@linuxsvr's password:
Connected to linuxsvr.
sftp> pwd
Remote working directory: /home/bob
sftp> ls -la
drwxr-xr-x
drwxr-xr-x
-rw-r--r--
-rw-r--r--    1 bob  bob   675 Apr  3  2012 .profile
drwx------    2 bob  bob  4096 Dec 25 19:00 .ssh
sftp> lpwd
4 bob bob 4096 Dec 25 19:00 .
4 root root 4096 Dec 2 22:01 .. 1bobbob3655Dec2 22:02 .bashrc
Local working directory: /tmp
sftp> lls
file1.txt
sftp> put file1.txt
Uploading file1.txt to /home/bob/file1.txt file1.txt
100% 18 0.0KB/s 00:00
 sftp> ls
file1.txt
sftp> ls -la
drwxr-xr-x
drwxr-xr-x
-rw-r--r--
-rw-r--r--    1 bob  bob   675 Apr  3  2012 .profile
drwx------    2 bob  bob  4096 Dec 25 19:00 .ssh
-rw-rw-r--    1 bob  bob    18 Dec 25 19:02 file1.txt
sftp> quit
4 bob  bob  4096 Dec 25 19:02 .
4 root root 4096 Dec  2 22:01 ..
1 bob  bob  3655 Dec  2 22:02 .bashrc
138

 LEARN LINUX IN 5 DAYS
Using scp, you can copy from your local system to a remote system, from a remote system to your local system, or from one remote system to another remote system. Here is how that looks.
 $ scp test.txt linuxsvr1:~/
test.txt 100% 35KB 35.3KB/s 00:00
$ scp linuxsvr1:~/test.txt .
test.txt 100% 35KB 35.3KB/s 00:00
$ scp linuxsvr1:~/test.txt linuxsvr2:/tmp/test-copy.txt $
SCP and SFTP aren't the only ways to transfer files to remote systems. Sometimes FTP (file transfer protocol) is enabled. In such cases you can use the built-in ftp command on Linux and Mac and a graphical client like WinSCP for windows. Just be aware that FTP is not using a secure transfer protocol like SCP and SFTP. This means that your login credentials are sent in plain text over the network. Also, the files that you upload and download are not encrypted either. If given the choice between SCP/SFTP or FTP, use SCP/SFTP.
 bobby@laptop:~$ ftp linuxsvr
Connected to linuxsvr.
220 ubuntu FTP server (Version 6.4) ready.
Name (linuxsvr:bobby): bob
331 Password required for bob.
Password:
230 User bob logged in.
Remote system type is UNIX.
Using binary mode to transfer files.
 ftp> pwd
257 "/home/bob" is current directory.
ftp> quit
221 Goodbye.
If FTP is not enabled, you will see a "Connection refused" error message.
139

 JASON CANNON
 bobby@laptop:~$ ftp linuxsvr
ftp: connect: Connection refused
ftp> quit
bobby@laptop:~$
140

 LEARN LINUX IN 5 DAYS
Deep dive
Connecting via SSH with Keys - SSH key information covered earlier in this book.
Cyberduck - FTP and SFTP client for Mac and Windows. http://cyberduck.io/
FileZilla - FTP and SFTP client for Mac, Linux, and Windows. https://filezilla-project.org/
FireFTP - FTP and SFTP client Firefox that is Mac, Linux, and Windows compatible.
http://fireftp.net/
PuTTY http://www.LinuxTrainingAcademy.com/putty/
PSCP.EXE - SCP client for Windows
PSFTP.EXE - SFTP client for Windows
Transmit - FTP and SFTP client for Mac. http://www.panic.com/transmit/
WinSCP - FTP and SFTP client for Windows. http://winscp.net/
               141

 WELCOME BACK TO SHELL
Customizing the Prompt
As you have seen in the "Welcome To Shell" chapter, default prompts can vary from system to system. No matter what shell you are using, you can customize your prompt by setting an environment variable. For shells like bash, ksh, and sh the environment variable PS1 is used to set the primary prompt string. The shells csh, tcsh, and zsh use the prompt environment variable. The format string you place in the environment variable determines the look and feel of your prompt. Each shell uses different format strings so consult the documentation for the shell that you are using.
Let's look at customizing the bash prompt since bash is the most popular default shell for user accounts on Linux systems. These are some of the commonly used formatting string options for bash. For a complete list refer to the man page.
\d - the date in "Weekday Month Date" format (e.g., "Tue May 26") \h - the hostname up to the first '.'
142

 LEARN LINUX IN 5 DAYS
\H - the hostname
\n - newline
\t - the current time in 24-hour HH:MM:SS format
\T - the current time in 12-hour HH:MM:SS format
\@ - the current time in 12-hour am/pm format
\A - the current time in 24-hour HH:MM format
\u - the username of the current user
\w - the current working directory, with $HOME abbreviated with a tilde
\W - the basename of the current working directory, with $HOME abbreviated with a tilde
\$ - if the effective UID is 0, a #, otherwise a $
Here are some examples of changing the bash shell prompt by
manipulating the PS1 environment variable.
 [bob@linuxsvr ~]$ echo $PS1
[\u@\h \w]\$
[bob@linuxsvr ~]$ PS1="\u@\h \$ "
 bob@linuxsvr $ PS1="<\t \u@\h \w>\$ "
<16:42:58 bob@linuxsvr ~>$ cd /tmp
<16:43:02 bob@linuxsvr /tmp>$ PS1="\d \t \h \W>\$ "
Mon Nov 18 16:45:51 linuxsvr tmp>$ PS1="\t\n[\h \w]\$ "
16:46:47
[linuxsvr /tmp]$
To make your customized shell prompt persist betweens logins, add the PS1 value to your personal initialization files. Personal initialization files are commonly referred to as "dot files" since they begin with a dot or period.
143

 JASON CANNON
 $ echo 'export PS1="[\u@\h \w]\$ "' >>
~/.bash_profile
Creating Aliases
If you find yourself typing the same command over and over again, you can create a shortcut for it called an alias. An alias can be thought of as a text expander. Creating aliases for commands that are really long is also a common practice. For example, if you type ls -l frequently, you may want to abbreviate it to ll. As a matter of fact, this alias often comes predefined on many Linux distributions.
alias [name[=value]] - List or create aliases. If no arguments are provided the current list of aliases is displayed. Use name=value to create a new alias.
 $ ls -l
total 4
-rw-r--r-- 1 bob bob 221 Nov 13 11:30 file.txt
$ alias ll='ls -l'
$ ll
total 4
-rw-r--r-- 1 bob bob 221 Nov 13 11:30 file.txt
$ alias
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
alias l='ls -CF'
 alias la='ls -A'
alias ll='ls -l'
alias ls='ls --color=auto'
$
You can even use aliases to fix common typing errors. If you find yourself typing grpe when you intend to type grep, create an alias.
$ alias grpe='grep'
Aliases can be created to make your work environment similar to that of
 144

 LEARN LINUX IN 5 DAYS
another platform. For instance, in Windows cls clears the screen, but in Linux the equivalent command is clear. If you are coming from an HP-UX background you are most likely familiar with the command bdf which displays disk usage. On Linux a very similar command is df. You could create these shortcuts to help you feel more at home.
Note that if you were to log out and log back in, your aliases would be lost. To make them persist between sessions add them to one of your personal initialization files (dot files) like .bash_profile.
The downside to creating several aliases is that when you are on a system that does not have your aliases you might feel lost. If you want to be able to work effectively on any system that you have access to, keep your alias usage to a minimum. Another way to handle this situation is to copy your configuration files to each system that you work on.
Interactive vs Non-interactive Sessions
The shell behaves in slightly different ways when you log on interactively versus when you just connect to run a single command. Here is an example to better illustrate the difference between interactive and non-interactive shells.
Interactive:
 $ alias cls='clear'
$ alias bdf='df'
 mac:~ bob$ ssh linuxsvr
Last login: Thu Nov  7 01:26:37 UTC 2013
Welcome to Ubuntu 12.04.3 LTS
* Documentation: https://help.ubuntu.com/ System info as of Nov 14 01:26:52 UTC 2013 System load: 0.42
145

 Non interactive:
JASON CANNON
 Usage of /:   3.1% of 40GB
Memory usage: 32%
Swap usage:   0%
Processes:
                     89
Users logged in:     0
  IP address for eth0: 10.0.0.7
bob@linuxsvr:~$ uptime
11:49:16 up 97 days, 2:59, 5 users, load average:
0.15, 0.25, 0.31
 bob@linuxsvr:~$ ll
-rw-r--r-- 1 bob bob 221 Nov 13 11:30 file.txt
bob@linuxsvr:~$ exit
logout
Connection to 10.0.0.7 closed.
mac:~ bob$
 mac:~ bob$ ssh linuxsvr uptime
11:49:16 up 97 days, 2:59, 5 users, load average:
0.15, 0.25, 0.31
mac:~ bob$ ssh linuxsvr ll
bash: ll: command not found
mac:~ bob$
The contents of .profile or .bash_profile are only executed for interactive sessions. If you are not aware of this subtle difference it may leave you scratching your head as to why something works perfectly when you log in and type a command versus when you just ssh in to run that same command. For example, if you define an alias for ll in ~/.bash_profile it will work during an interactive session but it will not be available during a non-interactive session.
You can save yourself some hassle by making your interactive and non- interactive sessions behave the same. To do this, configure .bash_profile to reference .bashrc and put all of your configuration in .bashrc. You can read in the contents of another file
146

 LEARN LINUX IN 5 DAYS
by using the source command or dot operator.
source filename - Read and execute commands from filename and return. Any variables created or modified in filename will remain available after the script completes.
. filename-Sameassource filename.
 $ cat .bash_profile
# Put our settings in .bashrc so we have the same environment for login and non-login shells.
if [ -f ~/.bashrc ]; then
   source ~/.bashrc
fi
$ cat .bashrc
# use a vi-style line editing interface
set -o vi
# Set the prompt.
PS1="[\u@\h \w]\$ "
export PS1
# Set the PATH.
PATH=$PATH:~/bin
export PATH
# Aliases
 alias grpe='grep'
alias ll='ls -l'
alias utc='TZ=UTC date'
alias vi='vim'
Now the aliases you have defined are available during interactive and non-interactive sessions. Here is how the sessions behave after this change.
147

 Interactive:
JASON CANNON
 mac:~ bob$ ssh linuxsvr
Last login: Thu Nov  7 01:26:37 UTC 2013
Welcome to Ubuntu 12.04.3 LTS
* Documentation: https://help.ubuntu.com/ System info as of Nov 14 01:26:52 UTC 2013
   System load:  0.42
  Usage of /:   3.1% of 40GB
  Memory usage: 32%
  Swap usage:   0%
  Processes:
  Users logged in:     0
  IP address for eth0: 10.0.0.7
bob@linuxsvr:~$ ll
-rw-r--r-- 1 bob bob 221 Nov 13 11:30 file.txt
bob@linuxsvr:~$ exit
logout
Connection to 10.0.0.7 closed.
mac:~ bob$
89
Non interactive:
Comments
In the above examples you might have noticed the octothorpe (#) followed by some very human like text in the ~/.bash_profile and ~/.bashrc files. Any text that follows an octothorpe is ignored by the shell. This is a very common pattern that not only works for shells, but also for several computer programming languages. This construct allows comments and annotations to be used without effecting the execution
 mac:~ bob$ ssh linuxsvr ll
-rw-r--r-- 1 bob bob 221 Nov 13 11:30 file.txt
mac:~ bob$
148

 LEARN LINUX IN 5 DAYS
of a program or script.
# - Octothorpe. Also known as a hash, square, pound sign, or number sign. This symbol precedes comments.
 $ # This does nothing.
$ This does something.
This: command not found
$ alias # Show my aliases.
alias egrep='egrep --color=auto'
 alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
alias l='ls -CF'
alias la='ls -A'
alias ll='ls -l'
alias ls='ls --color=auto'
$
Shell History
The shell keeps a record of the commands you have previously executed. Bash keeps its history in memory for the current session and in the ~/.bash_history file so that it can be recalled during future sessions. Other shells may use ~/.history, ~/.zsh_history, or other similarly named files. Having access to your shell history is extremely useful because it allows you to quickly repeat commands. This can save you time, save keystrokes, prevent you from making mistakes by running a previously known good command, and generally speed up your work flow.
history - Display a list of commands in the shell history. !N - Repeat command line number N.
!! - Repeat the previous command line.
!string - Repeat the most recent command starting with "string."
149

 JASON CANNON
 $ history
1 ls
2 diff secret secret.bak
3 history
$ !1
ls
PerformanceReviews tpsreports
$ echo $SHELL
/bin/bash
$ !!
 echo $SHELL
/bin/bash
$ !d
diff secret secret.bak
3c3
< pass: Abee!
---
> pass: bee
$
With the exclamation mark history expansion syntax you can rerun a command by number. In the above example the first command in the history was executed with !1. If you want to execute the second command you would execute !2. Another convenient shortcut is !-N which means execute the Nth previous command. If you want to execute the second to last command type !-2. Since !! repeats the most recent command, it is the same as !-1.
 $ history
 1 ls
2 diff secret secret.bak
3 history
$ !-2
diff secret secret.bak
3c3
< pass: Abee!
---
> pass: bee
$
150

 LEARN LINUX IN 5 DAYS
By default bash retains 500 commands in your shell history. This is controlled by the HISTSIZE environment variable. If you want to increase this number add export HISTSIZE=1000 or something similar to your personal initialization files.
Ctrl-r - Reverse search. Search for commands in your shell history.
You can search for commands in your history. For example, if you have the command find /var/tmp -type f in your shell history you could find it by typing Ctrl-r fi Enter. Ctrl-r initiates the reverse search and displays the search prompt, fi is the search string, and Enter executes the command that was found. You do not have to search for the start of the string. You could have very well searched for "var", "tmp", or "type."
 $ find /var/tmp -type f
/var/tmp/file.txt
(reverse-i-search)`fi': find /var/tmp -type f /var/tmp/file.txt
Tab Completion
Another way to increase your efficiency at the shell is by using tab completion. After you start typing a command you can hit the Tab key to invoke tab completion. Tab attempts to automatically complete partially typed commands. If there are multiple commands that begin with the string that precedes Tab, those commands will be displayed. You can continue to type and press Tab again. When there is only one possibility remaining, pressing the Tab key will complete the command.
Tab - Autocompletes commands and filenames.
151

 JASON CANNON
 $ # Typing who[Tab][Tab] results in:
$ who
who     whoami
$ # Typing whoa[Tab][Enter] results in:
$ whoami
bob $
Tab completion not only works on commands, but it also works on files and directories. If you have files that start with a common prefix, Tab will expand the common component. For example, if you have two files namedfile1.txtandfile2.txt,typingcat f Tabwillexpand the command line to cat file. You can then continue typing or press Tab twice to list the possible expansions. Typing cat f Tab 2 Tab will expand to cat file2.txt. After you experiment with tab completion it will soon become second nature.
 $ # Typing cat f[Tab] results in:
$ cat file
$ # Typing: cat f[Tab][Tab][Tab] results in:
$ cat file
file1.txt file2.txt
$ # Typing cat f[Tab] 2[Tab][Enter] results in: $ cat file2.txt
This is file2!!!
$
Shell Command Line Editing
From time to time you will want to change something on your current command line. Maybe you noticed a spelling mistake at the front of the line or need to add an additional option to the current command. You may also find yourself wanting to recall a command from your shell history and modify it slightly to fit the current situation. Command line editing makes these types of activities possible.
Shells such as bash, ksh, tcsh, and zsh provide two command line editing
152

 Shell Emacs Mode
bash set -o emacs ksh set -o emacs tcsh bindkey -e zsh bindkey -e zsh set -o emacs
Emacs Mode
Vi Mode
set -o vi set -o vi bindkey -v bindkey -v set -o vi
Default Mode
emacs none emacs emacs emacs
LEARN LINUX IN 5 DAYS
modes. They are emacs, which is typically the default mode, and vi. Depending on the shell you can change editing modes by using the set or bindkey command. If you want to ensure your preferred mode is set upon login, add one of the two commands to your personal initialization files.
As you would expect, in emacs command line editing mode you can use the key bindings found in the emacs editor. For example, to move to the beginning of the command line type Ctrl-a. To recall the previous command type Ctrl-p.
Esc Esc - Escape completion. Similar to tab completion. Ctrl-b - Move cursor to the left (back)
Ctrl-f - Move cursor to the right (forward)
Ctrl-p - Up (Previous command line)
Ctrl-n - Down (Next command line)
153

 JASON CANNON
Ctrl-e - Move to the end of the line Ctrl-a - Move to the beginning of the line
Ctrl-x Ctrl-e - Edit the current command line in the editor defined by the $EDITOR environment variable.
See the section in this book on the emacs editor for more key bindings.
Vi Mode
When you are using vi command line editing mode you start in insert mode so you can quickly type commands. To enter command mode, press Esc. To move to the previous command, for example, type Esc k. To resume editing enter insert mode by pressing i, I, a, or A.
Esc - Enter command mode.
Key bindings in command mode:
\ - Vi style file completion. Similar to tab completion. h - Move cursor left
k - Up (Previous command line)
j - Down (Next command line)
l - Move cursor right
$ - Move to the end of the line
^ - Move to the beginning of the line
i - Enter insert mode.
a - Enter insert mode, append text at current location.
154

 LEARN LINUX IN 5 DAYS
A - Enter insert mode, append text at end of line.
I - Enter insert edit mode, prepend text to start of line.
v - Edit the current command line in the editor defined by the $EDITOR environment variable.
See the section in this book on the vi editor for more key bindings.
Dealing with Long Shell Commands
The backslash (\) is the line continuation character. You have learned how to use the backslash to escape special characters like spaces. However, when a backslash is placed at the end of a line it is used as a line continuation character. This allows you to create command lines that are displayed as multiple lines but are executed as a single command line by the shell. You can use line continuation to make commands more readable and easier to understand.
  $ echo "one two three"
one two three
$ echo "one \
> two \
> three"
one two three
$ echo "onetwothree"
 onetwothree
$ echo "one\
> two\
> three"
onetwothree
$
Notice the greater-than symbol (>) in the above example. It is the secondary prompt string and can be customized by changing the PS2 environment variable. You learned previously how to change the primary prompt string with PS1 in the “Customizing the Prompt” section
155

 of this book.
JASON CANNON
 $ PS2="line continued: "
$ echo "one \
line continued: two \
line continued: three"
one two three
$
Environment Variables
You have already been introduced to environment variables and have put them to good use. To recap, an environment variable is a storage location that has a name and a value. They often effect the way programs behave. For example, you learned how to inform various programs about your preferred editor by defining the $EDITOR environment variable.
Common Environment Variables
Variable
EDITOR HOME LOGNAME MAIL OLDPWD
PATH PAGER
Description
The program to run to perform edits. The Home directory of the user.
The login name of the user.
The location of the user's local inbox. The previous working directory.
A colon separated list of directories to search for commands.
This program may be called to view a file.
156

 LEARN LINUX IN 5 DAYS
Variable Description
PS1 The primary prompt string. PWD The present working directory. USER The username of the user.
Viewing Environment Variables
If you know the name of the environment variable that you want to examine, you can run echo $VARIABLE_NAME or printenv VARIABLE_NAME. If you want to examine all the environment variables that are set, use the env or printenv commands.
printenv - Print all or part of environment.
 $ printenv HOME
/home/bob
$ echo $HOME
/home/bob
$ printenv
TERM=xterm-256color SHELL=/bin/bash
USER=bob PATH=/usr/local/bin:/usr/bin:/bin
 MAIL=/var/mail/bob
PWD=/home/bob
LANG=en_US.UTF-8
HOME=/home/bob
LOGNAME=bob
$ env
TERM=xterm-256color SHELL=/bin/bash
USER=bob PATH=/usr/local/bin:/usr/bin:/bin MAIL=/var/mail/bob
157

 JASON CANNON
 PWD=/home/bob
LANG=en_US.UTF-8
HOME=/home/bob
LOGNAME=bob
$
Exporting Environment Variables
When a process is started it inherits the exported environment variables of the process that spawned it. A variable that is set or changed only effects the current running process unless it is exported. The variables that are not exported are called local variables. The export command allows variables to be used by subsequently executed commands. Here is an example.
 $ echo $PAGER
$ PAGER=less
$ echo $PAGER
less
$ bash
$ echo $PAGER
$ exit
exit
$ export PAGER=less
$ bash
$ echo $PAGER
 less
$ exit
exit
$
In the above example PAGER was defined in the current environment. When you start a child process it inherits all the environment variables that were exported in your current environment. Since PAGER was not exported it was not set in the spawned bash shell. When you exported PAGER you saw that it was indeed available in the child process.
158

 LEARN LINUX IN 5 DAYS
Removing Variables from the Environment
You can use unset to remove or delete an environment variable.
 $ echo $PAGER
less
$ unset PAGER
$ echo $PAGER
$
Deep Dive
Bash it - A framework for managing your bash configuration. https://github.com/revans/bash-it
Command Line Completion - Tab completion explained. http://en.wikipedia.org/wiki/Command-line_completion
Configuration Files for Shell - A list of files used to configure shell environments. http://en.wikipedia.org/wiki/Unix_shell#Configuration_files_for _shells
Dotfiles.org - A place to upload, download, and share your dotfiles.
http://dotfiles.org/
Dotfiles.github.io - A guide to dotfiles on github.com. http://dotfiles.github.io/
Oh my ZSH - A community-driven framework for managing your zsh configuration.
https://github.com/robbyrussell/oh-my-zsh
             159

 JASON CANNON
 Shells
Using Bash History Interactively - Official Bash history documentation. http://www.gnu.org/software/bash/manual/bashref.html#Usin g-History-Interactively
Unix Shell - An article on the shell user interface. https://en.wikipedia.org/wiki/Unix_shell
 Bourne Shell https://en.wikipedia.org/wiki/Bourne_shell
Bash https://www.gnu.org/software/bash/
C Shell https://en.wikipedia.org/wiki/C_shell
Korn Shell http://www.kornshell.com/
tcsh http://www.tcsh.org/
Z Shell http://www.zsh.org/
                160

 DAY 5
161

 JASON CANNON
PROCESSES AND JOB CONTROL
Listing Processes and Displaying Information
To display the currently running processes use the ps command. If no options are specified, ps displays the processes associated with your current session. To see every process including ones that are not owned by you, use ps -e. To see processes running by a specific user, use ps -u username.
ps - Display process status. Common ps options:
-e - Everything, all processes.
162

 LEARN LINUX IN 5 DAYS
-f - Full format listing.
-u username - Display processes running as username.
-p pid - Display process information for pid. A PID is a process ID. Common ps commands:
ps -e - Display all processes.
ps -ef - Display all processes.
ps -eH - Display a process tree.
ps -e --forest - Display a process tree.
ps -u username - Display processes running as username.
 $ ps
PID TTY
19511 pts/2
19554 pts/2
$ ps -p 19511
    TIME CMD
00:00:00 bash
00:00:00 ps
    TIME CMD
00:00:00 bash
  PID TTY
19511 pts/2
$ ps -f
UID
bob
bob
    TIME CMD
00:00:00 -bash
00:00:00 ps -f
  PID  PPID  C STIME TTY
19511 19509  0 16:50 pts/2
19556 19511  0 16:50 pts/2
 $ ps -e | head
  PID TTY
1? 2? 3? 5? 7? 8? 9?
10 ?
    TIME CMD
00:00:02 init
00:00:00 kthreadd
00:00:19 ksoftirqd/0
00:00:00 kworker/0:0H
00:00:00 migration/0
00:00:00 rcu_bh
00:00:17 rcu_sched
00:00:12 watchdog/0
00:00:00 khelper
   11 ?
$ ps -ef | head
UID        PID  PPID  C STIME TTY
TIME CMD
163

 JASON CANNON
 root         1
root         2
root         3
root         5
root         7
root         8
root         9
root        10
root        11
$ ps -fu www-data
UID        PID  PPID  C STIME TTY
00:00:02 /sbin/init
00:00:00 [kthreadd]
00:00:19 [ksoftirqd/0]
00:00:00 [kworker/0:0H]
00:00:00 [migration/0]
00:00:00 [rcu_bh]
00:00:17 [rcu_sched]
00:00:12 [watchdog/0]
00:00:00 [khelper]
TIME CMD
0  0 Dec27 ?
0  0 Dec27 ?
2  0 Dec27 ?
2  0 Dec27 ?
2  0 Dec27 ?
2  0 Dec27 ?
2  0 Dec27 ?
2  0 Dec27 ?
2  0 Dec27 ?
 www-data   941   938  0 Dec27 ?    00:00:00
/usr/sbin/apache2 -k start
www-data   942   938  0 Dec27 ?    00:00:00
/usr/sbin/apache2 -k start
www-data   943   938  0 Dec27 ?    00:00:00
/usr/sbin/apache2 -k start
Here are other commands that allow you to view running processes. pstree - Display running processes in a tree format.
htop - Interactive process viewer. This command is less common than top and may not be available on the system.
top - Interactive process viewer.
Running Processes in the Foreground and
Background
Up until this point all the commands you have been executing have been running in the foreground. When a command, process, or program is running in the foreground the shell prompt will not be displayed until that process exits. For long running programs it can be convenient to send them to the background. Processes that are backgrounded still execute and perform their task, however they do not block you from entering further commands at the shell prompt. To background a process, place an ampersand (&) at the end of the command.
164

 LEARN LINUX IN 5 DAYS
command & - Start command in the background. Ctrl-c - Kill the foreground process.
Ctrl-z - Suspend the foreground process.
bg [%num] - Background a suspended process.
fg [%num] - Foreground a background process. kill [%num] - Kill a process by job number or PID. jobs [%num]-Listjobs.
 $ ./long-running-program &
[1] 22686
$ ps -p 22686
PID TTY TIME CMD
22686 pts/1 00:00:00 long-running-pr $ jobs
[1]+ Running ./long-running-program & $ fg
./long-running-program
When a command is backgrounded two numbers are displayed. The number in brackets is the job number and can be referred by preceding it with the percent sign. The second number is the PID. Here is what it looks like to start multiple processes in the background.
 $ ./long-running-program &
[1] 22703
$ ./long-running-program &
[2] 22705
$ ./long-running-program &
[3] 22707
$ ./long-running-program &
[4] 22709
165

 JASON CANNON
 $ jobs
[1] Done
[2] Done
[3]-  Running
[4]+  Running
./long-running-program
./long-running-program
./long-running-program &
./long-running-program &
The plus sign (+) in the jobs output represents the current job while the minus sign (-) represents the previous job. The current job is considered to be the last job that was stopped while it was in the foreground or the last job started in the background. The current job can be referred to by %% or %+. If no job information is supplied to the fg or bg commands, the current job is operated upon. The previous job can be referred to by %-.
You will notice that jobs number 1 and 2 are reported as being done. The shell does not interrupt your current command line, but will report job statuses right before a new prompt is displayed. For example, if you start a program in the background a prompt is returned. The shell will not report the status of the job until a new prompt is displayed. You can request a new prompt be displayed by simply hitting Enter.
To bring a job back to the foreground, type the name of the job or use the fg command. To foreground the current job execute %%, %+, fg, fg %%, fg %+, or fg %num. To foreground job number 3, execute %3 orfg %3.
To pause or suspend a job that is running in the foreground, type Ctrl-z. Once a job is suspended it can be resumed in the foreground or background. To background a suspended job type the name of the job followed by an ampersand or use bg followed by the job name.
$ jobs
 $ jobs
 [3]- Running ./long-running-program & [4]+ Running ./long-running-program & $ fg %3
./long-running-program
 166

 LEARN LINUX IN 5 DAYS
 [1] Running ./long-running-program & [2]- Running ./long-running-program & [3]+ Running ./another-program &
$ fg
./another-program
^Z
[3]+  Stopped
$ jobs
[1]   Running
[2]-  Running
./another-program
./long-running-program &
./long-running-program &
 [3]+  Stopped   ./another-program
$ bg %3
[3]+ ./another-program &
$ jobs
[1] Running ./long-running-program & [2]- Running ./long-running-program & [3]+ Running ./another-program &
You can stop or kill a background job using the kill command. For example, to kill job number 1 execute kill %1. To kill a job that is running in the foreground, type Ctrl-c.
 $ jobs
[1]   Running
[2]-  Running
[3]+  Running
$ kill %1
[1]   Terminated
$ jobs
[2]-  Running
./long-running-program &
./long-running-program &
./another-program &
./long-running-program
./long-running-program &
 [3]+  Running     ./another-program &
$ fg %2
./long-running-program
^C
$ jobs
[3]+  Running     ./another-program &
$
167

 JASON CANNON
Killing Processes
Ctrl-c - Kills the foreground process.
kill [signal] pid - Send a signal to a process. kill -l-Displayalistofsignals.
The default signal used by kill is termination. You will see this signal referred to as SIGTERM or TERM for short. Signals have numbers that correspond to their names. The default TERM signal is number 15. So running kill pid, kill -15 pid, and kill -TERM pid are all equivalent. If a process does not terminate when you send it the TERM signal, use the KILL signal which is number 9.
 $ ps | grep hard-to-stop
27398 pts/1    00:00:00 hard-to-stop
$ kill 27398
$ ps | grep hard-to-stop
27398 pts/1    00:00:00 hard-to-stop
$ kill -9 27398
$ ps | grep hard-to-stop
$
Deep Dive
Bash Documentation on Job Control http://gnu.org/software/bash/manual/html_node/Job- Control.html
   168

 SCHEDULING REPEATED JOBS WITH CRON
If you need to repeat a task on a schedule, you can use the cron service. Every minute the cron service checks to see if there are any scheduled jobs to run and if so runs them. Cron jobs are often used to automate a process or perform routine maintenance. You can schedule cron jobs by using the crontab command.
cron - A time based job scheduling service. This service is typically started when the system boots.
crontab - A program to create, read, update, and delete your job schedules.
A crontab (cron table) is a configuration file that specifies when commands are to be executed by cron. Each line in a crontab represents a job and contains two pieces of information: 1) when to run and 2) what to run. The time specification consists of five fields. They are minutes, hour, day of the month, month, and day of the week. After the time specification you provide the command to be executed.
169

 Crontab Format
JASON CANNON
 * * * * * command
|||||
| | | | +-- Day of the Week (0-6) | | | +---- Month of the Year (1-12) | | +------ Day of the Month (1-31) | +-------- Hour (0-23) +---------- Minute (0-59)
The command will only be executed when all of the time specification fields match the current date and time. You can specify that a command be run only once, but this is not the typical use case for cron. Typically, one or more of the time specification fields will contain an asterisk (*) which matches any time or date for that field. Here is an example crontab.
Here is a graphical representation of the above crontab entry.
 # Run every Monday at 07:00.
0 7 * * 1 /opt/sales/bin/weekly-report
 0 7 * * 1 /opt/sales/bin/weekly-report |||||
| | | | +-- Day of the Week (0-6)
| | | +---- Month of the Year (1-12)
| | +------ Day of the Month  (1-31)
| +-------- Hour              (0-23)
 +---------- Minute            (0-59)
This job will run only when the minute is 0, the hour is 7, and the day of the week is 1. In the day of the week field 0 represents Sunday, 1 Monday, etc. This job will run on any day and during any month since the asterisk was used for those two fields.
If any output is generated by the command it is mailed to you. You can check your local mail with the mail command. If you would prefer not to get email you can redirect the output of the command as in this
170

 LEARN LINUX IN 5 DAYS
example.
You can provide multiple values for each of the fields. If you would like to run a command every half-hour, you could do this.
Instead of using 0,30 for the minute field you could have used */2. You can even use ranges with a dash. If you want to run a job every minute for the first four minutes of the hour you can use this time specification:0-4 * * * * command.
There are several implementations of the cron scheduler and some allow you to use shortcuts and keywords in your crontabs. Common keywords have been provided below, but refer to the documentation for cron on your system to ensure these will work.
 # Run at 02:00 every day and send output to a log.
0 2 * * * /opt/acme/bin/backup > /tmp/backup.log 2>&1
 # Run every 30 minutes.
0,30 * * * * /opt/acme/bin/half-hour-check
 # Another way to do the same thing.
*/2 * * * * /opt/acme/bin/half-hour-check
171

 Keyword
@yearly @annually @monthly
@weekly
@daily @midnight
@hourly @reboot
Description Equivalent
crontab
crontab
crontab
-l - List your cron jobs.
-e - Edit your cron jobs.
-r - Remove all of your cron jobs.
JASON CANNON
Run once a year at midnight in the morning of January 1
Same as @yearly
Run once a month at midnight in the morning of the first day of the month
Run once a week at midnight in the morning of Sunday
Run once a day at midnight Same as @daily
Run once an hour at the beginning of the hour
00 11* 00 11* 00 1**
00 **0
00 *** 00 ***
0* ***
Run at startup N/A
Using the Crontab Command
Use the crontab command to manipulate cron jobs. crontab file - Install a new crontab from file.
172

 LEARN LINUX IN 5 DAYS
 $ crontab -l
no crontab for bob
$ cat my-cron
# Run every Monday at 07:00.
0 7 * * 1 /opt/sales/bin/weekly-report
$ crontab my-cron
$ crontab -l
# Run every Monday at 07:00.
0 7 * * 1 /opt/sales/bin/weekly-report
$ crontab -e
 # $EDITOR is invoked.
$ crontab -r
$ crontab -l
no crontab for bob
$
Deep Dive
CronWFT - Decodes crontab lines. Print out human readable output.
http://cronwtf.github.io/
CronMaker - A utility which helps you to build cron expressions. http://www.cronmaker.com/
    173

 SWITCHING USERS AND RUNNING COMMANDS AS OTHERS
su
One way to start a session as another user on the system is to use the su command. If no arguments are supplied to su, it assumes you are trying to become the superuser. Executing su is the same as executing su root. Your current environment is passed to the new shell unless you specify a hyphen (-). In that case, su creates an environment like you would expect to see had you logged in as that user.
su [username] - Change user ID or become superuser Common su options:
- - A hyphen is used to provide an environment similar to what the user would expect had the user logged in directly.
-c command - Specify a command to be executed. If the command is more than one word in length, it needs to be quoted.
174

 LEARN LINUX IN 5 DAYS
 bob@linuxsvr:~$ export TEST=1 bob@linuxsvr:~$ su oracle
Password:
oracle@linuxsvr:/home/bob$ echo $TEST 1
oracle@linuxsvr:/home/bob$ pwd
/home/bob
oracle@linuxsvr:/home/bob$ exit
exit
 bob@linuxsvr:~$ su - oracle
Password:
oracle@linuxsvr:~$ echo $TEST
oracle@linuxsvr:~$ pwd
/home/oracle
oracle@linuxsvr:~$ exit
bob@linuxsvr:~$ su -c 'echo $ORACLE_HOME' oracle Password:
bob@linuxsvr:~$ su -c 'echo $ORACLE_HOME' - oracle Password:
/u01/app/oracle/product/current
bob@linuxsvr:~$
If you want to know what user you are working as, run the whoami command.
whoami - Displays the effective username.
 $ whoami
bob
$ su oracle
Password:
$ whoami
oracle
$
175

 JASON CANNON
Sudo - Super User Do
Another way to switch users or execute commands as others is to use the sudo command. Sudo allows you to run programs with the security privileges of another user. Like su, if no username is specified it assumes you are trying to run commands as the superuser. This is why sudo is referred to as super user do. It is commonly used to install, start, and stop applications that require superuser privileges.
sudo - Execute a command as another user, typically the superuser.
One advantage of using sudo over the su command is that you do not need to know the password of the other user. This can eliminate the issues that arise from using shared passwords and generic accounts. When you execute the sudo command you are prompted for your password. If the sudo configuration permits access, the command is executed. The sudo configuration is typically controlled by the system administrator and requires root access to change.
Using Sudo
Here are the common ways to use the sudo command. sudo -l-Listavailablecommands.
sudo command - Run command as the superuser.
sudo -u root command - Same as sudo command. sudo -u user command-Runcommandasuser.
sudo su - Switch to the superuser account.
sudo su - - Switch to the superuser account with an environment
like you would expect to see had you logged in as that user.
176

 LEARN LINUX IN 5 DAYS
sudo su - username - Switch to the username account with an environment like you would expect to see had you logged in as that user.
 $ sudo -l
User bob may run the following commands on this host: (root) NOPASSWD: /etc/init.d/apache2
(fred) NOPASSWD: /opt/fredApp/bin/start
(fred) NOPASSWD: /opt/fredApp/bin/stop
(root) /bin/su - oracle
 $ sudo /etc/init.d/apache2 start
 * Starting web server apache2
$ sudo -u fred /opt/fredApp/bin/start
Fred's app started as user fred.
$ sudo su - oracle
[sudo] password for bob:
oracle@linuxsvr:~$ whoami
oracle
oracle@linuxsvr:~$ exit
$ whoami
bob
$
The output of sudo -l displays what commands can be executed with sudo and under which account. In the above example, sudo will not prompt for a password for the commands preceded with NOPASSWD. This type of configuration may be required to automate jobs via cron that require escalated privileges.
177

 Deep Dive
The su command http://www.linfo.org/su.html
Sudo - The official sudo website. http://www.sudo.ws/sudo/
Ubuntu Sudo Documentation http://help.ubuntu.com/community/RootSudo
JASON CANNON
      178

 INSTALLING SOFTWARE
Typically when you install software on a Linux system you do so with a package. A package is a collection of files that make up an application. Additionally, a package contains data about the application as well as any steps required to successfully install and remove that application. The data, or metadata, that is contained within a package can include information such as the description of the application, the version of the application, and a list of other packages that it depends on. In order to install or remove a package you need to use superuser privileges.
A package manager is used to install, upgrade, and remove packages. Any additional software that is required for a package to function properly is known as a dependency. The package manager uses a package's metadata to automatically install the dependencies. Package managers keep track of what files belong to what packages, what packages are installed, and what versions of those packages are installed.
179

 JASON CANNON
Installing Software on CentOS, Fedora, and RedHat Distributions
The yum command line utility is a package management program for Linux distributions that use the RPM package manager. CentOS, Fedora, Oracle Linux, RedHat Enterprise Linux, and Scientific Linux are RPM based distributions on which you can use yum.
yum search search-string - Search for search-string.
yum install [-y] package - Install package. Use the -y option
to automatically answer yes to yum's questions.
yum remove package - Remove/uninstall package.
yum info [package]-Displayinformationaboutpackage.
To search for software to install, use yum search search- string.
 $ yum search inkscape
Loaded plugins: refresh-packagekit, security ============= N/S Matched: inkscape ============= inkscape-docs.i686 : Documentation for Inkscape inkscape.i686 : Vector-based drawing program using SVG
inkscape-view.i686 : Viewing program for SVG files
 Name and summary matches only, use "search all" for everything.
$
To install software, use yum install package. Installing software requires superuser privileges. This means you need to use sudo or switch to the root account with the su command.
 $ sudo yum install inkscape
[sudo] password for bob:
180

 LEARN LINUX IN 5 DAYS
 Loaded plugins: refresh-packagekit, security Setting up Install Process
Resolving Dependencies
--> Running transaction check
---> Package inkscape.i686 0:0.47-6.el6 will be installed
--> Processing Dependency: python for package: ...
Dependencies Resolved =====================================================
  Package     Arch  Version           Repository
Size
===================================================== Installing:
 inkscape    i686  0.47-6.el6       base
Installing for dependencies:
ImageMagick i686 6.5.4.7-7.el6_5 updates ...
8.6 M 1.7 M
Transaction Summary ===================================================== Install 21 Package(s)
Total download size: 21 M
Installed size: 97 M
Is this ok [y/N]: y
Downloading Packages:
(1/21): ImageMagick-6.5.4.7-7.el6_5.i686.rpm ...
Installed:
  inkscape.i686 0:0.47-6.el6
 Dependency Installed: ImageMagick.i686 0:6.5.4.7-7.el6_5
...
Complete!
To uninstall a package, use yum remove. Removing software requires superuser privileges.
 $ sudo yum remove inkscape
Loaded plugins: refresh-packagekit, security
181

 JASON CANNON
 Setting up Remove Process
Resolving Dependencies
--> Running transaction check
---> Package inkscape.i686 0:0.47-6.el6 will be erased
--> Finished Dependency Resolution
Dependencies Resolved =====================================================
 Package Arch Version Repository Size ===================================================== Removing:
 inkscape  i686   0.47-6.el6    @base            37 M
Transaction Summary ===================================================== Remove 1 Package(s)
Installed size: 37 M
Is this ok [y/N]: y
Downloading Packages:
Running rpm_check_debug
Running Transaction Test
Transaction Test Succeeded
Running Transaction
Erasing : inkscape-0.47-6.el6.i686 1/1 Verifying : inkscape-0.47-6.el6.i686 1/1
Removed:
   inkscape.i686 0:0.47-6.el6
Complete! $
The rpm Command
In addition to the yum command, you can use the rpm command to
interact with the package manager.
182

 LEARN LINUX IN 5 DAYS
rpm -qa - List all the installed packages.
rpm -qf /path/to/file-Listthepackagethatcontainsfile.
rpm -ivh package.rpm - Install a package from the file named package.rpm.
rpm -ql package - List all files that belong to package.
 $ rpm -qa | sort | head
 acl-2.2.49-6.el6.i686 acpid-1.0.10-2.1.el6.i686 aic94xx-firmware-30-2.el6.noarch alsa-lib-1.0.22-3.el6.i686 alsa-plugins-pulseaudio-1.0.21-3.el6.i686 alsa-utils-1.0.22-5.el6.i686 anaconda-13.21.215-1.el6.centos.i686 anaconda-yum-plugins-1.0-5.1.el6.noarch apache-tomcat-apis-0.1-1.el6.noarch apr-1.3.9-5.el6_2.i686
$ rpm -qf /usr/bin/which
which-2.19-6.el6.i686
$ sudo rpm -ivh SpiderOak-5.0.3-1.i386.rpm
[sudo] password for bob:
Preparing... ####################### [100%]
1:SpiderOak ####################### [100%] $
Installing Software on Debian and Ubuntu
The Debian and Ubuntu distributions use a package manager called APT, the Advanced Packaging Tool. APT is comprised of a few small utilities with the two most commonly used ones being apt-cache and apt- get.
apt-cache search search-string - Search for search-string. apt-get install [-y] package - Install package. Use the -y
option to automatically answer yes to apt-get's questions.
183

 JASON CANNON
apt-get remove package - Remove/uninstall package, leaving behind configuration files.
apt-get purge package - Remove/uninstall package, deleting configuration files.
apt-cache show package - Display information about package. To search for software to install, use apt-cache search search-
string.
 $ apt-cache search inkscape
create-resources - shared resources for use by creative applications
inkscape - vector-based drawing program python-scour - SVG scrubber and optimizer fonts-opendin - Open DIN font
fonts-rufscript - handwriting-based font for Latin characters
ink-generator - Inkscape extension to automatically generate files from a template
lyx - document processor
robocut - Control program for Graphtec cutting plotters
sozi - inkscape extension for creating animated presentations
ttf-rufscript - handwriting-based font for Latin characters (transitional dummy package)
$
To install software, use apt-get install package. Installing software requires superuser privileges. This means you need to use sudo or switch to the root account with the su command.
 $ sudo apt-get install inkscape
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following extra packages will be installed:
aspell aspell-en cmap-adobe-japan1 dbus-x11
184

 LEARN LINUX IN 5 DAYS
 ...
3 upgraded, 74 newly installed, 0 to remove and 96 not upgraded.
Need to get 62.7 MB of archives.
After this operation, 171 MB of additional disk space will be used.
Do you want to continue [Y/n]? y
...
Setting up perlmagick (8:6.6.9.7-5ubuntu3.2) ... Processing triggers for libc-bin ...
 ldconfig deferred processing now taking place $
To uninstall a package, use apt-get remove. Removing software requires superuser privileges.
 $ sudo apt-get remove inkscape
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following packages will be REMOVED:
inkscape
0 upgraded, 0 newly installed, 1 to remove and 96 not upgraded.
After this operation, 64.9 MB disk space will be freed.
Do you want to continue [Y/n]? y
(Reading database ... 69841 files and directories currently installed.)
Removing inkscape ...
 Processing triggers for man-db ...
Processing triggers for hicolor-icon-theme ... $
The dpkg Command
In addition the apt utilities, you can use the dpkg command to
interact with the package manager. dgpk -l - List all the installed packages.
185

 JASON CANNON
dpkg -S /path/to/file-Listthepackagethatcontainsfile. dpkg -i package.deb - Install a package from the file named
package.deb.
dpkg -L package - List all files that belong to package.
 $ dpkg –l | head
 Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half- inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name Version
Description +++-==================-============-================= ii accountsservice 0.6.15-2ubuntu9.6 query and manipulate user account information
ii acpid 1:2.0.10-1ubuntu3 Advanced Configuration and Power Interface event daemon
ii adduser 3.113ubuntu2 add and remove users and groups
ii apparmor 2.7.102-0ubuntu3.9 User- space parser utility for AppArmor
ii apport 2.0.1-0ubuntu17.5
automatically generate crash reports for debugging
$ dpkg -S /usr/bin/which
debianutils: /usr/bin/which
 $ sudo dpkg -i spideroak_5.1.3_i386.deb
[sudo] password for bob:
Selecting previously unselected package spideroak. (Reading database ... 153942 files and directories currently installed.)
Unpacking spideroak (from spideroak_5.1.3_i386.deb) ...
Setting up spideroak (1:5.1.3) ...
Processing triggers for man-db ...
Processing triggers for desktop-file-utils ... Processing triggers for bamfdaemon ...
186

 LEARN LINUX IN 5 DAYS
 Rebuilding /usr/share/applications/bamf.index... Processing triggers for gnome-menus ...
$
Free Video on Installing Linux Software
If you would like to see exactly what it's like to install software on a Linux system, check out this video that I put together for you: http://www.linuxtrainingacademy.com/installing/
 187

 JASON CANNON
Deep Dive
Managing Software with Yum https://www.centos.org/docs/5/html/yum/
AptGet Howto https://help.ubuntu.com/community/AptGet/Howto
Ubuntu - Installing Software https://help.ubuntu.com/community/InstallingSoftware
Installing Linux Software Video http://www.linuxtrainingacademy.com/installing/
        188

 THE END AND THE BEGINNING
Even though this is the end of this book, I sincerely hope that it is just the beginning of your Linux journey. Linux has been growing steadily in popularity since its release in 1991. You will find Linux running on phones, laptops, servers, supercomputers, industrial equipment, and even on medical devices. The possibilities for learning, exploring, and growing are endless.
189

 ABOUT THE AUTHOR
Jason Cannon started his career as a Unix and Linux System Engineer in 1999. Since that time he has utilized his Linux skills at companies such as Xerox, UPS, Hewlett-Packard, and Amazon.com. Additionally, he has acted as a technical consultant and independent contractor for small to medium businesses.
Jason has professional experience with CentOS, RedHat Enterprise Linux, SUSE Linux Enterprise Server, and Ubuntu. He has used several Linux distributions on personal projects including Debian, Slackware, CrunchBang, and others. In addition to Linux, Jason has experience supporting proprietary Unix operating systems including AIX, HP-UX, and Solaris.
He enjoys teaching others how to use and exploit the power of the Linux operating system and teaches online video training courses at http://www.LinuxTrainingAcademy.com.
Jason is also the author of Python Programming for Beginners and Command Line Kung Fu: Bash Scripting Tricks, Linux Shell ProgrammingTips, and Bash One-Liners
 190

 LEARN LINUX IN 5 DAYS
OTHER BOOKS BY THE AUTHOR
Bash Command Line Pro Tips http://www.linuxtrainingacademy.com/bash-pro-tips
Command Line Kung Fu: Bash Scripting Tricks, Linux Shell Programming Tips, and Bash One-liners http://www.linuxtrainingacademy.com/command-line-kung-fu-book
High Availability for the LAMP Stack: Eliminate Single Points of Failure and Increase Uptime for Your Linux, Apache, MySQL, and PHP Based Web Applications http://www.linuxtrainingacademy.com/ha-lamp-book
Python Programming for Beginners http://www.linuxtrainingacademy.com/python-programming-for- beginners
     191

 JASON CANNON
ADDITIONAL RESOURCES INCLUDING EXCLUSIVE DISCOUNTS FOR YOU
For even more resources, visit: http://www.linuxtrainingacademy.com/resources
Books
Command Line Kung Fu
http://www.linuxtrainingacademy.com/command-line-kung-fu-book
Do you think you have to lock yourself in a basement reading cryptic man pages for months on end in order to have ninja like command line skills? In reality, if you had someone share their most powerful command line tips, tricks, and patterns you’d save yourself a lot of time and frustration. This book does just that.
  192

 LEARN LINUX IN 5 DAYS
High Availability for the LAMP Stack
http://www.linuxtrainingacademy.com/ha-lamp-book
Eliminate Single Points of Failure and Increase Uptime for Your Linux, Apache, MySQL, and PHP Based Web Applications
Python Programming for Beginners
http://www.linuxtrainingacademy.com/python-programming-for-beginners
If you are interested in learning how to program, or Python specifically, this book is for you. In it you will learn how to install Python, which version to choose, how to prepare your computer for a great experience, and all the computer programming basics you’ll need to know to start writing fully functional programs.
Scrum Essentials
http://www.linuxtrainingacademy.com/scrum-book
This book will provide every team member, manager, and executive with a common understanding of Scrum, a shared vocabulary they can use in applying it, and practical knowledge for deriving maximum value from it. After reading Scrum Essentials you will know about scrum roles, sprints, scrum artifacts, and much more.
Courses
High Availability for the LAMP Stack
http://www.linuxtrainingacademy.com/ha-lamp-stack
Learn how to setup a highly available LAMP stack (Linux, Apache, MySQL, PHP). You'll learn about load balancing, clustering databases, creating distributed file systems, and more.
    193

 JASON CANNON
Linux for Beginners
http://www.linuxtrainingacademy.com/lfb-udemy
This is the online video training course based on this book. This course includes explanations as well as real-world examples on actual Linux systems.
Learn Linux in 5 Days
http://www.linuxtrainingacademy.com/linux-in-5-days
Take just 45 minutes a day for the next 5 days and I will teach you exactly what you need to know about the Linux operating system. You’ll learn the most important concepts and commands, and I’ll even guide you step-by-step through several practical and real-world examples.
Linux Alternatives to Windows Applications
http://www.linuxtrainingacademy.com/linux-alternatives
If you ever wanted to try Linux, but were afraid you wouldn’t be able to use your favorite software, programs, or applications, take this course.
LPI Level 1 / Exam 101 Training
http://www.linuxtrainingacademy.com/lpi-course-1
This course provides interactive step-by-step videos that will help you prepare for the LPIC-1 101 Exam. This exam is important to help you prepare for the Linux+ and LPIC level 1 certification and this course provides all the materials you need to pass the exam.
LPI Level 1 / Exam 102 Training
http://www.linuxtrainingacademy.com/lpi-course-2
This course provides interactive, step-by-step videos that will help you prepare for the LPIC-1 102 Exam. This exam is important to help you prepare for the Linux+ and LPIC level 1 certification and this course provides all the materials you need to pass the exam.
     194

 LEARN LINUX IN 5 DAYS
Python for Beginners
http://www.linuxtrainingacademy.com/python-video-course
This comprehensive course covers the basics of Python as well as the more advanced aspects such as debugging and handling files. Enroll in this course to gain access to all 13 chapters of this Python for Beginners course as well as labs and code files.
Cloud Hosting and VPS (Virtual Private Servers) Digital Ocean
http://www.linuxtrainingacademy.com/digitalocean
Simple cloud hosting, built for developers. Deploy an SSD cloud server in just 55 seconds. You can have your own server for as little as $5 a month.
Web Hosting with SSH and Shell Access Bluehost
http://www.linuxtrainingacademy.com/bluehost
99% of my websites are hosted on Bluehost. Why? Because it's incredibly easy to use with 1-click automatic WordPress installation and excellent customer service - via phone and via chat. I HIGHLY RECOMMEND using Bluehost for your first site. Also, you can use the same hosting account for multiple domains if you plan on creating more websites. Visit http://www.linuxtrainingacademy.com/bluehost to get a special discount off the regular price!
   195

 JASON CANNON
HostGator
http://www.linuxtrainingacademy.com/hostgator
If you want an alternative to Bluehost, check out HostGator. It comes with a 99.9% uptime guarantee and includes a free site builder. They provide customer support 24 hours a day, seven days a week and even provide a 45 day money-back gaurantee..
 196

 APPENDICES
197

 APPENDIX A:
ABBREVIATIONS AND ACRONYMS
ACL - access control list
APT - advanced packaging tool (apt)
ASCII - American Standard Code for Information Interchange CentOS - Community ENTerprise Operating System
198

 LEARN LINUX IN 5 DAYS
cd - Change directory
CLI - command line interface
crontab - cron table
dir - directory
distro - Distribution, a collection of user programs, software, and the Linux kernel to create an operating environment.
FOSS - free open source software FTP - file transfer protocol
GID - group identification
GB - gigabyte
GNU - GNU's Not UNIX. (See GNU.org) GUI - graphical user interface
HP - Hewlett-Packard
IBM - International Business Machines KB - kilobyte
I/O - input/output
LFS - Linux from scratch.
(See http://www.linuxfromscratch.org/)
LSB - Linux Standard Base
LUG - Linux user group
LVM - logical volume management
199

 JASON CANNON
MB - megabyte
MBR - master boot record
NFS - network file system
NTP - network time protocol
OS - operating system
PID - process identification number
POSIX - portable operating system interface
pwd - present working directory
RHEL - RedHat Enterprise Linux
RHCE - Red Hat Certified Engineer
RPM - RedHat Package Manager
SAN - storage area network
SELinux - Security Enhanced Linux
SFTP - secure file transfer protocol or SSH file transfer protocol SGID - set group ID
SLES - SuSE Linux Enterprise Server
SSH - secure shell
STDIN - Standard input
STDOUT - Standard output
STDERR - Standard error
200

 su - superuser
sudo - superuser do
SUID - set user ID
symlink - symbolic link
tar - tape archive
TB - terabyte
TTY - teletype terminal
UID - user identification
VDI - virtual disk image
X - X window system
YUM - Yellowdog Updater, Modified (yum)
LEARN LINUX IN 5 DAYS
201

 APPENDIX B: FAQ
Q: Where can I access all the links in this book?
The links covered in this book along with other supplemental material is available at:
http://www.linuxtrainingacademy.com/lfb
Q: What is Linux?
Linux is an open-source operating system modelled after UNIX.
Q: What is the Linux kernel?
The Linux kernel handles the interactions between the software running on the system and the hardware. To learn more, visit the official Linux kernel website at http://www.kernel.org.
Q: Which Linux distribution should I use?
If your goal is to eventually become a Linux system administrator, focus on CentOS or Ubuntu. CentOS is a Red Hat Enterprise Linux (RHEL) derivative. As a general rule, CentOS and RHEL are often found in
202

 LEARN LINUX IN 5 DAYS
corporate environments. Ubuntu is popular with startups and smaller companies that run their operations in the cloud. If you are using Linux for your own personal reasons, choose a distribution that appeals to you. To get some ideas look at DistroWatch.com's top 10 distributions page.
Here are some other common Linux distributions: Arch Linux - https://www.archlinux.org/ Debian - http://www.debian.org/
Fedora - http://fedoraproject.org/ LinuxMint - http://www.linuxmint.com/ Mageia - http://www.mageia.org/ openSUSE - http://www.opensuse.org/
There are several special purpose Linux distributions that focus on a single area. Examples areas of focus include education, minimalism, multimedia, networking/firewalls, and security. Here is just a sampling of the available specialty distros.
ArtistX - A DVD which turns a computer into a full multimedia production studio.
http://artistx.org/
Edubuntu - An education oriented operating system. http://www.edubuntu.com/
live.linuX-gamers.net - A live Linux distribution focused on gaming.
http://live.linux-gamers.net/
Mythbuntu - Mythbuntu is focused upon setting up a
          203

 JASON CANNON
standalone MythTV based PVR (personal video recorder) system.
http://www.mythbuntu.org/
Parted Magic - A Hard disk management solution. https://partedmagic.com/
Scientific Linux - Scientific Linux is put together by Fermilab, CERN, and various other labs and universities around the world. Its primary purpose is to reduce duplicated effort of the labs, and to have a common install base for the various experimenters.
https://www.scientificlinux.org/
Ubuntu Studio - Provides the full range of multimedia content creation applications for audio, graphics, video, photography and publishing.
http://ubuntustudio.org/
VortexBox - VortexBox is a multifunctional solution to rip, store and stream CDs, digital music and Internet radio. http://www.vortexbox.co.uk/
Q: Can I use Microsoft Office in Linux?
Microsoft Office is not available for Linux, however there are alternatives such as Libreoffice, Open Office, and AbiWord.
Q: How do I run XYZ program in Linux?
To find Linux alternatives for software you use on Mac and Windows, visit http://alternativeto.net/.
    204

 LEARN LINUX IN 5 DAYS
APPENDIX C: TRADEMARKS
BSD/OS is a trademark of Berkeley Software Design, Inc. in the United States and other countries.
Facebook is a registered trademark of Facebook, Inc.. Firefox is a registered trademark of the Mozilla Foundation.
HP and HEWLETT-PACKARD are registered trademarks that belong to Hewlett-Packard Development Company, L.P.
IBM® is a registered trademark of International Business Machines Corp., registered in many jurisdictions worldwide.
Linux® is the registered trademark of Linus Torvalds in the U.S. and other countries.
Mac and OS X are trademarks of Apple Inc., registered in the U.S. and other countries.
205

 JASON CANNON
Open Source is a registered certification mark of Open Source Initiative.
Sun and Oracle Solaris are trademarks or registered trademarks of Oracle Corporatoin and/or its affiliates in the United States and other countries.
UNIX is a registered trademark of The Open Group.
Windows is a registered trademark of Microsoft Corporation in the United States and other countries.
All other product names mentioned herein are the trademarks of their respective owners.
206

 Linux command line for you and me Documentation Release 0.1
Kushal Das
Dec 13, 2019

 Contents:
1 Shell commands 1
1.1 Terminalemulators............................................ 1
1.2 datecommand .............................................. 1
1.3 calcommand............................................... 2
1.4 whoamicommand ............................................ 3
1.5 idcommand ............................................... 3
1.6 pwdcommand .............................................. 3
1.7 cdcommand ............................................... 3
1.8 .directoryand..directory ........................................ 3
1.9 lscommand................................................ 4
1.10 mkdircommand ............................................. 4
1.11 rmcommand............................................... 4
1.12 Copyingafileusingcpcommand .................................... 5
1.13 Renamingormovingafile........................................ 5
1.14 treecommand .............................................. 5
1.15 wccommand............................................... 6
1.16 echocommand.............................................. 6
1.17 Redirectingthecommandoutput..................................... 6
1.18 Using>toredirectoutputtoafile.................................... 6
1.19 Movingaroundinthecommandline................................... 8
1.20 manpages ................................................ 8
2 File system 9 2.1 FHS.................................................... 9
3 Useful commands 11 3.1 Creatingsoftlinktoafile ........................................ 11 3.2 Creatinghardlinks............................................ 11 3.3 Extractingatarfile............................................ 12 3.4 Creatingatarfile............................................. 12 3.5 Vimeditor ................................................ 13 3.6 :qtoexitvim............................................... 13 3.7 Openanewfileoreditanexistingfile.................................. 13 3.8 Differentmodesofvim.......................................... 13 3.9 :wtosaveafile.............................................. 15 3.10 :q!toquitwithoutsaving ........................................ 15 3.11 Becomingrootuser............................................ 15
  i

3.12 Usingsudocommand .......................................... 15 3.13 Environmentvariables .......................................... 15 3.14 Settingupenvironmentvariablevalues ................................. 16 3.15 locatecommand ............................................. 16 3.16 Findingdate/timeindifferenttimezones................................. 16 3.17 Bashhistory ............................................... 17
4 Users and Groups 19 4.1 Findingtheowneroffile......................................... 19 4.2 /etc/passwdfile.............................................. 19 4.3 Detailsaboutgroups........................................... 21 4.4 wheelgroup ............................................... 21 4.5 Becomingsuperuser ........................................... 21 4.6 Addinganewuser............................................ 21 4.7 Changinguserpasswords ........................................ 22 4.8 Modifyingexistinguserdetails ..................................... 22 4.9 Deletingauser.............................................. 22 4.10 Addinganewgroup ........................................... 22 4.11 Addingnewgrouptoanuser....................................... 22
5 File permissions 23 5.1 chmodcommand............................................. 23 5.2 PATHvariable .............................................. 24 5.3 .bashrcfile ................................................ 24 5.4 whichcommand ............................................. 25 5.5 she-bangorsha-banginexecutablefiles................................. 25
6 Processes in Linux 27 6.1 Howtoviewallrunningprocesses? ................................... 27 6.2 Howtofindaparticularprocess? .................................... 27 6.3 Howtokill/stopaparticularprocess? .................................. 28 6.4 Findingoutlistofopenfiles....................................... 28 6.5 Signals.................................................. 28 6.6 topcommand............................................... 29 6.7 Loadaverage............................................... 29 6.8 htoptool ................................................. 29 6.9 MoreaboutLinuxprocesses....................................... 30 6.10 /procdirectory .............................................. 30 6.11 /proc/cpuinfo............................................... 31 6.12 /proc/cmdline............................................... 31 6.13 /proc/meminfo .............................................. 31 6.14 /proc/uptime ............................................... 32 6.15 /proc/sys/&sysctlcommand....................................... 32 6.16 EnablingIPforwardwithsysctl ..................................... 32
7 Linux Services 35 7.1 Whatisaservice? ............................................ 35 7.2 Whatisadaemon?............................................ 35 7.3 Whatistheinitsystem? ......................................... 35 7.4 Unitsinsystemd ............................................. 35 7.5 .serviceunitsinsystemd......................................... 36 7.6 Howtofindallthesystemdunitsinthesystem? ............................ 36 7.7 Workingwithaparticularservice .................................... 36 7.8 Enablingordisablingaservice...................................... 37 7.9 Shutdownorrebootthesystemusingsystemctl............................. 38
 ii

7.10 Findingthelogsofaservice....................................... 38 7.11 Continuousstreamoflogs ........................................ 38 7.12 Listingofpreviousboots......................................... 39 7.13 Time-basedlogviewing ......................................... 39
8 Package management 41 8.1 dnfcommand............................................... 41 8.2 Searchingforapackage ......................................... 41 8.3 Findingmoreinformationaboutapackage ............................... 42 8.4 Installingapackage ........................................... 42 8.5 aptcommand............................................... 43 8.6 apt-getupdate .............................................. 43 8.7 apt-getinstall............................................... 43
9 File system mounting 45 9.1 ConnectingUSBdrivestoyoursystem ................................. 46 9.2 Mountingadevice ............................................ 46 9.3 Unmounting ............................................... 46 9.4 EncryptingdriveswithLUKS(foronlyLinux) ............................. 46 9.5 EncryptingdrivesforanyOSusingVeracrypt.............................. 47
10 Networking commands 49 10.1 FindingtheIPaddress .......................................... 49 10.2 pingcommand.............................................. 49 10.3 ShortnoteaboutDNS .......................................... 50 10.4 /etc/resolv.conf.............................................. 50 10.5 hostcommand .............................................. 50 10.6 digcommand............................................... 50 10.7 sscommand ............................................... 51 10.8 traceroutecommand ........................................... 52 10.9 tracepathcommand............................................ 52 10.10Remotelogintoacomputerusingsshtool ............................... 53 10.11sshkeygeneration ............................................ 53 10.12ssh-copy-id................................................ 54 10.13Stopanddisablethesshdservice .................................... 54 10.14Disablepasswordbasedloginforssh .................................. 54 10.15Howtofindactive(open)networkconnectionsfromyourcomputer? . . . . . . . . . . . . . . . . . 55
11 Linux Firewall 57 11.1 Installation................................................ 57 11.2 Tables,chainsandrules ......................................... 57 11.3 filtertable................................................. 58 11.4 nattable ................................................. 58 11.5 iptablescommand ............................................ 58 11.6 Viewtheexistingrules.......................................... 59 11.7 AppendingrulestoINPUTchain .................................... 59 11.8 Flushingallrules............................................. 60 11.9 Exampleofaseriesofrules ....................................... 60 11.10Deletearulebasedonrulenumber ................................... 61 11.11Deletearuledirectly........................................... 61 11.12Savingtherules ............................................. 61 11.13AblogpostfromMajorHayden..................................... 62 11.14Debuggingfirewallrules......................................... 62
12 Random things 63 iii
 
12.1 wcommand ............................................... 63 12.2 Howlongisthesystemrunning? .................................... 63 12.3 FindingCPUtimeofacommand .................................... 63 12.4 dmesgcommand............................................. 64 12.5 Settingupcronjobs ........................................... 64 12.6 Findingoutdetailsaboutpreviousloginsorsystemreboots. . . . . . . . . . . . . . . . . . . . . . . 65
13 Whats next? 67
14 Workbook 69 14.1 Howtoinstalltheworkbook? ...................................... 69 14.2 copypaste ................................................ 69 14.3 Findyouruserid............................................. 70 14.4 Creatingsoftlinks............................................. 70 14.5 Basicvimusage ............................................. 70 14.6 Addinganewuser............................................ 70 14.7 Deleinganuser.............................................. 71 14.8 FindingtheIPaddressofdgplug.org................................... 71 14.9 Changethelocaltimezoneofthesystem ................................ 71 14.10Addsudoaccesstoanuser........................................ 71
15 Advanced section 73
16 Containers 75
17 Team 77
18 Indices and tables 79
Index 81
 iv

CHAPTER 1
Shell commands
In Linux the shell (or terminal) is the lifeline of the developer, and of any power user. Things which can be done on the GUI (by clicking on different buttons), can be done much more efficiently on the terminal by using commands. Maybe one can not remember all the commands, but with regular usage one can easily remember the most useful ones.
The following guide will introduce you to a minimal set of basic commands required to use your Linux computer efficiently.
1.1 Terminal emulators
The above is the screenshot of the Gnome terminal application. As you can see the command prompt contains the following information:
[username@hostname directoryname]
In our case the username is babai, hostname is kdas-laptop, and directory is mentioned as ~. This ~ is a special
character in our case. It means the home directory of the user. In our case the home directory path is /home/babai/. The Gnome terminal is one of many implementations of terminal emulators. Different Linux environments may come
pre-installed with different terminals.
Read the articles on Wikipedia to learn about computer teriminals, terminal emulators and shell.
1.2 date command
date command prints the current date time.
In case you want to know the current date/time in UTC, use the following command. (I added this in 2018, so please do not get confused at the date).
           $ date
Sun Jun 25 10:13:44 IST 2017
  1

Linux command line for you and me Documentation, Release 0.1
      $ date -u
Mon May 21 01:43:47 UTC 2018
 1.3 cal command
cal command is used to display a calendar in your shell, by default it will display the current month
    $ cal
      June 2017
Su Mo Tu We Th Fr Sa 123 4 5 6 7 8 9 10
11 12 13 14 15 16 17
18 19 20 21 22 23 24
25 26 27 28 29 30
$ cal 07 2017
    July 2017
Su Mo Tu We Th Fr Sa
                1
2345678 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
  2 Chapter1. Shellcommands

Linux command line for you and me Documentation, Release 0.1
 1.4 whoami command
whoami command will tell you which user account you are using in this system.
1.5 id command
id prints real user id, and various other details related to the account.
1.6 pwd command
pwd command, short for print working directory, will help you to find out the absolute path of the current directory. Let us see an example below:
1.7 cd command
The next command we will learn is cd, short for change directory. This command will help you to change your current directory. We will move to /tmp directory in our example.:
Here you can see that first we moved to /tmp directory, and then we moved back to the home directory by using ~ character.
1.8 . directory and .. directory
. and .. has special meaning in the Linux. . means the current directory and .. means the parent directory. We can use these in various situations for daily activities.
$ cd ..
The above command changes the current directory to the parent directory.
    $ whoami
fedora
     $ id
uid=1000(fedora) gid=1000(fedora) groups=1000(fedora),4(adm),10(wheel),190(systemd-
˓→journal) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
     [babai@kdas-laptop ~]$ pwd
/home/babai
     [babai@kdas-laptop ~]$ cd /tmp
[babai@kdas-laptop tmp]$ pwd
/tmp
[babai@kdas-laptop tmp]$ cd ~
[babai@kdas-laptop ~]$ pwd
/home/babai
       1.4. whoamicommand 3

Linux command line for you and me Documentation, Release 0.1
 1.9 ls command
We use ls command to list the files and directories inside any given directory. If you use ls command without any argument, then it will work on the current directory. We will see few examples of the command below.:
    [babai@kdas-laptop ~]$ ls
Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos
[babai@kdas-laptop ~]$ ls /tmp/
cpython           systemd-private-759094c89c594c07a90156139ec4b969-colord.service-
˓→hwU1hR
hogsuspend systemd-private-759094c89c594c07a90156139ec4b969-rtkit-daemon.
˓→service-AwylGa
hsperfdata_babai tracker-extract-files.1000
plugtmp tracker-extract-files.1002
[babai@kdas-laptop ~]$ ls /
bin cpython etc lib lost+found mnt proc run srv sysroot usr boot dev home lib64 media opt root sbin sys tmp var
 In the last two commands we provided a path as the argument to the ls command. / is a special directory, which represents root directory in Linux filesystem. You will learn more about that in the next chapter.
1.10 mkdir command
We can create new directories using mkdir command. For our example we will create a code directory inside our home directory.:
We can also create nested directories in a single command using the -p option.:
    [babai@kdas-laptop ~]$ ls
Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos
[babai@kdas-laptop ~]$ mkdir code
[babai@kdas-laptop ~]$ ls
code  Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos
     [babai@kdas-laptop ~]$ mkdir -p dir1/dir2/dir3
[babai@kdas-laptop ~]$ ls dir1/ dir1/dir2/
dir1/:
dir2
dir1/dir2/:
dir3
 1.11 rm command
rm command is used to remove a file, or directory. The -r option is being used to remove in a recursive way. With -f you force the removal, ignoring errors and never prompt. You can chain the flags, so instead of rm -r -f you can as well type rm -rf. But, always double check before you use rm -rf command, if you by mistake give this command in your home directory, or any other important directory, it will not ask to confirm, but it will delete everything there. So, please be careful and read twice before pressing enter key.
 4 Chapter1. Shellcommands

Linux command line for you and me Documentation, Release 0.1
     [babai@kdas-laptop ~]$ rm -rf dir1/dir2/dir3
[babai@kdas-laptop ~]$ ls dir1/ dir1/dir2/
dir1/:
dir2
dir1/dir2/:
 1.12 Copying a file using cp command
We use the cp command to copy a file in the Linux shell. To copy a folder with its contents recursively use the cp command with the -r flag. We use the cp file_to_copy new_location format. In the example below, we are copying the hello.txt to hello2.txt.
In another example, I will copy the file passwordauthno.png from the Pictures directory in my home directory to the current directory.
$ cp ~/Pictures/passwordauthno.png .
In the following example, I will be copying the images directory (and everything inside it) from the Downloads directory under home to the /tmp/ directory.
$ cp -r ~/Downloads/images /tmp/
1.13 Renaming or moving a file
The mv command is used to rename or move a file or directory. In the following example, the file hello.txt is re- named to nothello.txt
    $ cp hello.txt hello2.txt
$ ls -l
-rw-rw-r--. 1 fedora fedora   75 Jun 25 04:47 hello2.txt
-rw-rw-r--. 1 fedora fedora   75 Jun 25 04:33 hello.txt
               $ mv hello.txt nothello.txt
$ ls -l
-rw-rw-r--. 1 fedora fedora 75 Jun 25 04:33 nothello.txt
 1.14 tree command
tree command prints the directory structure in a nice visual tree design way.
    [babai@kdas-laptop ~]$ tree
.
    code
    Desktop
    dir1
        dir2
    Documents
    Downloads
        1.12. Copyingafileusingcpcommand 5
(continues on next page)
 
Linux command line for you and me Documentation, Release 0.1
 1.15 wc command
wc, short for word count, is an useful command which can help us to count newlines, words and bytes of a file.
The -l flag finds the number of lines in a file, -w counts the number of words in the file.
1.16 echo command
echo command echoes any given string to the display.
1.17 Redirecting the command output
In Linux shells, we can redirect the command output to a file, or as input to another command. The pipe operator | is the most common way to do so. Using this we can now count the number of directories in the root (/) directory very easily.
The | is known as pipe. To know more about this, watch this video.
1.18 Using > to redirect output to a file
We can use > to redirect the output of one command to a file, if the file exists this will remove the old content and only keep the input. We can use >> to append to a file, means it will keep all the old content, and it will add the new input to the end of the file.
(continued from previous page)
     Music
Pictures
    terminal1.png
Public
Templates
Videos
           $ cat hello.txt
HI that is a file.
This is the second line.
And we also have a third line.
$ wc -l hello.txt
3 hello.txt
$ wc -w hello.txt
17 hello.txt
     $ echo "Hello"
Hello
     $ ls /
bin  boot  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run
˓→sbin srv sys tmp usr var $ ls / | wc -w
20
   6 Chapter1. Shellcommands

Linux command line for you and me Documentation, Release 0.1
     $ ls / > details.txt
$ cat details.txt
bin
boot
dev
etc
home
lib
lib64
lost+found
media
mnt
opt
proc
root
run
sbin
srv
sys
tmp
usr
var
$ ls /usr/ > details.txt
$ cat details.txt
bin
games
include
lib
lib64
libexec
local
sbin
share
src
tmp
$ ls -l /tmp/ >> details.txt
$ cat details.txt
bin
games
include
lib
lib64
libexec
local
sbin
share
src
tmp
total 776
-rwxrwxr-x. 1 fedora fedora
-rw-------. 1 fedora fedora 784756 Jun 23 10:49 tmp3lDEho
34 Jun 24 07:56 helol.py
  1.18. Using>toredirectoutputtoafile 7

Linux command line for you and me Documentation, Release 0.1
 1.19 Moving around in the command line
There are key shortcuts available in Bash which will help you to move around faster. They are by the way very similar to the standard emacs keybindings, a number of key combinations that you will discover in many places and therefore are very handy to memorize and internalize. The following table is a good starting point.
   Key combination
 Action
  Ctrl + A
 Move to the beginning of the line
  Ctrl + E
 Move to the end of the line
  Alt + B
 Move to the previous word
  Alt + F
 Move to the next word
  Ctrl + U
 Erase to the beginning of the line
  Ctrl + K
 Erase to the end of the line
  Ctrl + W
 Erase the previous word
  Ctrl + P
 Browse previously entered commands
  Ctrl + R
 Reverse search for previously entered commands
          1.20 man pages
man shows the system’s manual pages. This is the command we use to view the help document (manual page) for any command. The man pages are organized based on sections, and if the same command is found in many different sections, only the first one is shown.
The general syntax is man section command. Example man 7 signal. You can know about different sections below. Press q to quit the program.
    1 Executable programs or shell commands
2   System calls (functions provided by the kernel)
3   Library calls (functions within program libraries)
4 Special files (usually found in /dev)
5 File formats and conventions eg /etc/passwd
6 Games
7 Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)
8 System administration commands (usually only for root)
9   Kernel routines [Non standard]
  8 Chapter1. Shellcommands

CHAPTER 2
File system
Now you know a few really basic, Linux commands. Before we can learn anything else, we should look into how files and directories are structured inside a Linux system.
2.1 FHS
/ is the root directory of your file system. It’s under this directory, that all the other files and directories reside. There’s a Filesystem Hierarchy Standard(FHS), which talks about these different directories, and what kinds of files are located in which directory.
      $ ls /
bin  boot  dev  etc  home  lib  lib64  lost+found  mc  media  mnt  opt  output  proc
˓→root run sbin srv sys tmp usr var
   9

Linux command line for you and me Documentation, Release 0.1
  10 Chapter2. Filesystem

CHAPTER 3
Useful commands
In this chapter, we will learn about a few more commands which we may have to use in daily life.
3.1 Creating soft link to a file
Soft link or symbolic links are a special kind of file, which actually point to some other file using either related or absolute paths. We can create soft links using ln -s command.
In the above example, we created a soft link called name to the /etc/hostname file. You can see details about the soft link files by using the ls -l command. You can create links to any directory in the same way.
If you remove the original file the soft link is pointing to, then the soft link will become useless, because it’ll point to a file that does not exist. Soft links can also point to file which is in a different file system.
      $ ln -s /etc/hostname name
$ ls -l
total 12
-rw-rw-r--. 1 fedora fedora
lrwxrwxrwx. 1 fedora fedora
$ cat name
kushal-test.novalocal
13 Jun 23 11:14 hello.txt
13 Jun 23 12:32 name -> /etc/hostname
 3.2 Creating hard links
    $ echo "Hello World!" > hello.txt
$ ln hello.txt bye.txt
$ ls -l
total 16
-rw-rw-r--. 2 fedora fedora
-rw-rw-r--. 2 fedora fedora
lrwxrwxrwx. 1 fedora fedora
13 Jun 23 11:14 bye.txt
13 Jun 23 11:14 hello.txt
13 Jun 23 12:32 name -> /etc/hostname
 (continues on next page)
 11

Linux command line for you and me Documentation, Release 0.1
 (continued from previous page)
    $ cat hello.txt
Hello World!
$ cat bye.txt
Hello World!
$ echo "1234" > hello.txt
$ cat bye.txt
1234
$ cat hello.txt
1234
$ rm hello.txt
$ cat bye.txt
1234
$ ls -l
total 12
-rw-rw-r--. 1 fedora fedora
lrwxrwxrwx. 1 fedora fedora
 5 Jun 23 12:39 bye.txt
13 Jun 23 12:32 name -> /etc/hostname
 If you look carefully, at the above example, we’ve created a hard link using the ln command. When we made a change to the original hello.txt file, that is also reflected in the bye.txt file.
But, because bye.txt is a hard link, even if I delete the hello.txt, the hard link still exists, and also has the original content.
3.3 Extracting a tar file
tar is a tool to create and extract archive files. Many times we will have to download and then extract tar files in our regular day to day work.
files.tar.gz file is compressed with gzip, if the file name ends with .tar.bz2, then it is compressed wth bzip2.
3.4 Creating a tar file
We can use the same tar command to create a tar file.
    $ tar -xzvf files.tar.gz
hello.c
bye.txt
     $ tar -xjvf files.tar.bz2
hello.c
bye.txt
     $ tar -czvf files.tar.gz hello.c bye.txt
hello.c
bye.txt
$ ls
bye.txt  files.tar.gz  hello.c
  12 Chapter3. Usefulcommands

Linux command line for you and me Documentation, Release 0.1
 3.5 Vim editor
Text editors are tools to edit files. This could be a configuration file, or source code, or an email, or any other kind of text file. Which editor to use, is generally a personal choice, and a lot of good energy has been wasted in the telling of which one, is the one, truem best editor. In this book we will just learn about Vim editor. It’s also known as vi improved editor. In the Fedora Linux distribution, the vi command is actually an alias to vim itself.
If we just type vim, and press enter, we will see the following screen.
3.6 :q to exit vim
Press Escape and then type :q to exit vim.
3.7 Open a new file or edit an existing file
vim filename is the command to open an existing file. If the file does not exist, it will open a new, empty file for editing.
3.8 Different modes of vim
Vim editor starts off in command mode. Every time you open a file, this is the default mode of the editor. You can press the Escape key in any other mode to come back to command mode.
You press i to go into insert mode; we edit documents in the insert mode. If you press Escape, you will return to command mode.
  3.5. Vimeditor 13

Linux command line for you and me Documentation, Release 0.1
    14 Chapter3. Usefulcommands

Linux command line for you and me Documentation, Release 0.1
 3.9 :w to save a file
In command mode, typing :w saves a file. If you want to save and quit the editor, then type either :wq or :x.
3.10 :q! to quit without saving
Typing :q!, when you are in command mode, will allow us quit without saving the current file.
Vim is a powerful editor, and we learned only a few, really basic steps in it. It will take a complete book, to explain
different features of vim. But, the steps above are sufficient for our book’s scope.
One major thing to remember about any text file, is keeping the newline character as the last line of the file. Because
that is how the ‘ POSIX <https://en.wikipedia.org/wiki/POSIX>‘_ standard defines a line.
3.11 Becoming root user
root is the superuser. root has the power to make changes in various parts of a Linux system. That also means if you make any dangerous change (say deleting your user account) as root (by mistake), that can easily cause real damage.
The general rule is, when you need superuser power, use the sudo command to get work done, and use your normal user account for everything else. The su - command will helps you become the root user; use this extremely carefully.
Notice how the command prompt changed to # from $, # shows that you are using the root — another visible indication to think about every command you give as root. Press Ctrl+d to log out of the root account. (or any account, for that matter)
3.12 Using sudo command
Add the sudo command in front of any other command to execute them as root. For example:
3.13 Environment variables
Environment variables are a way to pass data on to applications. We can set values of different variables, which any application can then access. There are various variables which decide how the shell will behave. To see all the variables, use the printenv command.
    $ su -
Password:
#
     $ less /var/log/secure
/var/log/secure: Permission denied
$ sudo less /var/log/secure
[sudo] password for fedora:
... long output
     $ printenv
... long output
  3.9. :wtosaveafile 15

Linux command line for you and me Documentation, Release 0.1
 You can execute the same command once as normal user, and once as root, and then check for the differences between the output. You will mostly see they are same, with some (or more) unique ones. That’s because, variables are user specific.
3.14 Setting up environment variable values
We can use the export command to create a new environment variable or change an existing one. We use the echo command to print a particular environment variable’s value.
In our example we first created a new variable called name, and then we changed the value of the variable.
3.15 locate command
locate is a very useful tool to find files in the system. It’s part of the mlocate package. For example, the following command will search all the files with firewalld in the name.
    $ export NAME="Kushal Das"
$ echo $NAME
Kushal Das
$ export NAME="Babai Das"
$ echo $NAME
Babai Das
     $ locate firewalld
/etc/firewalld
/etc/sysconfig/firewalld
/etc/systemd/system/basic.target.wants/firewalld.service
/home/kdas/.local/share/Zeal/Zeal/docsets/Ansible.docset/Contents/Resources/Documents/
˓→docs.ansible.com/ansible/firewalld_module.html /home/kdas/Downloads/ansible-devel/lib/ansible/modules/system/firewalld.py /home/kdas/Downloads/ansible-fail-on-github-zipfile/lib/ansible/modules/system/
˓→firewalld.py /home/kdas/code/git/ansible/lib/ansible/modules/system/firewalld.py ... long output
 You can update the search database by using updatedb command as root. $ sudo updatedb
This may take some time as it will index all the files in your computer.
3.16 Finding date/time in different timezones
The /usr/share/zoneinfo directory contains all the different timezone files. We can use these file names to get cur- rent date/time in any timezone. For example, the following command will show the current date/time in US/Pacific timezone.
         $ TZ=US/Pacific date
Sun May 20 18:45:54 PDT 2018
  16 Chapter3. Usefulcommands

Linux command line for you and me Documentation, Release 0.1
 3.17 Bash history
Using history command you can check for any command you previously used in the shell, this output will not show you the commands from the current running shells. Only after you exit your shell, those commands will be written into ~/.bash_history file, and history command tells us the details from there.
The environment variable HISTFILESIZE determines the number of commands stored in the file. By default, the history command does not show timestamps. You can have another environment variable to set the timestamp of every command. All commands from before setting the timestamp will show the same time for execution.
    echo 'export HISTTIMEFORMAT="%d/%m/%y %T "' > ~/.bashrc source ~/.bashrc
...
...
history
  3.17. Bashhistory 17

Linux command line for you and me Documentation, Release 0.1
  18 Chapter3. Usefulcommands

CHAPTER 4
Users and Groups
In this chapter we’ll learn about user and group management on your system, and also about basic access control.
In Linux everything is associated to an user and a group. Based on these values, the system figures out, who can access what part of the system. That includes files, directories, network ports etc.
4.1 Finding the owner of file
We use the ls -l command to find the owner, and group of a file or directory.
In the above example, fedora is the name of the owner and group both. The first value talks about who can access this file (we will learn about this in a while.)
4.2 /etc/passwd file
/etc/passwd contains all the users available in the system. This is a plain text file (this means you can view the information by using cat command.)
(continues on next page)
       $ cat /etc/passwd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
  19

Linux command line for you and me Documentation, Release 0.1
 (continued from previous page)
    daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
operator:x:11:0:operator:/root:/sbin/nologin
games:x:12:100:games:/usr/games:/sbin/nologin
ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
nobody:x:99:99:Nobody:/:/sbin/nologin
systemd-timesync:x:999:998:systemd Time Synchronization:/:/sbin/nologin
systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin
systemd-resolve:x:193:193:systemd Resolver:/:/sbin/nologin
dbus:x:81:81:System message bus:/:/sbin/nologin
sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin
chrony:x:998:995::/var/lib/chrony:/sbin/nologin
systemd-coredump:x:994:994:systemd Core Dumper:/:/sbin/nologin
fedora:x:1000:1000:Fedora:/home/fedora:/bin/bash
polkitd:x:993:993:User for polkitd:/:/sbin/nologin
tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/
˓→null:/sbin/nologin
 Each line has seven entries separated by :. username:password:uid:gid:gecos:/home/dirname:shell
       FIELD
  MEANING
 username
  the username
 password
  the password of the user
 uid
  Numeric user id
 gid
  Numeric group id of user
 gecos
  arbitary field
 /home/dirname
  Home directory of the user
 shell | Which shell to use for the user
      You’ll see accounts with /sbin/nologin as their shell. These are generally accounts for various services, which are not supposed to be used by a normal human user; (which is why, no shell is needed.)
The actual user passwords are stored in an encrypted form in /etc/shadow file, with only the root user having access to this file.
If you want to know more about the current user, use the id command.
    $ ls -l /etc/shadow
----------. 1 root root 2213 Jun 22 15:20 /etc/shadow
  20 Chapter4. UsersandGroups

Linux command line for you and me Documentation, Release 0.1
     $ id
uid=1000(vagrant) gid=1000(vagrant) groups=1000(vagrant) context=unconfined_
˓→u:unconfined_r:unconfined_t:s0-s0:c0.c1023
 4.3 Details about groups
Group details are stored inside the /etc/group file. Each user has one primary group, and zero or more supplementary groups.
4.4 wheel group
If your user is part of the wheel group, then it has sudo access. If you remember the Fedora Installer, it actually gives you the option to mark a new user to be part of the wheel group during installation.
4.5 Becoming superuser
Have you noticed the silent command sudo in front of many commands in the lab before? We use that sudo command to become root user temporarily. The root user is also known as the superuser of the system, it has all the access power to change anything on the system. It is the administrator account of any Linux system.
Try the following command.
$ sudo id
Now, you will find the id* command worked as root instead of your regular user.
If you want to become root user for more than one command, then use the following command, and provide the root
password to the input.
$ su -
Important: To be able to use sudo command, you must have your user mentioned in the /etc/sudoers file. The best way to edit the file is to use visudo command as root user.
Important: Readthemanpagesofsuandsudocommand.
4.6 Adding a new user
The useradd command adds a new user to the system. As you can well guess, this command has to execute as root, otherwise anyone can add random user accounts in the system. The following command adds a new user babai to the system.
$ sudo useradd babai
In Fedora, the initial user you create gets the uid 1000.
                    4.3. Detailsaboutgroups 21

Linux command line for you and me Documentation, Release 0.1
 4.7 Changing user passwords
The passwd command helps to change any user password.
4.8 Modifying existing user details
The usermod command can help to modify an existing user. You can use the same command to lock user account in the system.
The last command in the above example unlocks the user account.
4.9 Deleting a user
We use the userdel command to delete a user from the system.
4.10 Adding a new group
The groupadd command adds a new group. You can also pass the group id as an option. In the following example we are adding a new group called firejumpers.
$ sudo groupadd -g 4001 firejumpers
4.11 Adding new group to an user
We can use usermod command to add any extra group to any of our system user. In the following example, we are adding firejumpers group to our vagrant user.
$ sudo usermod -aG firejumpers vagrant
Important: Remember to use -a flag, or else it will delete all groups for the user and have only the new group you have mentioned in the command.
    $ sudo passwd babai
Changing password for user babai.
New password:
Retype new password:
passwd: all authentication tokens updated successfully.
     $ sudo usermod -L babai
$ su - babai
Password:
su: Authentication failure
$ sudo usermod -U babai
              22 Chapter4. UsersandGroups

CHAPTER 5
File permissions
Linux follows long Unix history, and has the same kinds of permission and ownership of files and directories. In this chapter, we will learn in detail about the same.
Let us look at the output of ls -l command.
The first column contains the permission details of each file and directory. The permissions are displayed using groups of three values, r for read access, w for write access, and x for execute access. These 3 values are mentioned for owner, group, and other user accounts. The first - can be d for directories or l for links.
There’s another way to calculate the same file permissions, using numbers.
This means, if you want to give read and write access only to the owner and group, you mention it like this “660”, where the first digit is for the owner, second digit is for the group, and the third digit is for the other users. We can use this format along with the chmod command to change permissions of any file or directory.
5.1 chmod command
chmod is the command which changes the file mode bits. Through chmod command one can alter the access permis- sions (i.e to permissions to read, write and execute) to file system objects (i.e files and directories). If we look at the command closely chmod is the abbreviation of change mode. A few examples are given below.
      $ ls -l
total 24
drwxrwxr-x. 2 fedora fedora 4096 Jun 24 08:00 dir1
-rw-rw-r--. 1 fedora fedora  174 Jun 23 13:26 files.tar.bz2
-rw-rw-r--. 1 fedora fedora  164 Jun 23 13:20 files.tar.gz
-rw-rw-r--. 1 fedora fedora   19 Jun 23 14:14 hello.txt
lrwxrwxrwx. 1 fedora fedora   13 Jun 23 12:32 name -> /etc/hostname
   Read
  4
 Write
  2
 Execute
  1
    23

Linux command line for you and me Documentation, Release 0.1
     $ echo "hello" > myfile.txt
$ cat myfile.txt
hello
$ ls -l myfile.txt
-rw-rw-r--. 1 fedora fedora 6 Jun 25 03:42 myfile.txt
$ chmod 000 myfile.txt
$ ls -l myfile.txt
----------. 1 fedora fedora 6 Jun 25 03:42 myfile.txt
$ cat myfile.txt
cat: myfile.txt: Permission denied
$ chmod 600 myfile.txt
$ ls -l myfile.txt
-rw-------. 1 fedora fedora 6 Jun 25 03:42 myfile.txt
$ cat myfile.txt
hello
 In the first line, we created a new file called myfile.txt using the echo command (we redirected the output of echo into the file). Using the chmod 000 myfile.txt command, we removed the read/write permissions of the file, and as you can see in the next line, even the owner of the file cannot read it. Setting the mode to 600 brings back read/write capability to the owner of that particular file.
The executable permission bit is required for directory access, and also for any file you want to execute.
5.2 PATH variable
The PATH variable is a special variable. When we type a command in the bash shell, it searches for the command in the directories mentioned, in the PATH variable. We can see the current PATH value using the echo command.
The different directories are separated by `:`. You can see the /home/fedora/bin directory is mentioned in the path. This means if we have that directory, and an executable file is in there, we can use it as a normal command in our shell. We will see an example of this, later in the book.
5.3 .bashrc file
The ~/.bashrc is a special configuration file for your bash terminal. You can define or delete or update environment variables and many things more.
For example, if want to add a new directory path to the PATH variable, then we can add the following line at the end of the ~/.bashrc file.
export PATH=/mnt/myproject/bin:$PATH
Remember to logout and login again to see the change. Important: Toknowmore,readthemanpageofbashcommand.
    $ echo $PATH
/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/fedora/.local/bin:/home/
˓→fedora/bin
         24 Chapter5. Filepermissions

Linux command line for you and me Documentation, Release 0.1
 5.4 which command
We use the which command, to find the exact path of the executable being used by a command in our shell.
The second example shows the output in case the which command cannot find the executable mentioned.
5.5 she-bang or sha-bang in executable files
she-bang or sha-bang is the first line in scripts; which starts with #! and then the path of the interpreter to be used for the rest of the file. We will create a simple bash hello world script using the same, and then execute it.
    $ which chmod
/usr/bin/chmod
$ which tree
/usr/bin/which: no tree in (/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/
˓→fedora/.local/bin:/home/fedora/bin)
      $ vim hello.sh
$ chmod +x hello.sh
$ ./hello.sh
Hello World!
  5.4. whichcommand 25

Linux command line for you and me Documentation, Release 0.1
  26 Chapter5. Filepermissions

CHAPTER 6
Processes in Linux
A process is a program (think about any Linux application) in a running state. It contains various details, like the memory space the program needs, a process id, the files opened by the process, etc.
6.1 How to view all running processes?
The following command shows all the processes from your computer.
      $ ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY
root         1  0.0  0.0 215356  4984 ?
˓→systemd --system --deserialize 19 root 20.00.000?
STAT START
Ss   May29
S    May29
S<   May29
S    May29
S    May29
TIME COMMAND
0:28 /usr/lib/systemd/
0:00 [kthreadd]
0:00 [kworker/0:0H]
0:11 [ksoftirqd/0]
8:27 [rcu_sched]
root 40.00.0 0 0 root 60.00.0 0 0 root 70.00.0 0 0 ... long output
? ? ?
 You can see that the output also tells you under which user the process is running, what the actual command being used is, and the percentage of CPU and memory usage.
The PID column shows the process id; you can see that the systemd process has PID 1, which means it is the first process to start in the system.
6.2 How to find a particular process?
Let’s say, I want to know the process id of the Firefox browser in my system. I can use the following command to find that information.
 27

Linux command line for you and me Documentation, Release 0.1
     $ ps aux | grep firefox
kdas     26752 96.1  9.7 2770724 763436 ?      Sl   16:16   0:35 /usr/lib64/firefox/
˓→firefox
kdas 26919 0.0 0.0 118520 980 pts/3 S+ 16:17 0:00 grep --color=auto
˓→firefox
  Here, we are first running the ps command, and then passing the output of that to the next command using the | character. In this case, as you see, grep is that second command. We can find and look for text using the grep tool. We will learn more about grep in the future.
6.3 How to kill/stop a particular process?
We can kill/stop any process using the kill command. We found out, in the last example, that the id of the Firefox process in my computer is 26752, we can use that id to kill it.
$ kill 26752
If there is no error message, you’ll find that Firefox has disappeared.
6.4 Finding out list of open files
lsof command will show list of all open files. The man page has more details about the different command line options available.
6.5 Signals
Signals are a limited way to communicate to a process. You can think about them as notifications to a process, and depending on the signal handler in the code, the process does something with that signal. The kill command actually sends a signal to the given process id, the default signal is TERM, which says to terminate the process. To directly/forcibly kill a process, you can send the KILL signal.
$ kill -9 26752
Here 9 is number representation of the KILL signal. To know more about Linux signals, read the man page. $ man 7 signal
kill command also has a -l flag, which prints all of the signal names, and numbers on the screen.
                   $ kill -l
1) SIGHUP
6) SIGABRT
11) SIGSEGV
16) SIGSTKFLT 17) SIGCHLD
21) SIGTTIN   22) SIGTTOU
26) SIGVTALRM 27) SIGPROF
31) SIGSYS    34) SIGRTMIN
3) SIGQUIT
 8) SIGFPE
13) SIGPIPE
18) SIGCONT
23) SIGURG
28) SIGWINCH
35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3
38) SIGRTMIN+4
43) SIGRTMIN+9
48) SIGRTMIN+14
39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8
44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13
49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12
2) SIGINT
4) SIGILL
 5) SIGTRAP
10) SIGUSR1
15) SIGTERM
20) SIGTSTP
25) SIGXFSZ
30) SIGPWR
 7) SIGBUS
12) SIGUSR2
 9) SIGKILL
14) SIGALRM
19) SIGSTOP
24) SIGXCPU
29) SIGIO
 (continues on next page)
 28 Chapter6. ProcessesinLinux

    53) SIGRTMAX-11
58) SIGRTMAX-6
63) SIGRTMAX-1
54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7
59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2
64) SIGRTMAX
 6.6 top command
Linux command line for you and me Documentation, Release 0.1
 top is a very useful command while using a Linux system. It’s a quick way to know about all the running processes in the system, and their related status about CPU and memory usage in general. To get out of top, press the key q.
(continued from previous page)
    top - 17:37:28 up 24 days, 11:52,  2 users,  load average: 0.57, 0.73, 0.75
Tasks: 372 total,   2 running, 370 sleeping,   0 stopped,   0 zombie
%Cpu(s): 11.6 us,  2.6 sy,  0.0 ni, 84.9 id,  0.1 wa,  0.3 hi,  0.5 si,  0.0 st
KiB Mem :  7858752 total,  1701052 free,  4444136 used,  1713564 buff/cache
KiB Swap:  3268604 total,  1558396 free,  1710208 used.  2431656 avail Mem
  PID USER
28300 kdas
2668 kdas
15122 kdas
24760 kdas
27526 kdas
    1 root
    2 root
    4 root
    6 root
    7 root
... long output
PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
20   0 1502016 287340  44396 R  25.0  3.7 290:56.60 chrome
9 -11 2067292   9756   7164 S   6.2  0.1 166:06.48 pulseaudio
200 200 200 200 200
0 -20 200 200
 771844  33104
1945840 209128
 156076   4268
 215356   4880
      0      0
      0      0
      0      0
      0      0
11352 S   6.2  0.4  39:24.60 gnome-terminal-
76952 S   6.2  2.7   1:41.15 code
 3516 R   6.2  0.1   0:00.01 top
 3108 S   0.0  0.1   0:28.25 systemd
    0 S   0.0  0.0   0:00.66 kthreadd
    0 S   0.0  0.0   0:00.00 kworker/0:0H
    0 S   0.0  0.0   0:11.79 ksoftirqd/0
    0 S   0.0  0.0   8:28.06 rcu_sched
 By the way, feel free to press 1 and see if anything changes in the top command output.
6.7 Load average
If you look at the top output carefully, you will find load average mentioned. Actually, there are 3 numbers provided; these are the load averages of the system in the last one minute, 5 minutes ago, and 15 minutes ago.
load average: 0.57, 0.73, 0.75
In simple words, load average means the average time any process has to wait to get access to the CPU (or other resources), in idle state the load average is 0. This information is a quick way to learn about the system, if the system is slow to respond, just looking at the load-average, and then the rest of the top output should be a good starting point.
6.8 htop tool
htop is a modern version of the top tool. It has many more features, interactiveness being the biggest amongst them. htop does not come by default in most of the Linux installations, which means you will have to install it using the system’s package management tool.
These are the ways to install it in Fedora and in Debian/Ubuntu
      6.6. topcommand 29

Linux command line for you and me Documentation, Release 0.1
     $ sudo dnf install htop -y
$ sudo apt-get install htop
To know more about htop, please read the man page.
$ man htop
6.9 More about Linux processes
You can learn more about Linux processes in the glibc manual. Use the info command to find out more. $ info libc process
6.10 /proc directory
/proc is a special directory in our filesystem. This is a virtual filesystem which contains information about all the running processes, and information about the hardware present in the system. You will find that the files in the virtual filesystem are 0 in size.
Now we’ll learn about a few files inside this directory.
                  30 Chapter6. ProcessesinLinux

Linux command line for you and me Documentation, Release 0.1
 6.11 /proc/cpuinfo
/proc/cpuinfo file has information about the CPU in your system. It includes the model number, and also the various flags available in that particular CPU model.
6.12 /proc/cmdline
/proc/cmdline file has all the parameters passed to the kernel at the bootup time. The following is a cloud-based virtual machine.
6.13 /proc/meminfo
/proc/meminfo contains information related to the memory in the system. You can see the total amount RAM, the available memory and other values there.
    $ cat /proc/cmdline
BOOT_IMAGE=/boot/vmlinuz-4.8.6-300.fc25.x86_64 root=UUID=9be70055-35f2-4a57-b120-
˓→5a003dfdb504 ro no_timer_check console=tty1 console=ttyS0,115200n8 rhgb quiet ˓→console=ttyS1 LANG=en_US.UTF-8 initrd=/boot/initramfs-4.8.6-300.fc25.x86_64.img
      $ cat /proc/meminfo
MemTotal:
MemFree:
MemAvailable:
Buffers:
Cached:
SwapCached:
Active:
Inactive:
Active(anon):
Inactive(anon):
Active(file):
Inactive(file):
Unevictable:
Mlocked:
SwapTotal:
SwapFree:
Dirty:
Writeback:
AnonPages:
Mapped:
Shmem:
Slab:
SReclaimable:
SUnreclaim:
KernelStack:
PageTables:
NFS_Unstable:
Bounce:
WritebackTmp:
CommitLimit:
Committed_AS:
4046820 kB
2960568 kB
3696216 kB
53756 kB 830052 kB 0 kB 347216 kB 575692 kB 39388 kB 196 kB 307828 kB 575496 kB 0kB 0kB 0kB 0kB 4kB 0kB 39120 kB 42032 kB 488 kB 141692 kB 114996 kB 26696 kB 1360 kB 2700 kB 0 kB 0 kB 0 kB 2023408 kB 127752 kB
 (continues on next page)
 6.11. /proc/cpuinfo 31

Linux command line for you and me Documentation, Release 0.1
 6.14 /proc/uptime
    $ cat /proc/uptime
52820.32 104802.84
 The first value in this file shows the number of seconds the system is up. The second value is the total number of idle seconds for each CPU, so for the modern systems, this value can be more than the first value.
6.15 /proc/sys/ & sysctl command
This directory is a special one for system administrators. This not only provides information, but also allows you to quickly change (enable/disable) different kernel features.
We use the sysctl command to view or edit the values for /proc/sys/. If you want to see all the different settings, use the following command.
(continued from previous page)
    VmallocTotal:
VmallocUsed:
VmallocChunk:
HardwareCorrupted:
AnonHugePages:
ShmemHugePages:
ShmemPmdMapped:
CmaTotal:
CmaFree:
HugePages_Total:
HugePages_Free:
HugePages_Rsvd:
HugePages_Surp:
Hugepagesize:
DirectMap4k:
DirectMap2M:
DirectMap1G:
      0 kB
      0 kB
      0 kB
      0 kB
      0 kB
      0 kB
      0 kB
      0
0
0
0 2048 kB
  61296 kB
4132864 kB
2097152 kB
34359738367 kB
       0 kB
     $ sudo sysctl -a
[sudo] password for kdas:
abi.vsyscall32 = 1
crypto.fips_enabled = 0
debug.exception-trace = 1
debug.kprobes-optimization = 1
dev.cdrom.autoclose = 1
dev.cdrom.autoeject = 0
dev.cdrom.check_media = 0
dev.cdrom.debug = 0
dev.cdrom.info = CD-ROM information, Id: cdrom.c 3.20 2003/12/17
... long output
 6.16 Enabling IP forward with sysctl
To enable IP forwarding to the VM(s), use the following command.
 32 Chapter6. ProcessesinLinux

Linux command line for you and me Documentation, Release 0.1
     $ sudo sysctl -w net.ipv4.ip_forward=1
To check the current value, use the following command.
$ sysctl net.ipv4.ip_forward
You can see the same value in the /proc/sys/net/ipv4/ip_forward file too.
To make the change permanent, write the following in the /etc/sysctl.conf file. net.ipv4.ip_forward = 1
Then, enable the changes using the following command.
$ sudo sysctl -p /etc/sysctl.conf
          $ cat /proc/sys/net/ipv4/ip_forward
1
            6.16. EnablingIPforwardwithsysctl 33

Linux command line for you and me Documentation, Release 0.1
  34 Chapter6. ProcessesinLinux

This is also a chapter related to the systemd tool.
7.1 What is a service?
A service is a process or application which is running in the background, either doing some predefined task or waiting for some event. If you remember our process chapter, we learned about systemd for the first time there. It is the first process to run in our system; it then starts all the required processes and services. To know about how the system boots up, read the bootup man page. Click here to read it online.
$ man bootup
7.2 What is a daemon?
Daemon is the actual term for those long-running background processes. A service actually consists of one or more daemons.
7.3 What is the init system?
If you look at Unix/Linux history, you will find the first process which starts up, is also known as init process. This process used to start other processes by using the rc files from /etc/rc.d directory. In the modern Linux systems, systemd has replaced the init system.
7.4 Units in systemd
Units are a standardized way for the systemd to manage various parts of a system. There are different kinds of units, .service is for system services, .path for path based ones. There is also .socket which are socket based systemd units.
CHAPTER 7
Linux Services
        35

Linux command line for you and me Documentation, Release 0.1
 There are various other types, we can learn about those later.
7.5 .service units in systemd
These are service units, which explains how to manage a particular service in the system. In our daily life, we generally only have to work with these unit files.
7.6 How to find all the systemd units in the system?
    $ systemctl
... long output
-.mount ˓→mounted /
boot.mount ˓→mounted /boot
dev-hugepages.mount
˓→mounted Huge Pages File System
dev-mqueue.mount
˓→mounted POSIX Message Queue File System
home.mount ˓→mounted /home
proc-fs-nfsd.mount
˓→mounted NFSD configuration filesystem
run-user-1000-doc.mount ˓→mounted /run/user/1000/doc
run-user-1000-gvfs.mount ˓→mounted /run/user/1000/gvfs
run-user-1000.mount ˓→mounted /run/user/1000
run-user-42.mount ˓→mounted /run/user/42
... long output
loaded active
loaded active
loaded active
loaded active
loaded active
loaded active
loaded active
loaded active
loaded active
loaded active
           In the output of the systemctl command, you should be able to see all the different kinds of units in the system. If you want to see only the service units, then use the following command.
$ systemctl --type=service
7.7 Working with a particular service
Let us take the sshd.service as an example. The service controls the sshd daemon, which allows us to remotely login to a system using the ssh command.
To know the current status of the service, I execute the following command.
(continues on next page)
         $ sudo systemctl status sshd
 sshd.service - OpenSSH server daemon
Loaded: loaded (/usr/lib/systemd/system/sshd.service; disabled; vendor preset: ˓→enabled)
  Active: inactive (dead)
    Docs: man:sshd(8)
   36 Chapter7. LinuxServices

Linux command line for you and me Documentation, Release 0.1
 (continued from previous page)
              man:sshd_config(5)
Jun 19 12:07:29 kdas-laptop sshd[19533]: Accepted password for kdas from 192.168.1. ˓→101 port 61361 ssh2
Jun 20 17:57:53 kdas-laptop sshd[30291]: Connection closed by 192.168.1.101 port ˓→63345 [preauth]
Jun 20 17:58:02 kdas-laptop sshd[30293]: Accepted password for kdas from 192.168.1. ˓→101 port 63351 ssh2
Jun 20 18:32:11 kdas-laptop sshd[31990]: Connection closed by 192.168.1.101 port ˓→64352 [preauth]
Jun 20 18:32:17 kdas-laptop sshd[32039]: Accepted password for kdas from 192.168.1. ˓→101 port 64355 ssh2
Jun 20 18:45:57 kdas-laptop sshd[32700]: Accepted password for kdas from 192.168.1. ˓→101 port 64824 ssh2
Jun 21 08:44:39 kdas-laptop sshd[15733]: Accepted password for kdas from 192.168.1. ˓→101 port 51574 ssh2
Jun 22 18:17:24 kdas-laptop systemd[1]: Stopping OpenSSH server daemon...
Jun 22 18:17:24 kdas-laptop sshd[20932]: Received signal 15; terminating.
Jun 22 18:17:24 kdas-laptop systemd[1]: Stopped OpenSSH server daemon.
   To start the service, I’ll use the following command, and then I can use the status argument to the systemctl to check the service status once again.
    $ sudo systemctl start sshd
$ sudo systemctl status sshd
 sshd.service - OpenSSH server daemon
  Loaded: loaded (/usr/lib/systemd/system/sshd.service; disabled; vendor preset:
˓→enabled)
Active: active (running) since Thu 2017-06-22 18:19:28 IST; 1s ago
    Docs: man:sshd(8)
          man:sshd_config(5)
Main PID: 3673 (sshd)
    Tasks: 1 (limit: 4915)
  CGroup: /system.slice/sshd.service
            3673 /usr/sbin/sshd -D
Jun 22 18:19:28 kdas-laptop systemd[1]: Starting OpenSSH server daemon...
Jun 22 18:19:28 kdas-laptop sshd[3673]: Server listening on 0.0.0.0 port 22.
Jun 22 18:19:28 kdas-laptop sshd[3673]: Server listening on :: port 22.
Jun 22 18:19:28 kdas-laptop systemd[1]: Started OpenSSH server daemon.
   In the same way, we can use either the stop or restart arguments to the systemctl command.
7.8 Enabling or disabling a service
Even if you start a service, you’ll find that after you reboot the computer, the service did not start at the time of boot up. To do so, you will have to enable the service, or to stop a service from starting at boot, you will have to disable the service.
    $ sudo systemctl enable sshd.service
Created symlink /etc/systemd/system/multi-user.target.wants/sshd.service → /usr/lib/
˓→systemd/system/sshd.service.
$ sudo systemctl disable sshd.service
Removed /etc/systemd/system/multi-user.target.wants/sshd.service.
  7.8. Enablingordisablingaservice 37

Linux command line for you and me Documentation, Release 0.1
 7.9 Shutdown or reboot the system using systemctl
We can also reboot or shutdown the system using the systemctl command.
7.10 Finding the logs of a service
We can use the journalctl command to find the log of a given service. The general format is journalctl -u service- name”. Like below is the log for *sshd service.
    $ sudo systemctl reboot
$ sudo systemctl shutdown
     $ sudo journalctl -u sshd
-- Logs begin at Thu 2017-06-22 14:16:45 UTC, end at Fri 2017-06-23 05:21:29 UTC. --
Jun 22 14:17:39 kushal-test.novalocal systemd[1]: Starting OpenSSH server daemon...
Jun 22 14:17:39 kushal-test.novalocal systemd[1]: sshd.service: PID file /var/run/
˓→sshd.pid not readable (yet?) after start: No such file or directory
Jun 22 14:17:39 kushal-test.novalocal sshd[827]: Server listening on 0.0.0.0 port 22. Jun 22 14:17:39 kushal-test.novalocal sshd[827]: Server listening on :: port 22.
Jun 22 14:17:39 kushal-test.novalocal systemd[1]: Started OpenSSH server daemon.
Jun 22 14:22:08 kushal-test.novalocal sshd[863]: Accepted publickey for fedora from
˓→103.249.881.17 port 56124 ssh2: RSA SHA256:lvn4rIszmfB14PBQwh4k9C
Jun 22 14:29:24 kushal-test.novalocal systemd[1]: Stopping OpenSSH server daemon... Jun 22 14:29:24 kushal-test.novalocal sshd[827]: Received signal 15; terminating.
Jun 22 14:29:24 kushal-test.novalocal systemd[1]: Stopped OpenSSH server daemon.
Jun 22 14:29:24 kushal-test.novalocal systemd[1]: Starting OpenSSH server daemon... Jun 22 14:29:24 kushal-test.novalocal sshd[2164]: Server listening on 0.0.0.0 port 22. Jun 22 14:29:24 kushal-test.novalocal sshd[2164]: Server listening on :: port 22.
Jun 22 14:29:24 kushal-test.novalocal systemd[1]: Started OpenSSH server daemon.
Jun 22 14:54:26 kushal-test.novalocal sshd[13522]: Invalid user from 139.162.122.110
˓→port 51012
Jun 22 14:54:26 kushal-test.novalocal sshd[13522]: input_userauth_request: invalid
˓→user [preauth]
Jun 22 14:54:26 kushal-test.novalocal sshd[13522]: Failed none for invalid user from
˓→139.162.122.110 port 51012 ssh2
Jun 22 14:54:26 kushal-test.novalocal sshd[13522]: Connection closed by 139.162.122.
˓→110 port 51012 [preauth]
Jun 22 15:15:29 kushal-test.novalocal sshd[13541]: Did not receive identification
˓→string from 5.153.62.226 port 48677
      7.11 Continuous stream of logs
In case you want to monitor the logs of any service, that is keep reading the logs in real time, you can use -f flag with the journalctl command.
$ sudo journalctl -f -u sshd
-- Logs begin at Thu 2017-06-22 14:16:45 UTC. --
Jun 23 03:39:09 kushal-test.novalocal sshd[14095]: Did not receive identification
˓→string from 158.85.81.118 port 10000
Jun 23 04:13:32 kushal-test.novalocal sshd[14109]: Received disconnect from 221.194.
˓→47.242 port 55028:11: [preauth]
Jun 23 04:13:32 kushal-test.novalocal sshd[14109]: Disconnected from 221.194.47.242
      ˓→port 55028 [preauth]
(continues on next page)
  38 Chapter7. LinuxServices

Linux command line for you and me Documentation, Release 0.1
 (continued from previous page)
    Jun 23 04:33:59 kushal-test.novalocal sshd[14115]: Received disconnect from 59.45.175. ˓→64 port 36248:11: [preauth]
Jun 23 04:36:53 kushal-test.novalocal sshd[14121]: Did not receive identification ˓→string from 82.193.122.22 port 58769
Jun 23 04:42:01 kushal-test.novalocal sshd[14123]: Received disconnect from 221.194. ˓→47.233 port 51797:11: [preauth]
Jun 23 04:42:01 kushal-test.novalocal sshd[14123]: Disconnected from 221.194.47.233 ˓→port 51797 [preauth]
Jun 23 04:51:46 kushal-test.novalocal sshd[14130]: Did not receive identification ˓→string from 191.253.13.227 port 4668
Jun 23 05:05:16 kushal-test.novalocal sshd[14189]: Received disconnect from 59.45.175. ˓→88 port 33737:11: [preauth]
Jun 23 05:05:16 kushal-test.novalocal sshd[14189]: Disconnected from 59.45.175.88 ˓→port 33737 [preauth]
     I can see that someone was trying to break into this VM by trying random ports :)
7.12 Listing of previous boots
In systems like Fedora, journalctl by default keeps history from past boots. To know about all available boot history, type the following command.
    $ sudo journalctl --list-boots
[sudo] password for fedora:
-112 7a88e13a76434a1199f82ad90441ae7f Tue 2014-12-09 03:41:08 IST--Tue 2014-12-09
˓→03:41:08 IST
-111 b86086ed59b84b228e74f91ab08a66b3 Sun 2015-06-28 23:54:26 IST--Sun 2015-07-12
˓→07:27:48 IST
-110 71d3f6024f514653bfd2574243d096d1 Sun 2016-06-05 01:51:05 IST--Sun 2016-06-05
˓→01:51:16 IST
-109 b7721878a5144d009418cf269b5eea71 Fri 2016-08-19 19:47:57 IST--Sat 2016-08-20
˓→01:16:07 IST
-108 6102102fc7804379b888d83cea66838b Sat 2016-08-20 01:21:36 IST--Sun 2016-08-21
˓→00:05:38 IST ... long output
      To know about any particular boot log, you can use the hash along with -b flag to the journalctl command.
    $ sudo journalctl -b 7a88e13a76434a1199f82ad90441ae7f
-- Logs begin at Tue 2014-12-09 03:41:08 IST, end at Sat 2017-06-24 13:40:49 IST. --
Dec 09 03:41:08 localhost.localdomain systemd[1344]: Stopping Default.
Dec 09 03:41:08 localhost.localdomain systemd[1344]: Stopped target Default.
Dec 09 03:41:08 localhost.localdomain systemd[1344]: Starting Shutdown.
Dec 09 03:41:08 localhost.localdomain systemd[1344]: Reached target Shutdown.
Dec 09 03:41:08 localhost.localdomain systemd[1344]: Starting Exit the Session..
 7.13 Time-based log viewing
We can also use journalctl to view logs for a certain time period. For example, if we want to see all the logs since yesterday, we can use the following command.
 7.12. Listingofpreviousboots 39

Linux command line for you and me Documentation, Release 0.1
     $ sudo journalctl --since yesterday
[sudo] password for fedora:
-- Logs begin at Tue 2014-12-09 03:41:08 IST, end at Sat 2017-06-24 15:21:54 IST. --
Jun 23 00:00:00 kushal-test.novalocal /usr/libexec/gdm-x-session[28622]: (evolution-
˓→alarm-notify:11609): evolution-alarm-notify-WARNING **: alarm.c:253: Reques
Jun 23 00:01:01 kushal-test.novalocal CROND[22327]: (root) CMD (run-parts /etc/cron.
˓→hourly)
... long output
 You can also use date time following YYYY-MM-DD HH:MM:SS format.
    $ sudo journalctl --since "2015-11-10 14:00:00"
-- Logs begin at Tue 2014-12-09 03:41:08 IST, end at Sat 2017-06-24 15:25:30 IST. --
Jun 05 01:51:05 kushal-test.novalocal systemd[5674]: Reached target Timers.
Jun 05 01:51:05 kushal-test.novalocal systemd[5674]: Reached target Paths.
Jun 05 01:51:05 kushal-test.novalocal systemd[5674]: Starting D-Bus User Message Bus
˓→Socket.
Jun 05 01:51:05 kushal-test.novalocal systemd[5674]: Listening on D-Bus User Message
˓→Bus Socket.
Jun 05 01:51:05 kushal-test.novalocal systemd[5674]: Reached target Sockets.
Jun 05 01:51:05 kushal-test.novalocal systemd[5674]: Reached target Basic System. Jun 05 01:51:05 kushal-test.novalocal systemd[5674]: Reached target Default.
    40 Chapter7. LinuxServices

CHAPTER 8
Package management
In the Free and Open Source Software world, most software is released in source code format by developers. This means that generally, if you want to install a piece of software, you will find the source code on the website of the project. As a user, you will have to find and install all the other bits of software, that this particular piece depends on (the dependencies) and then install the software. To solve this painful issue, all Linux distributions have something called a package management system. Volunteers (mostly) all across the world help make binary software packages out of source code released by the developers, in such a way that users of the Linux distribution can easily install, update or remove that software.
It’s generally recommended, we use the package management system that comes with the distribution, to install software for the users. If you are really sure about what you’re doing in the system, you can install from the source files too; but that can be dangerous.
8.1 dnf command
dnf is the package management system in Fedora. The actual packages come in the rpm format. dnf helps you search, install or uninstall any package from the Fedora package repositories. You can also use the same command to update packages in your system.
8.2 Searching for a package
      $ dnf search pss
Fedora 25 - x86_64
˓→50 MB 00:01
Fedora 25 - x86_64 - Updates
˓→23 MB 00:00
Last metadata expiration check: 0:00:07 ago on Sun Jun 25 04:14:22 2017. =========================================== N/S Matched: pss
˓→============================================
pss.noarch : A power-tool for searching inside source code files pssh.noarch : Parallel SSH tools
34 MB/s |
41 MB/s |
     41

Linux command line for you and me Documentation, Release 0.1
 First the tool, downloads all the latest package information from the repository, and then gives us the result.
8.3 Finding more information about a package
dnf info gives us more information about any given package.
8.4 Installing a package
The dnf install command helps us install any given package. We can pass more than one package name as the argument.
$ sudo dnf install pss wget
Last metadata expiration check: 0:37:13 ago on Sun Jun 25 03:44:07 2017.
Package wget-1.18-3.fc25.x86_64 is already installed, skipping.
Dependencies resolved.
=====================================================================================================
Package                         Arch                               Version
˓→ Repository Size ===================================================================================================== Installing:
pss noarch 1.40-6.fc25
˓→ fedora 58 k
Transaction Summary
=====================================================================================================
Install  1 Package
Total download size: 58 k
Installed size: 196 k
Is this ok [y/N]: y
Downloading Packages:
pss-1.40-6.fc25.noarch.rpm
(continues on next page)
       ˓→ 969 kB/s | 58 kB --------------------------------------------------------------------------------------
00:00 ˓→---------------------------------------------------------------
  42 Chapter8. Packagemanagement
    $ dnf info pss
Last metadata expiration check: 0:04:59 ago on Sun Jun 25 04:14:22 2017. Available Packages
Name : pss
Arch : noarch
Epoch :0
Version : 1.40
Release : 6.fc25
Size :58k
Repo : fedora
Summary : A power-tool for searching inside source code files
URL : https://github.com/eliben/pss
License : Public Domain
Description : pss is a power-tool for searching inside source code files.
˓→git),
: pss searches recursively within a directory tree, knows which
: extensions and file names to search and which to ignore, automatically
: skips directories you wouldn't want to search in (for example .svn or .
: colors its output in a helpful way, and does much more.
 
Linux command line for you and me Documentation, Release 0.1
 (continued from previous page)
    Total
˓→ 118 kB/s | 58 kB
Running transaction check
Transaction check succeeded.
Running transaction test
Transaction test succeeded.
Running transaction
  Installing  : pss-1.40-6.fc25.noarch
00:00
  ˓→ Verifying
˓→
: pss-1.40-6.fc25.noarch
1/1 1/1
 Installed:
  pss.noarch 1.40-6.fc25
Complete!
 8.5 apt command
apt is the package management system for the Debian Linux distribution. As Ubuntu is downstream of the Debian distribution, it also uses the same package management system.
8.6 apt-get update
The apt-get update command is used to update all the package information for the Debian repositories.
8.7 apt-get install
sudo apt-get install is the command used to install any given package from the repository.
    $ apt-get update
... long output
  8.5. aptcommand 43

Linux command line for you and me Documentation, Release 0.1
  44 Chapter8. Packagemanagement

CHAPTER 9
File system mounting
In this chapter, we’ll learn how to mount file systems. If you type mount in the shell, it will tell you about various file systems, and how are they mounted (as a directory) in the system.
      $ mount
sysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime,seclabel)
proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
devtmpfs on /dev type devtmpfs (rw,nosuid,seclabel,size=2012852k,nr_inodes=503213,
˓→mode=755)
securityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime) tmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,seclabel)
devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,seclabel,gid=5,mode=620,
˓→ptmxmode=000)
tmpfs on /run type tmpfs (rw,nosuid,nodev,seclabel,mode=755)
tmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,seclabel,mode=755)
cgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,
˓→release_agent=/usr/lib/systemd/systemd-cgroups-agent,name=systemd)
pstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime,seclabel)
cgroup on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices) cgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_
˓→event)
cgroup on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer) cgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio) cgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpu,
˓→cpuacct)
cgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,
˓→relatime,net_cls,net_prio)
cgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids) cgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory) cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset) cgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb) configfs on /sys/kernel/config type configfs (rw,relatime)
/dev/vda1 on / type ext4 (rw,relatime,seclabel,data=ordered)
selinuxfs on /sys/fs/selinux type selinuxfs (rw,relatime)
systemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=23,pgrp=1,timeout=0,
˓→minproto=5,maxproto=5,direct,pipe_ino=11175)
 (continues on next page)
 45

Linux command line for you and me Documentation, Release 0.1
 (continued from previous page)
If you look carefully at the output above, you’ll find that /dev/vda1 is mounted as root / in the system. This is actually the primary hard drive in this system. The device can be different based on the system.
• /dev/vd* For virtual machines
• /dev/sd* For physical machines
The number at the end of the device name is the partition number.
9.1 Connecting USB drives to your system
If you connect vfat partitioned USB drives (the normal pendrives), they will auto mount under the /run/media/username/ directory. But, for NTFS based drives, you will have to install the driver to mount those parti- tions.
$ sudo dnf install ntfs-3g -y
9.2 Mounting a device
We can use the mount command to mount a file system on an existing directory. The syntax to do that is, mount device /path/to/mount/at.
$ sudo mount /dev/sdb1 /mnt
In the example above, we mounted /dev/sdb1 on the /mnt directory.
9.3 Unmounting
We use the umount command on a given directory to unmount the file system.
Do not remove any drive from the system before unmounting them. Just to be on the safe side, you can execute the sync command, which will write any existing cache to the drives. That will make sure that your chances of losing data is marginal.
9.4 Encrypting drives with LUKS (for only Linux)
Follow this link to learn about how to encrypt your drives with LUKS. This is a simple way to make sure that even if you loose your USB drive, the data inside can still be safe (relatively).
    mqueue on /dev/mqueue type mqueue (rw,relatime,seclabel)
debugfs on /sys/kernel/debug type debugfs (rw,relatime,seclabel)
hugetlbfs on /dev/hugepages type hugetlbfs (rw,relatime,seclabel)
tmpfs on /run/user/1000 type tmpfs (rw,nosuid,nodev,relatime,seclabel,size=404680k,
˓→mode=700,uid=1000,gid=1000)
            46 Chapter9. Filesystemmounting

Linux command line for you and me Documentation, Release 0.1
 9.5 Encrypting drives for any OS using Veracrypt
VeraCrypt is an open source volume management tool compatible with macOS, Windows, and Linux systems. Here is an excellent guide from Freedom of the Press Foundation on how to use it.
 9.5. EncryptingdrivesforanyOSusingVeracrypt 47

Linux command line for you and me Documentation, Release 0.1
  48 Chapter9. Filesystemmounting

CHAPTER 10
Networking commands
In this chapter, we will learn about a few basic networking commands, which will help us in our daily Linux usage.
10.1 Finding the IP address
The ip command can be used to find the IP address of the system.
      $ ip addr show
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default
˓→qlen 1
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo
valid_lft forever preferred_lft forever
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1454 qdisc fq_codel state UP group ˓→default qlen 1000
    link/ether fa:16:3e:3c:ed:27 brd ff:ff:ff:ff:ff:ff
    inet 172.10.95.253/20 brd 172.10.111.255 scope global dynamic eth0
    valid_lft 57021sec preferred_lft 57021sec
    inet6 fe80::f816:3eff:fe3c:ed27/64 scope link
    valid_lft forever preferred_lft forever
   Here lo is a special device which points to the same system (also known as localhost). The IP 127.0.0.1 always points to the the localhost. eth0 is our ethernet device which connects to the network.
10.2 ping command
ping is simple way to find if you are connected to Internet or not. We can also ping any particular computer to find if the computer is connected to the network or not. Press Ctrl+c to stop the loop.
 49

Linux command line for you and me Documentation, Release 0.1
 $ ping google.com PING google.com (216.58.201.142) 56(84) bytes of data. 64 bytes from mad06s25- in-f142.1e100.net (216.58.201.142): icmp_seq=1 ttl=44 time=157 ms 64 bytes from mad06s25-in- f142.1e100.net (216.58.201.142): icmp_seq=2 ttl=44 time=156 ms 64 bytes from mad06s25-in- f142.1e100.net (216.58.201.142): icmp_seq=3 ttl=44 time=156 ms ^C — google.com ping statis- tics — 3 packets transmitted, 3 received, 0% packet loss, time 2000ms rtt min/avg/max/mdev = 156.373/156.811/157.566/0.704 ms
10.3 Short note about DNS
DNS or Domain Name System is a decentralized naming system for systems which are connected to Internet (can be for private networks too). This is the way a computer knows, which other computer to connect to, when we type google.com in our browser, or in the ping command. There are servers known as dns servers, and for every domain name it needs to find, the client system generally connects to these dns servers, and finds out the IP address of the computer at that domain name.
10.4 /etc/resolv.conf
/etc/resolv.conf is the configuration file for DNS. It contains the DNS server address to use for DNS queries.
The 1.1.1.1 is the DNS server from Cloudflare, and 8.8.8.8 is the DNS server hosted by Google.
10.5 host command
The host command will show you the IP address of any given hostname.
10.6 dig command
dig command can tell us DNS records, MX details (used to send emails) and other information for a given domain name.
(continues on next page)
    $ cat /etc/resolv.conf
# Generated by NetworkManager
nameserver 1.1.1.1
nameserver 8.8.8.8
     $ host www.example.com
www.example.com has address 93.184.216.34
www.example.com has IPv6 address 2606:2800:220:1:248:1893:25c8:1946
     $ dig kushaldas.in
; <<>> DiG 9.10.4-P8-RedHat-9.10.4-5.P8.fc25 <<>> kushaldas.in
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 50750
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1
;; OPT PSEUDOSECTION:
  50 Chapter10. Networkingcommands

Linux command line for you and me Documentation, Release 0.1
 (continued from previous page)
    ; EDNS: version: 0, flags:; udp: 512
;; QUESTION SECTION:
;kushaldas.in.                      IN      A
;; ANSWER SECTION:
kushaldas.in.               5528    IN      A
;; Query time: 66 msec
;; SERVER: 8.8.8.8#53(8.8.8.8)
;; WHEN: Sun Jun 25 11:37:00 IST 2017
;; MSG SIZE  rcvd: 57
208.113.152.208
 If you want to specify a DNS server to use, you can do that with the address specified at the end of the command along with a @ sign.
    $ dig rtnpro.com @208.67.222.222
; <<>> DiG 9.10.4-P8-RedHat-9.10.4-5.P8.fc25 <<>> rtnpro.com @208.67.222.222
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 27312
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1
;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;rtnpro.com.                        IN      A
;; AUTHORITY SECTION:
rtnpro.com.         3600    IN      SOA     dns1.bigrock.in. rtnpro.gmail.com.
˓→2017021401 7200 7200 172800 38400
;; Query time: 899 msec
;; SERVER: 208.67.222.222#53(208.67.222.222)
;; WHEN: Sun Jun 25 11:40:01 IST 2017
;; MSG SIZE  rcvd: 106
  10.7 ss command
ss command shows us socket statistics from the system. This command replaces the older netstat command. Read the man page of the command to know more about the different arguments we can pass at the command line.
    $ ss -putn
Netid State
Recv-Q Send-Q
Local Address:Port
 192.168.1.101:51496
          users:(("dropbox",
 192.168.1.101:47864
          users:(("chrome",
 192.168.1.101:59524
        users:(("ssh",
 ˓→ tcp ˓→
ESTAB
0
0
0
0
  Peer Address:Port
 162.125.34.129:443
 74.125.200.189:443
209.12.123.55:22
 ˓→pid=28797,fd=80)) tcp ESTAB 0
˓→
˓→pid=22112,fd=385)) tcp ESTAB 0
˓→ ˓→pid=26621,fd=3))
   (continues on next page)
 10.7. sscommand 51

Linux command line for you and me Documentation, Release 0.1
 ... long output
10.8 traceroute command
(continued from previous page)
     The traceroute command is used to show the full route of a network packet from the system to any given host.
    $ traceroute www.rtnpro.com
traceroute to www.rtnpro.com (146.185.181.157), 30 hops max, 60 byte packets
1  gateway (192.168.1.1)  1.434 ms  1.920 ms  1.891 ms
2  45.113.248.3 (45.113.248.3)  7.478 ms  10.335 ms  10.343 ms
3  45.113.248.1 (45.113.248.1)  10.319 ms  10.293 ms  10.274 ms
4  121.244.26.1.static-pune.vsnl.net.in (121.244.26.1)  26.938 ms  26.608 ms  27.165
˓→ms
5 172.31.183.162 (172.31.183.162) 9.883 ms 10.133 ms 10.122 ms
6 172.31.19.201 (172.31.19.201) 10.591 ms 172.29.250.33 (172.29.250.33) 6.894 ms
˓→172.31.19.201 (172.31.19.201) 8.203 ms
7 ix-ae-0-4.tcore1.MLV-Mumbai.as6453.net (180.87.38.5) 9.378 ms 8.886 ms 9.240 ms 8 if-ae-9-5.tcore1.WYN-Marseille.as6453.net (80.231.217.77) 159.550 ms if-ae-5-2.
˓→tcore1.WYN-Marseille.as6453.net (180.87.38.126) 159.614 ms if-ae-9-5.tcore1.WYN-
˓→Marseille.as6453.net (80.231.217.77) 159.506 ms
9 if-ae-8-1600.tcore1.PYE-Paris.as6453.net (80.231.217.6) 159.392 ms 159.474 ms
˓→159.405 ms
10 if-ae-15-2.tcore1.AV2-Amsterdam.as6453.net (195.219.194.145) 159.327 ms 158.355
˓→ms 122.520 ms
11 195.219.194.26 (195.219.194.26) 133.216 ms 134.168 ms 134.683 ms
12 138.197.250.29 (138.197.250.29) 192.236 ms 192.125 ms 138.197.250.23 (138.197.
˓→250.23) 192.083 ms
13 * 146.185.181.157 (146.185.181.157) 191.831 ms 191.861 ms
     10.9 tracepath command
The tracepath command traces a path to a network host discovering MTU along the path. This is a modern replace- ment of the traceroute command, and also does not need superuser privileges to execute.
    $ tracepath www.rtnpro.com
1?: [LOCALHOST]
1:  gateway
1:  gateway
pmtu 1500
2:  gateway
2:  45.113.248.3
3:  45.113.248.1
4:  121.244.26.1.static-pune.vsnl.net.in
5:  172.31.183.162
6:  172.29.250.33
7:  ix-ae-0-4.tcore1.MLV-Mumbai.as6453.net
8:  if-ae-5-2.tcore1.WYN-Marseille.as6453.net
9:  if-ae-8-1600.tcore1.PYE-Paris.as6453.net
10:  if-ae-15-2.tcore1.AV2-Amsterdam.as6453.net
11:  195.219.194.26
12:  138.197.250.27
13:  146.185.181.157
    Resume: pmtu 1492 hops 13 back 13
  0.950ms
  0.715ms
  0.689ms pmtu 1492
  3.564ms
  4.639ms
  4.132ms
  4.733ms asymm  7
 12.524ms asymm  7
  7.208ms asymm  8
125.727ms asymm 12
128.893ms asymm 11
 126.019ms asymm  9
 136.373ms asymm 10
 130.198ms
 131.040ms reached
  52 Chapter10. Networkingcommands

Linux command line for you and me Documentation, Release 0.1
 10.10 Remote login to a computer using ssh tool
We use the ssh command to login to remote computers. The remote computer must have the sshd service running, and should also allow clients to connect to this service. Let’s try to connect to localhost itself. Remember to start the sshd service before this step.
As you can see, the command syntax is ssh followed by user@hostname. If your remote system’s user name is same as your current one, then you can omit the username and just use the hostname(IP address or domain name).
10.11 ssh key generation
ssh keys are used in the daily life of a Linux user or developer. In simple terms, it helps us to securely login to other computers. In the following example, we will create a new key for our user.
    $ ssh kdas@localhost
kdas@localhost's password:
Last login: Wed Jun 21 08:44:40 2017 from 192.168.1.101
$
     $ ssh localhost
kdas@localhost's password:
$
     $ ssh-keygen -t rsa -b 4096 -C "kushaldas@gmail.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/home/fedora/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/fedora/.ssh/id_rsa.
Your public key has been saved in /home/fedora/.ssh/id_rsa.pub.
The key fingerprint is: SHA256:O6Rxir7lpFBQsBnvs+NJRU8Ih01ffVBvLTE8s5TpxLQ kushaldas@gmail.com The key's randomart image is:
+---[RSA 4096]----+
| o.o+o ...*=o |
| *.o.o. .@=.|
|+.oo =E++|
|o.o oo|
|+oS|
|.=*.|
|.==o |
|=B.|
|*.. |
+----[SHA256]-----+
 As you can see in the output, the key has been saved in the ~/.ssh directory. You can also find out that these files are only readable by the owner.
Each key has two parts. The id_rsa.pub is the public key and id_rsa is the private part of the key. One can safely upload or use the public key anywhere. But the private key, should be kept in a safe manner, because if people get
    $ ls -l .ssh
total 12
-rw-------. 1 fedora fedora 3326 Jun 25 06:25 id_rsa
-rw-r--r--. 1 fedora fedora  745 Jun 25 06:25 id_rsa.pub
  10.10. Remotelogintoacomputerusingsshtool 53

Linux command line for you and me Documentation, Release 0.1
 access to your private key, they can also access all of your information from any system using that key.
In other words, do not give the private key to anyone, or do not randomly copy the .ssh directory to a USB drive and then forget about it.
10.12 ssh-copy-id
ssh-copy-id command copies the keys to a given remote system. After this step we can use the ssh key to login to the box directly, instead of the usual username / password method.
    $ ssh-copy-id fedora@209.12.123.55
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out
˓→any that are already installed
/usr/bin/ssh-copy-id: INFO: 2 key(s) remain to be installed -- if you are prompted
˓→now it is to install the new keys fedora@209.12.123.55's password: Number of key(s) added: 2
Now try logging into the machine, with:   "ssh 'fedora@209.12.123.55'"
and check to make sure that only the key(s) you wanted were added.
   10.13 Stop and disable the sshd service
If you don’t need ssh access to your computer (say, your laptop), you should always stop and disable the sshd service in the computer.
10.14 Disable password based login for ssh
Remember, this step can be dangerous. Unless you’re really, really sure that you can access a computer by either logging in physically or using your ssh key (and you have a backup of the key somewhere), you should not do this step.
By disabling password based login in the sshd service, you make sure that only people with the right private key can login to the computer. This helps greatly when people try to break into the system by guessing the password. This is also really helpful in case your computer is connected to some network, and you still need to access it over ssh.
We will use vim to open the /etc/ssh/sshd_config file, which is the configuration file for sshd service. $ sudo vim /etc/ssh/sshd_config
Search for the term PasswordAuthentication, and change the value to no. Below I have added a new line to do the same. You can also understand, that the lines starting with # are comments in this configuration file. This configuration will disable password based authentication for the sshd service. You should remember to restart the sshd service after this step for the change to take place.
      54 Chapter10. Networkingcommands

Linux command line for you and me Documentation, Release 0.1
  10.15 How to find active (open) network connections from your com- puter?
$ sudo lsof -i -n -P
The lsof command shows open files, using -i we are asking to list of all Internet and x.25 (HP-UX) network files. To know more, read the man page of the lsof command.
      10.15. Howtofindactive(open)networkconnectionsfromyourcomputer? 55

Linux command line for you and me Documentation, Release 0.1
  56 Chapter10. Networkingcommands

CHAPTER 11
Linux Firewall
Note: Thischapterisanongoingwork.
A firewall is a network security system, which can monitor and control network packets coming in and going out from
a system based on pre-defined rules.
In this chapter, we will learn about iptables command and how can we use the same to create and manage the system’s
firewall. The netfilter subsystem in Linux Kernel handles the actual packet filtering in the network level.
11.1 Installation
On CentOS
yum install iptables-services On Debian systems
apt install iptables-persistent
11.2 Tables, chains and rules
There is a table based system which in turn uses chains of rules for the firewall. Each table has a defined set of chains, and the rules get into the get chain one after another.
                57

Linux command line for you and me Documentation, Release 0.1
 When a network packet reaches the related table, and the related chain inside of the table, the rules gets matched from top to bottom. If the packet matches then the target of the rule gets executed. Each chain also has a default policy, if no rule matches, then, the default poilicy gets applied on the packet. We will learn more about these in details.
iptables has 5 built in chains.
• INPUT for all packets incoming to the system
• OUTPUT for all packets going out from the system
• FORWARD for the routed packets, this is when the system works as a router
• PREROUTING for port forwarding
• POSTROUTING for Source Network Address Translation (SNAT), this applies to all packets leaving the sys- tem
11.3 filter table
filter is the default table of iptables. It has 3 default chains. • INPUT
• OUTPUT
• FORWARD
11.4 nat table
nat table is a special table for SNAT and DNAT (port forwarding). It has the following chains. • PREROUTING
• POSTROUTING
• OUTPUT
There are two other different tables, mangle and raw.
11.5 iptables command
The following table will be helpful in remembering different arguments to iptables command.
+------------------+--------------+---------------------+------------------------+---- ˓→---------+
| Table | Command | Chain | Matches | ˓→Target/Jump |
+------------------+--------------+---------------------+------------------------+---- ˓→---------+
     | filter (default) | -A (append) | INPUT ˓→ACCEPT |
| -p protocol            |
| -s source_ip           |
| -d destination_ip      |
| --sport source_port | (continues on next page)
 | nat
˓→DROP |
| mangle
˓→LOG |
| raw
˓→REJECT |
| -I (insert)  | OUTPUT
| -D (delete)  | FORWARD
| -R (replace) | PREROUTING
     58
Chapter11. LinuxFirewall

11.6 View the existing rules
Linux command line for you and me Documentation, Release 0.1
 (continued from previous page)
    |
˓→DNAT |
˓→SNAT |
˓→LIMIT |
˓→RETURN |
˓→MASQUERADE |
˓→ | |
˓→ | |
| -F (flush)
| -L (list)
| -S (show)    |
 | | | | |
| -Z | -N | -X |
|
| POSTROUTING | --dport destination_ip | | USER_DEFINED_CHAINS | -i incoming | | -o outgoing | |-mmac |
| | -m time |
| | -m quota |
| |-mlimit |
| | -m recent |
  (zero) |
     ˓→ | +------------------+--------------+---------------------+------------------------+----
˓→---------+
     # iptables -nvL --line-numbers
Chain INPUT (policy ACCEPT 82 packets, 4756 bytes)
num   pkts bytes target     prot opt in     out
Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target     prot opt in     out
Chain OUTPUT (policy ACCEPT 42 packets, 3192 bytes)
num   pkts bytes target     prot opt in     out
source
source
source
destination
destination
destination
 The above command shows the default table filter and all chains and rules inside of it. You can notice that each of the chains has a default policy ACCEPT. It means if no rules match (in this case no rules are defined), it will accept those packets.
11.7 Appending rules to INPUT chain
We can test an initial rule to drop all incoming icmp packets to the system. The following rule will append the rule to the INPUT chain.
Note: pingcommandusesicmppackets.So,thefollowingcommandwillblockpingintothesystem. iptables -A INPUT -p icmp -j DROP
Now, if you try to ping the system from any computer, you will not get any response.
        11.6. Viewtheexistingrules 59

Linux command line for you and me Documentation, Release 0.1
 11.8 Flushing all rules
iptables -F
The above command will help to flush (remove) all the rules from the default table. You can actually use -t TA-
BLE_NAME argument to flush any particular table.
11.9 Example of a series of rules
Here is a list of rules to allow traffic to port 22 (ssh) and port 80 and 443 (http and https).
The first rules allows all incoming traffic on the loopback device. The second line allows packets related to an already established connection, or the cases where a packet is trying to reconnect. The last 3rd last line allows all outgoing packets, and the last 2 lines reject everything else which does not match the rules. If you want to view all the rules.
         iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -p tcp -m state --state NEW --dport 22 -j ACCEPT
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -j ACCEPT
iptables -A OUTPUT -j ACCEPT
iptables -A INPUT -j REJECT
iptables -A FORWARD -j REJECT
     # iptables -nvL --line-numbers
Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
num
1 2
˓→ 3
˓→ 4
pkts bytes target
   0     0 ACCEPT
 122  9641 ACCEPT
prot opt in out all -- lo * all -- * *
source
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
source
source
0.0.0.0/0
destination
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
destination
destination
0.0.0.0/0
 state RELATED,ESTABLISHED
1    52 ACCEPT
 state NEW tcp
0     0 ACCEPT
                  tcp  --  *      *
              dpt:22
tcp -- * *
tcp -- * *
all -- * * reject-with icmp-port-unreachable
  tcp dpt:80
tcp dpt:443
˓→
5 0 0 ACCEPT
 ˓→ 6
˓→
22  2044 REJECT
 Chain FORWARD (policy ACCEPT 0 packets, 0 bytes) num pkts bytes target prot opt in out
Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes) num pkts bytes target prot opt in out 1 104 12085 ACCEPT all -- * *
 The –line-numbers argument shows the number of the each rule. We can use these line numbers to delete any rule. Note: Foradesktoporlaptop,youmaywanttodropallincomingconnections,thatwillhelpincaseswheresomeone
in the local network may try to attack/scan your system.
   60 Chapter11. LinuxFirewall

11.10 Delete a rule based on rule number
Let us delete the rule number 4, which allows traffic to port 80.
11.11 Delete a rule directly
If you know the rule properly, you can also delete it based on the rule directly.
Linux command line for you and me Documentation, Release 0.1
     # iptables -D INPUT 4
# iptables -nvL --line-numbers
Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
num
1 2
˓→ 3
˓→
4 0 0 ACCEPT tcp -- * *
pkts bytes target
   4   376 ACCEPT
 221 15445 ACCEPT
prot opt in out all -- lo * all -- * *
source
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
source
source
0.0.0.0/0
destination
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
destination
destination
0.0.0.0/0
 ˓→ 5
state RELATED,ESTABLISHED 152ACCEPTtcp-- * *
  tcp dpt:443
22  2044 REJECT     all  --  *      *
 state NEW tcp dpt:22
  reject-with icmp-port-unreachable Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
num pkts bytes target prot opt in out
Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes) num pkts bytes target prot opt in out 1 166 17248 ACCEPT all -- * *
˓→
     # iptables -D INPUT -p tcp --dport 443 -j ACCEPT # iptables -nvL --line-numbers
Chain INPUT (policy ACCEPT 0 packets, 0 bytes)
num
1 2
˓→ 3
˓→ 4
pkts bytes target
   4   376 ACCEPT
 344 22417 ACCEPT
prot opt in out all -- lo * all -- * *
source
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
source
source
0.0.0.0/0
destination
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
destination
destination
0.0.0.0/0
 state RELATED,ESTABLISHED 152ACCEPTtcp-- * *
  state NEW tcp dpt:22
22  2044 REJECT     all  --  *      *
  reject-with icmp-port-unreachable Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
num pkts bytes target prot opt in out
Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes) num pkts bytes target prot opt in out 1 234 22564 ACCEPT all -- * *
˓→
 11.12 Saving the rules
Any change made via iptables command stays on memory. To save it (so that it autoreloads in reboot), use the following command.
 11.10. Deletearulebasedonrulenumber 61

Linux command line for you and me Documentation, Release 0.1
 For Debian.
# netfilter-persistent save
For CentOS 7+
The first line stops and then disables the firewalld service, it is a newer type of frontend for the same netfilter subsystem of the kernel.
11.13 A blog post from Major Hayden
Now, you should read the following blog post from Major Hayden best practices.
11.14 Debugging firewall rules
In case you want to debug the rules, and wan to see which packet matches which rule in the chain, you can add these two following rules. After that, do tail -f /var/log/kern.log to see the messages. Remember to use the proper IP address and port number.
         # systemctl stop firewalld && systemctl disable firewalld
# iptables-save > /etc/sysconfig/iptables
# systemctl enable iptables
Created symlink from /etc/systemd/system/basic.target.wants/iptables.service to /usr/
˓→lib/systemd/system/iptables.service. # systemctl start iptables
     # iptables -t raw -A PREROUTING -p tcp --destination YOUR_IP/24 --dport PORT_NUMBER - ˓→j TRACE
# iptables -t raw -A OUTPUT -p tcp --destination YOUR_IP/24 --dport PORT_NUMBER -j ˓→TRACE
   62 Chapter11. LinuxFirewall

CHAPTER 12
Random things
I have yet to figure out where to put this information, which is why they are here, in the random chapter. These will be moved to different chapters in the future.
12.1 w command
The w command shows all the users, logged in to the computer. If you pass the -f flag, it toggles information about where each user is logged in from.
12.2 How long is the system running?
We have the uptime command which gives us information about how long the system is running. You can figure out the last time the system turned off or rebooted at a glance. For my laptop, it was 24 days ago.
12.3 Finding CPU time of a command
The time command will help you to find the CPU time spent for any command. The following example will tell us howmuchtime`du -shtooktocalculatethediskusage.
      $w
17:22:41 up 24 days, 11:37, 2 users, load average: 0.56, 0.50, 0.59
USER TTY LOGIN@ IDLE JCPU PCPU WHAT
kdas tty2 31May17 22days 3:07m 3:16 i3 -a --restart /run/user/1000/i3/
˓→restart-state.28641
     $ uptime
17:31:30 up 24 days, 11:46,  2 users,  load average: 0.76, 0.98, 0.81
  63

Linux command line for you and me Documentation, Release 0.1
     $ time du -sh
5.5G        .
real        0m1.026s
user        0m0.235s
sys 0m0.783s
 12.4 dmesg command
The dmesg command prints out messages from the kernel buffer. Using this tool we can learn about the messages and information from the kernel drivers during and after the boot up process. This can be very handy when troubleshooting; for e.g. when the machine fails to boot or a certain piece of hardware does not function correctly.
12.5 Setting up cron jobs
One can schedule tasks using cron jobs. You can mention a certain time when a given task will be executed. In latest Fedora/CentOS, we use cronie package, in other systems we have cron or anacron package.
To view any existing jobs
crontab -l
To add a new cronjob or edit a provious one, use the command crontab -e.
Format of a crontab file
         * * * * * /path/to/command +++++
|||||
|||||
||||| ||||| ||||| ||||+------> ||||
| | | +--------> |||
| | +----------> ||
| +------------>
|
+-------------->
Day of the week (0-7)
Month of the year (1-12)
Day of the month (1-31)
Hour (0-23)
Minute (0,59)
 Say we want to execute a shell script everyday at midnight.
0 0 * * * /usr/bin/myscript.sh
Another example can be executing the same script in every 15 minutes in every hour.
0,15,30,45 * * * * /usr/bin/myscript.sh
           64 Chapter12. Randomthings

Linux command line for you and me Documentation, Release 0.1
 12.6 Finding out details about previous logins or system reboots
last command will give you the details about all the previous logins and shutdown/reboots. This command actually checks /var/tmp/wtmp file for the logs.
The /var/log/btmp file stores all the bad login details, and /var/log/utmp file stores the details of the currently logged in users (who command reads this file).
You can read the btmp file using last command. last -f /var/log/btmp
To know more, you can read the man page of wmtp.
      12.6. Findingoutdetailsaboutpreviousloginsorsystemreboots 65

Linux command line for you and me Documentation, Release 0.1
  66 Chapter12. Randomthings

CHAPTER 13
Whats next?
After you are familiar with the commands in this book, we would suggest you to learn shell scripting. Start from https://www.shellscript.sh and then you can read the beginners bash guide.
   67

Linux command line for you and me Documentation, Release 0.1
  68 Chapter13. Whatsnext?

CHAPTER 14
Workbook
The Lym Workbook is an effort to create a small lab environment for the students to learn various commands from book. We will slowly add more problems to it.
14.1 How to install the workbook?
You will need latest Vagrant for this. Install Vagrant following the steps from the website. We suggest you to use the libvirt provider along with it.
Then checkout latest workbook code from github.
The vagrant up command will create two vms.
14.2 copy paste
To setup the problem environment
sudo lymsetup copypaste
Create a directory called work in your home directory, and copy the file from /tmp/problem1/work/files/hello.txt into the newly created diretory. Remember to remove the /tmp/problem1/work/files/hello.txt file afterwards. Create a file called /tmp/chapter1/allusers and add all of the directory names under your home directory into that file.
To verify
sudo lymverify copypaste
      git clone https://github.com/kushaldas/lymworkbook
cd lymworkbook
vagrant up
vagrant ssh workbook
            69

Linux command line for you and me Documentation, Release 0.1
 14.3 Find your user id
To setup the problem environment
sudo lymsetup findid
Find your user id and write it down in a file /tmp/myuserid.txt. To verify
sudo lymverify findid
14.4 Creating softlinks
To setup the problem environment
sudo lymsetup softlinks
Create a softlink called docs in your home directory which will point to /usr/share/doc/ directory. Also create another softlink called memory to the /proc/meminfo file.
To verify
sudo lymverify softlinks
14.5 Basic vim usage
To setup the problem environment
sudo lymsetup basicvim
Read the file at /etc/os-release and write the value of ID_LIKE (without the double quotes) in a file at /tmp/id_like.txt. To verify
sudo lymverify basicvim
14.6 Adding a new user
To setup the problem environment
sudo lymsetup newuser
Add a new user called fatima to the system. To verify
sudo lymverify newuser
                                         70 Chapter14. Workbook

Linux command line for you and me Documentation, Release 0.1
 14.7 Deleing an user
To setup the problem environment, remember to add the user first from the previous problem.
sudo lymsetup deleteuser
Remove the fatima user from the system To verify
sudo lymverify deleteuser
14.8 Finding the IP address of dgplug.org
Find the IP address of dgplug.org and save it to /tmp/ip_dgplug.txt file. To verify:
sudo lymverify findip
14.9 Change the local timezone of the system
Change the timezone of the system to the same of San Francisco, USA. To verify:
sudo lymverify timezonechange
14.10 Add sudo access to an user
Grant administrative(sudo) privileges to an existing normal user account “lym”. Remeber to create the user first. To verify:
sudo lymverify assignsudo
                          14.7. Deleinganuser 71

Linux command line for you and me Documentation, Release 0.1
  72 Chapter14. Workbook

CHAPTER 15
Advanced section
From this chapter onwards, we will learn more about different tools which people use for various. Most of these can be used for both personal use cases and also inside of big companies (depending on the situation).
To start, watch this talk on failure.
   73

Linux command line for you and me Documentation, Release 0.1
  74 Chapter15. Advancedsection

For now, just watch this talk from amazing Alice Goldfuss.
CHAPTER 16
Containers
   75

Linux command line for you and me Documentation, Release 0.1
  76 Chapter16. Containers

• Jason Braganza (Editor in command)
• Kushal Das (Adds typos in every form)
CHAPTER 17
Team
   77

Linux command line for you and me Documentation, Release 0.1
  78 Chapter17. Team

• genindex • search
CHAPTER 18
Indices and tables
   79

Linux command line for you and me Documentation, Release 0.1
  80 Chapter18. Indicesandtables

 bashrc, 24 bootup, 35
C
chmod, 23 cmdline, 31 cpuinfo, 30
kill, 28 L
last, 64
load average, 29 locate, 16
lsof, 28
DM
daemon, 35
dig, 50
dmesg, 64
dnf, 41
dnf install,42 dns, 50
E
Environment variable,15 export, 16
F
fhs, 9
File permission,23
G
groupadd, 22 H
host, 50 I
id, 20
ip, 49 iptables, 58
meminfo, 31 mount, 45, 46
N
NTFS, 46 P
passwd, 21
PATH, 24
ping, 49
proc filesystem,30 ps, 27
S
services, 36 signal, 28
ss, 51
ssh, 52 ssh-copy-id, 54 su, 15
sudo, 15, 21 sysctl, 32 systemctl, 36
T
tar, 12
Index
 AJ
apt, 43 journalctl, 38 BK
 81

Linux command line for you and me Documentation, Release 0.1
 time, 63 timezones, 16 top, 29 tracepath, 52 traceroute, 52
U
umount, 46 updatedb, 16 uptime, 63 useradd, 21 userdel, 22 usermod, 22
V
vim, 12 W
w, 63 which, 24
 82 Index


The Linux FAQ
David C. Merrill
david −AT− lupercalia.net 2003−09−19
Revision History
Revision 1.20
Revision 2.0
Some reorganization and markup changes. Revision 2.1 2003−05−19 Fairly complete reorganization and conversion to Revision 2.1.1 2003−09−19 Minor corrections.
Revision 2.1.2 2004−02−28 Minor corrections.
This is the list of Frequently Asked Questions for kernel that runs on many modern computer systems.
2001−12−04
Revised by: rk Revised by: dcm
Revised by: dcm Revised by: dcm Revised by: dcm
2002−04−25
WikiText.
Linux, the Free/Open Source UNIX−like operating system
 
The Linux FAQ
Table of Contents
1. Introduction.....................................................................................................................................................1
1.1. About the FAQ..................................................................................................................................1 1.2. Asking Questions and Sending Comments.......................................................................................1 1.3. Authorship and Acknowledgments...................................................................................................1 1.4. Copyright and License......................................................................................................................2 1.5. Disclaimer.........................................................................................................................................2
2. General Information.......................................................................................................................................3 3. The Linux Kernel............................................................................................................................................6 4. Disk Drives.....................................................................................................................................................12 5. Partitions And Filesystems...........................................................................................................................14 6. System Libraries...........................................................................................................................................19 7. Linux Distributions.......................................................................................................................................21 8. Booting the OS...............................................................................................................................................27 9. Application Software Management.............................................................................................................31 10. Directory And File Management...............................................................................................................35 11. Connecting To A Network..........................................................................................................................36 12. Troubleshooting..........................................................................................................................................40 13. Software Development................................................................................................................................49 14. Solutions to Common Problems................................................................................................................55 15. Tips And Tricks...........................................................................................................................................57 16. The X Window System...............................................................................................................................62 17. Frequently Encountered Error Messages.................................................................................................65 18. Online Resources.........................................................................................................................................73
19. How To Get Further Assistance................................................................................................................81
19.1. If this Document Still Hasn't Answered Your Question..............................................................81 19.2. What to Put in a Request for Help................................................................................................82 19.3. How To Email Someone about Your Problem.............................................................................83
                           i

The Linux FAQ
Table of Contents
A. GNU Free Documentation Licenseddendum................................................................................................................................................97
             ii

1. Introduction
1.1. About the FAQ
This document contains a collection of the answers to the most common questions people ask about Linux.
It is available as WikiText source, DocBook XML, an ASCII text file, an HTML World Wide Web page, Postscript, PDF, Plucker, and as a USENET news posting.
DocBook XML is generated from WikiText source using wt2db. HTML is generated from the XML using the LDP's XSL customization layer on top of Norm Walsh's standard DocBook XSL stylesheets. Text is generated from the HTML using lynx. Most of these programs are found in most Linux distributions.
The Usenet version is posted regularly to news:news.answers, news:comp.answers, and news:comp.os.linux.misc. It is archived at ftp://rtfm.mit.edu/pub/usenet−by−hierarchy/comp/os/linux/misc.
The latest versions are available from the Linux Documentation Project.
1.2. Asking Questions and Sending Comments
If you have any comments, or if you have a question about Linux that was not answered here, feel free to send it to the maintainer: david −AT− lupercalia.net. Place the letters FAQ in the subject of your message.
I won't guarantee to answer all questions, but I'll answer as many as I can. Questions that I receive repeatedly will be added to the FAQ. If you wish to refer to a question in the FAQ, please include the title of the question in your email.
If you have an addition to the FAQ, by all means send it. Contributions may be in any format, but I prefer comments in English to patch files. Context diff is not my first language.
1.3. Authorship and Acknowledgments
This FAQ is currently compiled and maintained by David Merrill, with assistance and comments from Linux users all over the world. Over the years it has passed through several hands, and I'd like to recognize all the folks who have worked on it.
In addition to those of us who have been official maintainers, the FAQ is full of individual contributions. The name of the contributor is listed along with the contribution.
The FAQ was maintained by Robert Kiesling until January, 2002
Freddy Contreras, the_blur_oc@hotmail.com, designed and GPL'd the Linux Frequently Asked Questions logos.
Special thanks are due to Matt Welsh, who moderated news:comp.os.linux.announce and news:comp.os.linux.answers, coordinated the HOWTO's and wrote substantial portions of many of them, Greg Hankins the former Linux Documentation Project HOWTO maintainer, Lars Wirzenius and Mikko Rauhala, the former and current moderators of news:comp.os.linux.announce, Marc−Michel Corsini, who
             1. Introduction 1

The Linux FAQ
wrote the original Linux FAQ, and Ian Jackson, the previous FAQ maintainer. Thanks also to Roman Maurer for his many updates and additions, especially with European Web sites, translations, and general miscellany.
Other contributors include:
• Doug Jensen djen@ispwest.com
Last but not least, thanks to Linus Torvalds and the other contributors to Linux for giving us something to talk about!
1.4. Copyright and License
Copyright (c) 2001 Robert Kiesling. Copyright (c) 2002, 2003 David Merrill.
Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.1 or any later version published by the Free Software Foundation; with no Invariant Sections, with no Front−Cover Texts, and with no Back−Cover Texts. A copy of the license is provided in the appendix, GNU Free Documentation License.
The maintainer would be happy to answer any questions regarding the copyright.
Unix is a trademark of AT&T Bell Laboratories. Linux is a trademark of Linus Torvalds. Other trademarks belong to their holders.
1.5. Disclaimer
While every attempt has been made to provide accurate and helpful information, I make no promises or guarantees of any kind. Use this information at your own risk.
     1. Introduction 2

2. General Information
Q: What Is Linux?
Q: Is Linux Unix?
Q: Who Wrote Linux?
Q: How Is Linux Licensed?
Q: How Does One Pronounce Linux? Q: How Many People Use Linux?
Q: What Is Linux?
A: The name "Linux" is used to refer to three similar yet slightly different things, which can be confusing to all but the hardcore geek. The three usages vary by how much of a complete software system the speaker is talking about.
At the lowest level, every Linux system is based on the Linux kernel the very low−level software that manages your computer hardware, multi−tasks the many programs that are running at any given time, and other such essential things. These low−level functions are used by other programs, so their authors can focus on the specific functionality they want to provide. Without the kernel, your computer is a very expensive doorstop. It has all of the features of a modern operating system: true multitasking, threads, virtual memory, shared libraries, demand loading, shared, copy−on−write executables, proper memory management, loadable device driver modules, video frame buffering, and TCP/IP networking.
Most often, the name "Linux" is used to refer to the Linux Operating System. An OS includes the kernel, but also adds various utilities the kinds of programs you need to get anything done. For example, it includes a shell (the program that provides a command prompt and lets you run programs), a program to copy files, a program to delete files, and many other odds and ends. Some people honor the request of Richard Stallman and the GNU Project, and call the Linux OS GNU/Linux, because a good number of these utility programs were written by the GNU folks.
Finally, software companies (and sometimes volunteer groups) add on lots of extra software, like the XFree86 X Window System, Gnome, KDE, games and many other applications. These software compilations which are based on the Linux OS are called Linux distributions.
So, there are three Linuxes: the Linux kernel, the Linux OS, and the various Linux distributions. Most people, however, refer to the operating system kernel, system software, and application software, collectively, as "Linux", and that convention is used in this FAQ as well.
See also the Wikipedia articles on the Linux kernel and the Linux operating system. Q: Is Linux Unix?
A: Officially an operating system is not allowed to be called a Unix until it passes the Open Group's certification tests, and supports the necessary API's. Nobody has yet stepped forward to pay the large fees that certification involves, so we're not allowed to call it Unix. Certification really doesn't mean very much anyway. Very few of the commercial operating systems have passed the Open Group tests.
A: Unofficially, Linux is very similar to the operating systems which are known as Unix, and for many purposes they are equivalent. Linux the kernel is an operating system kernel that behaves and performs similarly to the famous Unix operating system from AT&T Bell Labs. Linux is often called a "Unix−like"
             2. General Information 3

The Linux FAQ
operating system. For more information, see http://www.unix−systems.org/what_is_unix.html.
[Bob Friesenhahn]
Q: Who Wrote Linux?
A: Linus Torvalds and a loosely knit team of volunteer hackers from across the Internet wrote (and still are writing) Linux from scratch.
Q: How Is Linux Licensed?
A: Linus has placed the Linux kernel under the GNU General Public License, which basically means that you may freely copy, change, and distribute it, but you may not impose any restrictions on further distribution, and you must make the source code available.
This is not the same as Public Domain. See the Copyright FAQ, ftp://rtfm.mit.edu/pub/usenet/news.answers/law/copyright, for details.
Full details are in the file COPYING in the Linux kernel sources (probably in /usr/src/linux on your system). There is a FAQ for the GPL at: http://www.gnu.org/copyleft/gpl−faq.html.
The licenses of the utilities and programs which come with the installations vary. Much of the code is from the GNU Project at the Free Software Foundation, and is also under the GPL. Some other major programs often included in Linux distributions are under a BSD license and other similar licenses.
Note that discussion about the merits or otherwise of the GPL should be posted to the news group gnu.misc.discuss, and not to the news:comp.os.linux hierarchy.
For legal questions, refer to the answer: Where Are Linux Legal Issues Discussed?. Q: How Does One Pronounce Linux?
A: This question produces an outrageous amount of heated debate.
If you want to hear Linus himself say how he pronounces it, download english.au or swedish.au from ftp://ftp.funet.fi/pub/Linux/PEOPLE/Linus/SillySounds/. If you have a sound card or the PC−speaker audio driver you can hear them by typing
 $ cat english.au >/dev/audio
The difference isn't in the pronunciation of Linux but in the language Linus uses to say, "hello".
For the benefit of those who don't have the equipment or inclination: Linus pronounces Linux approximately as Leenus, where the ee is pronounced as in "feet," but rather shorter, and the u is like a much shorter version of the French eu sound in peur (pronouncing it as the u in "put" is probably passable).
Q: How Many People Use Linux?
A: Linux is freely available, and no one is required to register with any central authority, so it is difficult to know. Several businesses survive solely on selling and supporting Linux. Linux newsgroups are some of the most heavily read on Usenet. Accurate numbers are hard to come by, but the number is almost certainly in the millions.
       2. General Information 4

The Linux FAQ
However, people can register as Linux users at the Linux Counter project, which has been in existence since 1993. In May of 2003 the project counted more than 134,000 users, but that is certainly only a small fraction of all users. The operator of the Linux Counter estimated 18 million users, as of May 2003.
Visit the Web site at http://counter.li.org/ and fill in the registration form.
The current count is posted monthly to news:comp.os.linux.misc, and is always available from the Web site.
[Harald Tveit Alvestrand]
A: In 1999, International Data Corporation released its first commercial forecast of Linux sales. The report quantifies Linux vendor sales in 1996, 1997, and 1998, and forecasts through the year 2003.
To obtain the report, contact IDC at ctoffel@idc.com. Their Web site is http://www.itresearch.com/.
     2. General Information 5

3. The Linux Kernel
Q: What Platforms Does Linux Support?
Q: What Hardware Is Supported?
Q: Ports to Other Processors
Q: How Does Linux Kernel Versioning Work?
Q: Where Is the Latest Kernel Version on the Internet?
Q: Does Linux Support Threads or Lightweight Processes? Q: What Version of Linux and What Machine Name Is This? Q: What is a BogoMip?
Q: Does Linux Support USB Devices?
Q: Can Linux Use More than 3 Serial Ports by Sharing Interrupts?
Q: What Platforms Does Linux Support?
A: Linux runs on almost every general−purpose computer made in the last 10 years. It runs on systems as
small as PDAs (for example, the Sharp Zaurus) and on systems as large as IBM mainframes.
There are Linux distributions specifically for mobile and handheld platforms. Information on the Linux
distribution for the Compaq iPAQ is at http://www.handhelds.org.
A: Linux was written originally for Intel processor based PC's, using the hardware facilities of the 80386 processor and its successors to implement its features. The 80386 family includes the 80486 and all of the Pentium chips. However, there are now many ports to other hardware platforms. See Ports to Other Processors.
Refer also to the Linux INFO−SHEET for more details as well as the answers to Where Is the Documentation?, What Hardware Is Supported?, and Ports to Other Processors, below.
Q: What Hardware Is Supported?
A: A minimal Linux installation requires a machine for which a port exists, at least 2Mb of RAM, and a single floppy drive, but to do anything even remotely useful, more RAM and disk space are needed. Refer to: Ports to Other Processors, What are the Disk Space Requirements for Minimal, Server, and Workstation Use?, and What are the Minimum and Maximum Memory Requirements?.
Intel CPU, PC−compatible machines require at least an 80386 processor to run the standard Linux kernel.
Linux, including the X Window System GUI, runs on most current laptops. Refer to the answer for: How Do I Find Out If a Notebook Runs Linux?. There are numerous sources of information about specific PC's, video cards, disk controllers, and other hardware. Refer to the INFO−SHEET, Laptop−HOWTO, and the Unix−Hardware−Buyer−HOWTO. See Where Is the Documentation?.
Q: Ports to Other Processors
A: Ports are currently available for:
• Compaq Alpha AXP
• Sun SPARC and UltraSPARC • Motorola 68000
                           3. The Linux Kernel 6

The Linux FAQ
• PowerPC
• PowerPC64
• ARM
• Hitachi SuperH
• IBM zSeries and S/390 • MIPS
• HP PA−RISC
• Intel IA−64
• DEC VAX
• AMD x86−64
• CRIS
A: There are always efforts underway to port Linux onto new processors. Linux Online maintains a http://www.linux.org/projects/ports.html:list of ports currently in development.
In addition, the following information is available about specific ports: On Intel platforms, VESA Local Bus and PCI bus are supported.
MCA (IBM's proprietary bus) and ESDI hard drives are mostly supported. There is further information on the MCA bus and what cards Linux supports on the Micro Channel Linux Web page, http://www.dgmicro.com/mca. Refer also to the answer for: Where Is the Linux Stuff on the World Wide Web?.
There is a port of Linux to the 8086, known as the Embeddable Linux Kernel Subset (ELKS). This is a 16−bit subset of the Linux kernel which will mainly be used for embedded systems, at: http://www.linux.org.uk/Linux8086.html. Standard Linux does not run 8086 or 80286 processors, because it requires task−switching and memory management facilities found on 80386 and later processors.
Linux supports multiprocessing with Intel MP architecture. See the file Documentation/smp.tex in the Linux kernel source code distribution.
An API specification and developers kit for the Crusoe Smart Microprocessor developed by Transmeta Corporation are at http://www.transmeta.com.
A project has been underway for a while to port Linux to suitable 68000−series based systems like Amigas and Ataris. The Linux/m68K FAQ is located at http://www.clark.net/pub/lawrencc/linux/faq/faq.html. The URL of the Linux/m68k home page is http://www.linux−m68k.org/faq/faq.html.
There is also a linux−680x0 mailing list. See What Mailing Lists Are There?.
There is (or was) a FTP site for the Linux−m68k project on ftp://ftp.phil.uni−sb.de/pub/atari/linux−68k, but
this address may no longer be current.
Debian GNU/Linux has ports to Alpha, Sparc, Motorola 68k, PowerPC, ARM, IBM S/390, MIPS, HP PA−RISC, and IA−64. A Port to amd64 is being developed. There are mailing lists for all of them. See http://www.debian.org/MailingLists/ for general information, then follow the "subscription" link, and find the mailing list you are interested in.
One of the Linux−PPC project pages is http://www.linuxppc.org, and the archive site is ftp://ftp.linuxppc.org/linuxppc.
                       3. The Linux Kernel 7

The Linux FAQ
There are two sites for the Linux iMac port: http://w3.one.net/~johnb/imaclinux, and http://www.imaclinux.net:8080/content/index.html.
A port to the 64−bit DEC Alpha/AXP is at http://www.azstarnet.com/~axplinux/. There is a mailing list at vger.redhat.com: see What Mailing Lists Are There?.
Ralf Baechle is working on a port to the MIPS, initially for the R4600 on Deskstation Tyne machines. The Linux−MIPS FTP sites are ftp://ftp.fnet.fr/linux−mips and ftp://ftp.linux.sgi.com/pub/mips−linux. Interested people may mail their questions and offers of assistance to linux@waldorf−gmbh.de.
There is (or was) also a MIPS channel on the Linux Activists mail server and a linux−mips mailing list. See What Mailing Lists Are There?.
There are currently two ports of Linux to the ARM family of processors. One of these is for the ARM3, fitted to the Acorn A5000, and it includes I/O drivers for the 82710/11 as appropriate. The other is to the ARM610 of the Acorn RISC PC. The RISC PC port is currently in its early to middle stages, owing to the need to rewrite much of the memory handling. The A5000 port is in restricted beta testing. A release is likely soon.
For more, up−to−date information, read the newsgroup news:comp.sys.acorn.misc. There is a FAQ at http://www.arm.uk.linux.org.
The Linux SPARC project is a hotbed of activity. There is a FAQ and plenty of other information available from the UltraLinux page, http://www.ultralinux.org.
The Home Page of the UltraSPARC port ("UltraPenguin") is located at http://sunsite.mff.cuni.cz/linux/ultrapenguin−1.0/, although the URL may not be current.
There is also a port to SGI/Indy machines ("Hardhat"). The URL is http://www.linux.sgi.com. Q: How Does Linux Kernel Versioning Work?
A: At any given time, there are several "stable" versions of Linux, and one "development" version. Unlike most proprietary software, older stable versions continue to be supported for as long as there is interest, which is why multiple versions exist.
Linux version numbers follow a longstanding tradition. Each version has three numbers, i.e., X.Y.Z. The "X" is only incremented when a really significant change happens, one that makes software written for one version no longer operate correctly on the other. This happens very rarely −− in Linux's history it has happened exactly once.
The "Y" tells you which development "series" you are in. A stable kernel will always have an even number in this position, while a development kernel will always have an odd number.
The "Z" specifies which exact version of the kernel you have, and it is incremented on every release.
The current stable series is 2.4.x, and the current development series is 2.5.x. However, many people continue to run 2.2.x and even 2.0.x kernels, and they als o continue to receive bugfixes. The development series is the code that the Linu x developers are actively working on, which is always available for public viewing, testing, and even use, although production use is not recommended! This is part of the "open source development" method.
             3. The Linux Kernel 8

The Linux FAQ
Eventually, the 2.5.x development series will be "sprinkled with holy penguin pee" and become the 2.6.0 kernel and a new stable series will then be established, and a 2.7.x development series begun. Or, if any really major changes happen, it might become 3.0.0 instead, and a 3.1.x series begun.
Q: Where Is the Latest Kernel Version on the Internet?
A: The easiest way to update your kernel is to get the update directly from the distribution which you are
running.
A: If you need or want to configure and compile your own kernel, the web page at http://www.kernel.org/ lists the current versions of the development and production kernels.
If you want to download the source code, FTP to ftp.xx.kernel.org, where xx is the two−letter Internet domain abbreviation of your country; e.g., us for United States, ca for Canada, or de for Germany. Kernel versions 2.2.x are archived in the directory pub/linux/kernel/v2.2, as are patches for the prerelease versions. The kernel source code is archived as a .tar.gz file, and as a .tar.bz2 file.
Follow the instructions in any of the standard references to compile the kernel, as you would with any other custom kernel. The Documentation subdirectory contains information by the authors of various subsystems and drivers, and much of that information is not documented elsewhere.
If you want to participate in kernel development, make sure that you sign on to the linux−kernel mailing list to find out what people are working on. Refer to the answer: What Mailing Lists Are There?.
There is a story about the features of the 2.4 series kernels at http://features.linuxtoday.com/stories/8191.html. Q: Does Linux Support Threads or Lightweight Processes?
A: As well as the Unix multiprocessing model involving heavyweight processes, which is of course part of the standard Linux kernel, there are several implementations of lightweight processes or threads. Recent kernels implement a thread model, kthreads. In addition, there are the following packages available for Linux.
• GNU glibc2 for Linux has optional support for threads. The archive is available from the same place as glibc2, ftp://ftp.gnu.org/pub/gnu/
• In ftp://sipb.mit.edu/pub/pthread/ or ftp://ftp.ibp.fr:/pub/unix/threads/pthreads. Documentation isn't in the package, but is available on the World Wide Web at http://www.mit.edu:8001/people/proven/home_page.html. Newer Linux libc's contain the pthreads source. The GNU Ada compiler on ftp://metalab.unc.edu/pub/Linux/devel/lang/ada/ contains binaries made from that source code.
• In ftp://ftp.cs.washington.edu/pub/qt−001.tar.Z is QuickThreads. More information can be found in the technical report, available on the same site is /tr/1993/05/UW−CSE−93−05−06.PS.Z.
• In ftp://ftp.cs.fsu.edu/pub/PART/, an Ada implementation. This is useful mainly because it has a lot of Postscript papers that you'll find useful in learning more about threads. This is not directly usable under Linux.
Please contact the authors of the packages in question for details. Q: What Version of Linux and What Machine Name Is This?
A: Type:
           3. The Linux Kernel 9

The Linux FAQ
 $ uname −a
Q: What is a BogoMip?
A: "BogoMips" is a combination of Bogus and Mips. MIPS stands for (depending on who you ask) Millions of
Instructions per Second, or Meaningless Indication of Processor Speed.
The number printed at boot time is the result of a kernel timing calibration, used for very short delay loops by
some device drivers.
According to the BogoMips mini−HOWTO, the rating for your machine will be:
 Common BogoMips Ratings
Processor
−−−−−−−−−
Intel 8088
Intel/AMD 386SX
Intel/AMD 386DX
Motorola 68030
Cyrix/IBM 486
Intel Pentium
Intel 486
BogoMips
−−−−−−−−
clock * 0.004
clock * 0.14
clock * 0.18
clock * 0.25
clock * 0.34
clock * 0.40
clock * 0.50
clock * 0.50
clock * 0.50
clock * 0.75
clock * 0.84
clock * 0.99
clock * 0.99
clock * 0.99
clock * 0.99
clock * 1.00
clock * 1.00
clock * 1.00
clock * 1.00
clock * 1.99
clock * 2.00
clock * 2.00
clock * 2.00
clock * 2.00
clock * 2.01
Comparison
−−−−−−−−−−
0.02
0.8
1 (definition)
1.4
1.8
2.2
2.8
2.8
2.8
4.2
4.7
5.5
5.5
5.5
5.5
5.6
5.6
5.6
5.6
11.1
11.1
11.1
11.1
11.1
11.2
AMD 5x86
Mips R4000/R4400
Nexgen Nx586
PowerPC 601
Alpha 21064/21064A
Alpha 21066/21066A
Alpha 21164/21164A
Intel Pentium Pro
Cyrix 5x86/6x86
Intel Pentium II/III
Intel Celeron
Mips R4600
Alpha 21264
AMD K5/K6/K6−2/K6−III
UltraSparc II
Pentium MMX
PowerPC 604/604e/750
Motorola 68060
Motorola 68040 Not enough data (yet).
AMD Athlon Not enough data (yet).
IBM S390 Not enough data (yet).
If the number is wildly lower, you may have the Turbo button or CPU speed set incorrectly, or have some kind of caching problem (as described in Why Does the System Slow to a Crawl When Adding More Memory?).
For values people have seen with other, rarer, chips, or to calculate your own BogoMips rating, please refer to the BogoMips Mini−HOWTO, on ftp://metalab.unc.edu/. See Where Is the Documentation?.
[Wim van Dorst]
Q: Does Linux Support USB Devices?
A: Linux supports a few dozen USB devices at present, and work is underway to develop additional device drivers. There is a Web page devoted to the subject, at http://www.linux−usb.org. There is also LDP
     3. The Linux Kernel 10

The Linux FAQ
documentation, at: Where Is the Linux Stuff on the World Wide Web?.
Support for USB version 2.0 was recently added to development kernels, but is not yet available in the 2.4
series.
Q: Can Linux Use More than 3 Serial Ports by Sharing Interrupts?
A: Yes, but you won't be able to use simultaneously two ordinary ports which share an interrupt (without some trickery). This is a limitation of the ISA Bus architecture.
See the Serial HOWTO for information about possible solutions and workarounds for this problem.
  3. The Linux Kernel 11

4. Disk Drives
Q: Does Linux Support SCSI Drives?
Q: Does Linux Support IDE Drives?
Q: Does Linux Support CD−ROM Drives?
Q: Does Linux Support DVD Drives?
Q: Why Doesn't the AHA1542C Card Work With Linux? Q: How Can I Get Linux to Work With My Disk?
Q: Does Linux Support SCSI Drives? A: Coming soon...
Q: Does Linux Support IDE Drives? A: Coming soon...
Q: Does Linux Support CD−ROM Drives? A: Coming soon...
Q: Does Linux Support DVD Drives?
A: Coming soon...
Q: Why Doesn't the AHA1542C Card Work With Linux?
A: The option to allow disks with more than 1024 cylinders, which the AHA1542C card can recognize, is only required as a workaround for a PC−compatible BIOS misfeature and should be turned off under Linux. For older Linux kernels you need to turn off most of the advanced BIOS options all but the one about scanning the bus for bootable devices.
Q: How Can I Get Linux to Work With My Disk?
A: If your disk is an IDE or EIDE drive, you should read the file /usr/src/linux/drivers/block/README.ide (part of the Linux kernel source code). This README contains many helpful hints about IDE drives. Many modern IDE controllers do translation between "physical" cylinders/heads/sectors, and "logical" ones.
SCSI disks are accessed by linear block numbers. The BIOS invents some "logical" cylinder/head/sector fiction to support DOS.
Older IBM PC−compatible BIOS's will usually not be able to access partitions which extend beyond 1024 logical cylinders, and will make booting a Linux kernel from such partitions using LILO problematic at best.
You can still use such partitions for Linux or other operating systems that access the controller directly.
It's recommend that you create at least one Linux partition entirely under the 1024 logical cylinder limit, and boot from that. The other partitions will then be okay.
      4. Disk Drives 12

The Linux FAQ
Also there seems to be a bit of trouble with the newer Ultra−DMA drives. I haven't gotten the straight scoop on thembut they are becoming a very common problem at the SVLUG installfests. When you can get 8 to 12 Gig drives for $200 to $300 it's no wonder.
[Jim Dennis]
 4. Disk Drives 13

5. Partitions And Filesystems
Q: Does Linux Support Virtualized File Systems Like RAID?
Q: Can Linux Use the Same Hard Drive as MS−DOS? OS/2? 386BSD? Win95? Q: How Do I Access Files on a MS−DOS Partition or Floppy?
Q: Does Linux Support Compressed Ext2 File Systems?
Q: Can Linux Use Stacked/DBLSPC/Etc. DOS Drives?
Q: Can Linux Access OS/2 HPFS Partitions?
Q: Can Linux Access Amiga File Systems?
Q: Can Linux Access BSD, SysV, Etc. UFS?
Q: Can Linux Access MacIntosh File Systems?
Q: How Do I Create a File System on a Floppy?
Q: Does Linux Support File System Encryption?
Q: How Do I Resize a Partition Non−Destructively?
Q: Where Is the Journalling File System on the Net?
Q: Why Isn't My Virtual Memory Swap Area Working?
Q: How Do I Add Temporary Swap Space?
Q: Does Linux Support Virtualized File Systems Like RAID?
A: The most recent Linux kernels support software RAID, and they will work with RAID disk controllers.
An automounter for NFS partitions is part of most Linux distributions.
In addition, several virtual file system projects exist. One of them, the Linux Logical Volume Manager, is located at http://linux.msede.com/lvm/.
Q: Can Linux Use the Same Hard Drive as MS−DOS? OS/2? 386BSD? Win95?
A: Yes. Linux supports many, many filesystems, including the standard MS−DOS partitioning scheme, so it
can share your disk with other operating systems.
Linux supports all known versions of the Microsoft FAT and VFAT file systems, including those used by Windows 95, Windows 98, Windows NT, Windows 2000 and Windows ME through loadable kernel modules. In a correctly configured system, they should load automatically when the partitions are mounted.
Note, however, that many other operating systems may not be exactly compatible. DOS's FDISK.EXE and FORMAT.EXE, for example, can overwrite data in a Linux partition, because they sometimes incorrectly use partition data from the partition's boot sector rather than the partition table.
In order to prevent programs from doing this, it is a good idea to zero out under Linux the start of a partition you created, before you use MS−DOS or whatever to format it. Type:
where hdXY is the relevant partition; e.g., /dev/hda1 for the first partition of the first (IDE) disk.
Linux can read and write the files on your DOS and OS/2 FAT partitions and floppies using either the DOS
file system type built into the kernel or mtools.
                  $ dd
if=/dev/zero of=/dev/hdXY bs=512 count=1
5. Partitions And Filesystems 14

The Linux FAQ
There is reportedly a GPL'd OS/2 device driver that will read and write Linux ext2 partitions.
For information about FAT32 partition support, see http://bmrc.berkeley.edu/people/chaffee/fat32.html.
See What Software does Linux Support? for details and status of the emulators for DOS, MS Windows, and System V programs.
See also, "Can Linux access Amiga file systems?", "Can Linux access Macintosh file systems?", "Can Linux access BSD, SysV, etc., UFS?", and "Can Linux access SMB file systems?"
There are said to be NTFS drivers under development, which should support compression as a standard feature.
Q: How Do I Access Files on a MS−DOS Partition or Floppy? A: Use the DOS file system, type, for example:
If it's a floppy, don't forget to umount it before ejecting it!
You can use theconv=text/binary/auto,umask=nnn,uid=nnn, andgid=nnnoptions to control the automatic line−ending conversion, permissions and ownerships of the files in the DOS file system as they appear under Linux. If you mount your DOS file system by putting it in your /etc/fstab, you can record the options (comma−separated) there, instead of defaults.
Alternatively, you can use mtools, available in both binary and source form on the FTP sites. See Where Are the Linux FTP Archives?.
A kernel patch (known as the fd−patches) is available which allows floppies with nonstandard numbers of tracks and/or sectors to be used; this patch is included in the 1.1 alpha testing kernel series.
Q: Does Linux Support Compressed Ext2 File Systems?
A: The ext2compr project provides a kernel patch Information about them is located at
http://e2ompr.memalpha.cx/e2compr/.
There is also a Web site for the e2compr patches. The code is still experimental and consists of patches for the 2.0 and 2.1 kernels. For more information about the project, including the latest patches, and the address of the mailing list, look up the URL at http://debs.fuller.edu/e2compr/.
[Roderich Schupp, Peter Moulder
A: zlibc is a program that allows existing applications to read compressed (GNU gzip'ed) files as if they were
not compressed. Look at ftp://metalab.unc.edu/pub/Linux/libs/. The author is Alain Knaff.
A: There is also a compressing block device driver, "DouBle," by Jean−Marc Verbavatz, which can provide on−the−fly disk compression in the kernel. The source−only distribution is located at ftp://metalab.unc.edu/pub/Linux/patches/diskdrives/. This driver compresses inodes and directory information as well as files, so any corruption of the file system is likely to be serious.
    $ mkdir /dos $
mount −t msdos −o conv=text,umask=022,uid=100,gid=100 /dev/hda3 /dos
      5. Partitions And Filesystems 15

The Linux FAQ
A: There is also a package called tcx (Transparently Compressed Executables), which allows you to keep infrequently used executables compressed and only uncompress them temporarily when in use. It is located at ftp://metalab.unc.edu/pub/Linux/utils/compress/.
Q: Can Linux Use Stacked/DBLSPC/Etc. DOS Drives?
A: Until recently, not very easily. You can access DOS 6.X volumes from the DOS emulator ("What software does Linux support? "), but it's harder than accessing a normal DOS volume via the DOS kernel option, a module, or mtools.
There is a recently added package, dmsdos, that reads and writes compressed file systems like DoubleSpace/DriveSpace in MS−DOS 6.x and Win95, as well as Stacker versions 3 and 4. It is a loadable kernel module. Look at ftp://metalab.unc.edu/pub/Linux/system/filesystems/dosfs/.
Q: Can Linux Access OS/2 HPFS Partitions?
A: Yes, but Linux access to HPFS partitions is read−only. HPFS file system access is available as an option when compiling the kernel or as a module. See the Documentation/filesystems/hpfs.txt file in the kernel source distribution. See How To Upgrade/Recompile a Kernel. Then you can mount HPFS partition, using, for example:
Q: Can Linux Access Amiga File Systems?
A: The Linux kernel has support for the Amiga Fast File System (AFFS) version 1.3 and later, both as a compile−time option and as a module. The file Documentation/filesystems/affs.txt in the Linux kernel source distribution has more information.
See How To Upgrade/Recompile a Kernel.
Linux supports AFFS hard−drive partitions only. Floppy access is not supported due to incompatibilities between Amiga floppy controllers and PC and workstation controllers. The AFFS driver can also mount disk partitions used by the Un*x Amiga Emulator, by Bernd Schmidt.
Q: Can Linux Access BSD, SysV, Etc. UFS?
A: Recent kernels can mount (read only) the UFS file system used by System V; Coherent; Xenix; BSD; and derivatives like SunOS, FreeBSD, NetBSD, and NeXTStep. UFS support is available as a kernel compile−time option and a module.
See How To Upgrade/Recompile a Kernel.
Q: Can Linux Access MacIntosh File Systems?
A: There is a set of user−level programs that read and write the older Macintosh Hierarchical File System (HFS). It is available at metalab.unc.edu/pub/Linux/utils/disk−management/.
Access to the newer, HFS+ file systems is still under development. Q: How Do I Create a File System on a Floppy?
     $ mkdir /hpfs $ mount −t hpfs
/dev/hda5 /hpfs
  5. Partitions And Filesystems 16

The Linux FAQ
A: If you are running recent Gnome or KDE desktops, you have a GUI tool that makes formatting floppies easy.
A: To format a 3.5−inch, high density floppy at the command prompt:
For a 5.25 inch floppy, use /dev/fd0h1200 and 1200 as appropriate. For the B: drive use /dev/fd1 instead of /dev/fd0.
The −m 0 option tells mkfs.ext2 not to reserve any space on the disk for the superuserusually the last 10% is reserved for root.
The first command performs a low−level format. The second creates an empty file system. You can mount the floppy like a hard disk partition and simply cp and mv files, etc.
Device naming conventions generally are the same as for other unices. They can be found in Matt Welsh's Installation and Getting Started guide. Refer to Where Is the Documentation?. A more detailed and technical description is Linux Allocated Devices by H. Peter Anvin, hpa@zytor.com, which is included in LaTeX and ASCII form in the kernel source distribution (probably in /usr/src/kernel/Documentation/), as devices.tex and devices.txt.
Q: Does Linux Support File System Encryption?
A: Yes. One file system, ppdd, is archived at http://pweb.de.uu.net/flexsys.mtk/.
Q: How Do I Resize a Partition Non−Destructively?
A: Use the FIPS.EXE program, included with most Linux distributions,under MS−DOS.
A: GNU parted, a partition editor, is stable enough for non−guru, mere−mortal use with relative confidence. Source code for the latest version is at: ftp://ftp.gnu.org/pub/gnu/parted/. There's also a boot disk image for resizing root partitions and for running parted on non−Linux machines. The disk image may be easier for beginners. Building from source could require some extra configuration.
Parted also has tutorial−style, plain−text documentation for Linux and FAT (MS−DOS) file systems.
A: Also, some commercial distributions come with their own partitioning software, like Partition Magic.
Q: Where Is the Journalling File System on the Net?
A: Linux actually supports several journalling file systems. ext3 is now included in current 2.4.x kernels.
A: The journalling file system named Reiserfs has just been released from testing. It is said to make Linux even faster than Linux with the Ext2 file system installed, particularly when dealing with many small files.
Complete information is available at http://devlinux.org/namesys/. A: JFS is still under development.
Q: Why Isn't My Virtual Memory Swap Area Working?
 $ fdformat /dev/fd0H1440
$ mkfs −t ext2 −m 0 /dev/fd0H1440 1440
     5. Partitions And Filesystems 17

The Linux FAQ
A: When you boot (or enable swapping manually) you should see Adding Swap: NNNNk swap−space
If you don't see any messages at all you are probably missing
swapon −av
(the command to enable swapping) in your /etc/rc.local or /etc/rc.d/* (the system startup scripts), or have forgotten to make the right entry in /etc/fstab:
for example. If you see:
 Unable to find swap−space signature
you have forgotten to run mkswap. See the manual page for details; it works much like mkfs. Running the command free, in addition to showing free memory, should display:
 total used free Swap: 10188 2960 7228
If typing cat /proc/swaps reveals only file or partition names, but no swap space information, then the swap file or partition needs re−initialization.
Use fdisk (as root) to determine which partition on a hard drive has been designated as the swap partition. The partition still needs to be initialized with mkswap before enabling it with swapon.
[Andy Jefferson, Steve Withers]
Q: How Do I Add Temporary Swap Space?
A: In addition to a swap partition, Linux can also use a swap file. Some programs, like g++, can use huge amounts of virtual memory, requiring the temporary creation of extra space. To install an extra 64 MB of swap space, for example, use the following shell commands:
The count= argument to dd determines how big the swap file will be. In this example the swap file's name is /swap, but the name and location are, generally, arbitrary, depending only on the file system's available space and your having write permissions in the directory.
When you don't need the swap space any more, remove it with the following statements:
Take a look also at the Installation HOWTO and Installation & Getting Started for detailed instructions. If that still doesn't provide enough swap space, refer to How To Have More Than 128Mb of Swap.
    /dev/hda2 none swap
sw
   # dd if=/dev/zero of=/swap bs=1024 count=65535
# mkswap /swap
# swapon /swap
 # swapoff /swap
# rm /swap
  5. Partitions And Filesystems 18

6. System Libraries
Q: Where Can I Find Linux System Specifications?
Q: What Is ld.so and How Do I Get It?
Q: How Do I Upgrade the Libraries without Trashing the System? Q: What's All This about ELF? glibc?
Q: Where Can I Find Linux System Specifications?
A: As a start, look at the Linux Standards Base, http://www.linuxbase.org. The site contains information about
test software, file system organization, and shared library naming conventions. Q: What Is ld.so and How Do I Get It?
A: ld.so is the dynamic library loader. Each binary using shared libraries used to have about 3K of start−up code to find and load the shared libraries. Now that code has been put in a special shared library, /lib/ld.so, where all binaries can look for it, so that it wastes less disk space, and can be upgraded more easily.
ld.so can be obtained from http://tsx−11.mit.edu/pub/linux/packages/GCC/ and mirror sites. The latest version at the time of writing is ld.so.1.9.5.tar.gz.
/lib/ld−linux.so.1 is the same thing for ELF ("What's all this about ELF? ") and comes in the same package as the a.out loader.
Q: How Do I Upgrade the Libraries without Trashing the System? A:
You should always have a rescue disk set ready when you perform this procedure, in the likely event that
something goes wrong!
This procedure is especially difficult if you're upgrading very old libraries like libc4. But you should be able
to keep libc4 on the same system with libc5 libraries for the programs that still need them. The same holds true for upgrading from libc5 to the newer−yet glibc2 libraries.
The problem with upgrading dynamic libraries is that the moment you remove the old libraries, the utilities that you need to upgrade to the new version of the libraries don't work. There are ways around around this. One is to temporarily place a spare copy of the run time libraries, which are in /lib/, in /usr/lib/, or /usr/local/lib/, or another directory that is listed in the /etc/ld.so.conf file.
For example, when upgrading libc5 libraries, the files in /lib/ might look something like:
libc.so.5 libc.so.5.4.33 libm.so.5 libm.so.5.0.9
These are the C libraries and the math libraries. Copy them to another directory that is listed in /etc/ld.so.conf, like /usr/lib/:
Be sure to run ldconfig to upgrade the library configuration.
6. System Libraries 19
         $ cp −df /lib/libc.so.5* /usr/lib/
$ cp −df /lib/libm.so.5* /usr/lib/
$ ldconfig

The Linux FAQ
The files libc.so.5 and libm.so.5 are symbolic links to the actual library files. When you upgrade, the new links will not be created if the old links are still there, unless you use the −f flag with cp. The −d flag to cp will copy the symbolic link itself, and not the file it points to.
If you need to overwrite the link to the library directly, use the −f flag with ln.
For example, to copy new libraries over the old ones, try this. Make a symbolic link to the new libraries first,
then copy both the libraries and the links to /lib/, with the following commands.
Again, remember to run ldconfig after you copy the libraries.
If you are satisfied that everything is working correctly, you can remove the temporary copies of the old
libraries from /usr/lib/ or wherever you copied them. Q: What's All This about ELF? glibc?
A: See the ELF HOWTO by Daniel Barlow. Note that this is not the file move−to−elf, which is a blow−by−blow account of how to upgrade to ELF manually.
Linux has two different formats for executables, object files, and object code libraries, known as, "ELF". (The old format is called "a.out".) They have advantages, including better support for shared libraries and dynamic linking.
Both a.out and ELF binaries can coexist on a system. However, they use different shared C libraries, both of which have to be installed.
If you want to find out whether your system can run ELF binaries, look in /lib for a file named, libc.so.5. If it's there, you probably have ELF libraries. If you want to know whether your installation actually is ELF you can pick a representative program, like ls, and run file on it:
There is a patch to get 1.2.x to compile using the ELF compilers, and produce ELF core dumps, at ftp://tsx−11.mit.edu/pub/packages/GCC/. You do not need the patch merely to run ELF binaries. 1.3.x and later do not need the patch at all.
The GNU glibc2 libraries are essentially more recent versions of ELF libraries that follow most of the same processes for dynamic linking and loading. Upgrade information is contained in How Do I Upgrade the Libraries without Trashing the System?.
 $ ln −sf ./libm.so.5.0.48 libm.so.5
$ ln −sf ./libc.so.5.0.48 libc.so.5
$ cp −df libm.so.5* /lib
$ cp −df libc.so.5* /lib
 −chiark:~> file /bin/ls
/bin/ls: Linux/i386 impure executable (OMAGIC) − stripped
valour:~> file /bin/ls
/bin/ls: ELF 32−bit LSB executable, Intel 80386, version 1, stripped
    6. System Libraries 20

7. Linux Distributions
Q: How Do I Get Started?
Q: What are the Disk Space Requirements for Minimal, Server, and Workstation Use? Q: What are the Minimum and Maximum Memory Requirements?
Q: What Is the Best Distribution, SCSI Card, Editor, CD−ROM Drive, etc?
Q: How Can I Get a Distribution?
Q: Where Are the Linux FTP Archives?
Q: How Do I Install Linux Using FTP?
Q: How Can I Get Linux Without FTP Access?
Q: How Do I Install Linux?
Q: How Do I Get Started?
A: If you are new to Linux, you should start by buying or downloading a general−purpose Linux distribution. A distribution is a complete operating system, including the Linux kernel and all the utilities and software you are likely to need, ready to install and use. Most distributions include thousands of software packages, including user−friendly desktops, office suites, and games.
There are a handful of major Linux distributions, and as a beginner you are probably safer using one of them. For information about them, and how they are installed, see the Distributions−HOWTO from the Linux Documentation Project. Also, a list of distributions is updated weekly at http://lwn.net.
Before you select which distribution you want to try, read their descriptions carefully and compare them to your needs. Each distribution is tailored to a particular type of user. Some are optimized to function as servers, some are optimized for gaming, and some are optimized for desktop and office use.
There are a few distributions which are considered to be outstanding choices for new users:
• Red Hat is particularly good for servers
• Mandrake is excellent as a desktop system • SuSE is also excellent as a desktop system
There are also a large number of releases which are distributed less globally that suit special local and national needs. Many of them are archived at ftp://ftp.tux.org.
Q: What are the Disk Space Requirements for Minimal, Server, and Workstation Use?
A: Linux needs about 10Mb for a very minimal installation, suitable for trying Linux, and not much else.
You can fit a typical server installation, including the X Window System GUI, into 80Mb. Installing a small Debian GNU/Linux workstation takes from 500Mb to 1GB, including kernel source code, some space for user files, and spool areas.
Installing a commercial distribution that has a desktop GUI environment, commercial word processor, and front−office productivity suite, will claim 15.1 GB of disk space, approximately.
A fully installed Debian GNU/Linux system could use several Gigabytes of disk space. Q: What are the Minimum and Maximum Memory Requirements?
           7. Linux Distributions 21

The Linux FAQ
A: Linux needs at least 4MB, and then you will need to use special installation procedures until the disk swap space is installed. Linux will run comfortably in 4MB of RAM, although running GUI apps is impractically slow because they need to swap out to disk.
Some applications, like StarOffice, require 32 MB of physical memory, and compiling C++ code can easily consume over 100 MB of combined physical and virtual memory.
There is a distribution, "Small Linux", that will run on machines with 2MB of RAM. Refer to the answer to: Where Are the Linux FTP Archives?.
A number of people have asked how to address more than 64 MB of memory, which is the default upper limit in most standard kernels. Either type, at the BOOT lilo: prompt:
mem=XXM
Or place the following in your /etc/lilo.conf file: append="mem=XXM"
The parameter "XXM" is the amount of memory, specified as megabytes; for example, "128M."
If an "append=" directive with other configuration options already exists in /etc/lilo.conf, then add the mem= directive to the end of the existing argument, and separated from the previous arguments by a space; e.g.:
Be sure to run the "lilo" command to install the new configuration.
If Linux still doesn't recognize the extra memory, the kernel may need additional configuration. Refer to the
/usr/src/linux/Documentation/memory.txt file in the kernel source as a start.
For further information about LILO, refer to the manual pages for lilo and lilo.conf, the documentation in /usr/doc/lilo, the LILO−HOWTO, and the answer for: How Do I Set the Boot−Time Configuration?, below.
Q: What Is the Best Distribution, SCSI Card, Editor, CD−ROM Drive, etc?
A: The "best" of anything depends on your particular needs. Discussions like these frequently occur on Usenet. Most often they're flame bait. Answering is generally a waste of time. Free software licensing is unrestrictive enough, that, with a little experience, you can perform your own testing on your own hosts.
A better way to phrase a specific inquiry might be: "Where can I find...." Q: How Can I Get a Distribution?
A: If you can, please dig into your wallet and buy a copy of your distribution. Linux distributions are extremely inexpensive − usually around $30 for a complete system, and anywhere from $70 to around $150 for a larger system with more server software or development tools. Even the $30 "basic" systems contain the equivalent of thousands of dollars in proprietary tools, and are an incredible value. The distributors invest many of your dollars into further development, and most of them fund outside open source projects.
Commercial distributions are available from book and electronics stores, or you can order from their websites.
    # Example only; do not use.
append="parport=0x3bc,none serial=0x3f8,4 mem=XXM"
 7. Linux Distributions 22

The Linux FAQ
If you use Debian GNU/Linux, which is a volunteer project and a non−profit, you can donate directly to them instead.
A: There are some websites that sell Linux CD's very inexpensively. Try: • http://www.cheapbytes.com
A: Every distribution provides a download on their home page. This is a requirement of the licensing terms of the software, so if you cannot afford to pay for your distribution, you can get a copy this way. Some people compromise between paying and downloading, for example by buying each major release (such as 6.0) but downloading the point releases (such as 6.1 and 6.2).
Also, archives of many of the distributions are on line at: ftp://ftp.tux.org and http://planetmirror.com/pub/linux.
A: Some hardware vendors now ship systems with Linux pre−installed. However, they sometimes make it very difficult to buy them − they offer Linux on only a few systems, which are server machines, or they require you to go to a special "Linux" section on their website.
Q: Where Are the Linux FTP Archives?
A: There are three main archive sites for Linux:
• ftp://ftp.funet.fi/pub/OS/Linux/ (Finland).
• http://ibiblio.org/pub/linux/ (US), with a nice WWW interface. • ftp://tsx−11.mit.edu//pub/linux/ (US).
The best place to get the Linux kernel is ftp://ftp.kernel.org/pub/linux/kernel/. Linus Torvalds uploads the most recent kernel versions to this site.
Of the U.S. distributions, Debian GNU/Linux is available at http://www.debian.org/distrib/. Red Hat Linux's home site is ftp://ftp.redhat.com/, and Linux Slackware's is ftp://ftp.freesoftware.com/.
The Small Linux distribution, which can run in 2 MB of RAM, is located at http://smalllinux.netpedia.net/. The contents of these sites is mirrored (copied, usually approximately daily) by a number of other sites. Please
use a site close to you will be faster for you and easier on the network.
• ftp://ftp.sun.ac.za/pub/linux/sunsite/ (South Africa)
• ftp://ftp.is.co.za/linux/sunsite/ (South Africa)
• ftp://ftp.cs.cuhk.hk/pub/Linux/ (Hong Kong)
• ftp://sunsite.ust.hk/pub/Linux/ (Hong Kong)
• ftp://ftp.spin.ad.jp/pub/linux/ (Japan)
• ftp://ftp.nuri.net/pub/Linux/ (Korea)
• ftp://ftp.jaring.my/pub/Linux/ (Malaysia)
• ftp://ftp.nus.sg/pub/unix/Linux/ (Singapore)
• ftp://ftp.nectec.or.th/pub/mirrors/linux/ (Thailand)
• ftp://planetmirror.com/pub/linux (Australia) (Also take a look at
http://planetmirror.com/archives.php.)
• ftp://ftp.monash.edu.au/pub/linux/ (Australia)
• ftp://ftp.univie.ac.at/systems/linux/sunsite/ (Austria)
                        7. Linux Distributions 23

The Linux FAQ
• ftp://ftp.fi.muni.cz/pub/Unix/linux/ (Czech Republic) • ftp://ftp.funet.fi/pub/Linux/sunsite/ (Finland)
• ftp://ftp.univ−angers.fr/pub/Linux/ (France)
• ftp://ftp.iut−bm.univ−fcomte.fr/ (France)
• ftp://ftp.ibp.fr/pub/linux/sunsite/ (France)
• ftp://ftp.loria.fr/pub/linux/sunsite/ (France)
• ftp://ftp.dfv.rwth−aachen.de/pub/linux/sunsite/ (Germany)
• ftp://ftp.germany.eu.net/pub/os/Linux/Mirror.SunSITE/ (Germany)
• ftp://ftp.tu−dresden.de/pub/Linux/sunsite/ (Germany)
• ftp://ftp.uni−erlangen.de/pub/Linux/MIRROR.sunsite/ (Germany)
• ftp://ftp.gwdg.de/pub/linux/mirrors/sunsite/ (Germany)
• ftp://ftp.rz.uni−karlsruhe.de/pub/linux/mirror.sunsite/ (Germany)
• ftp://ftp.ba−mannheim.de/pub/linux/mirror.sunsite/ (Germany)
• ftp://ftp.uni−paderborn.de/pub/Mirrors/sunsite.unc.edu/ (Germany)
• ftp://ftp.uni−rostock.de/Linux/sunsite/ (Germany)
• ftp://ftp.rus.uni−stuttgart.de/pub/unix/systems/linux/MIRROR.sunsite/ (Germany) • ftp://ftp.uni−tuebingen.de/pub/linux/Mirror.sunsite/ (Germany)
• ftp://ftp.kfki.hu/pub/linux/ (Hungary)
• ftp://linux.italnet.it/pub/Linux/ (Italy)
• ftp://ftp.unina.it/pub/linux/sunsite/ (Italy)
• ftp://giotto.unipd.it/pub/unix/Linux/ (Italy)
• ftp://cnuce−arch.cnr.it/pub/Linux/ (Italy)
• ftp://ftp.flashnet.it/mirror2/metalab.unc.edu/ (Italy)
• ftp://ftp.nijenrode.nl/pub/linux/ (Netherlands)
• ftp://ftp.LeidenUniv.nl/pub/linux/sunsite/ (Netherlands)
• ftp://ftp.nvg.unit.no/pub/linux/sunsite/ (Norway)
• ftp://sunsite.icm.edu.pl/pub/Linux/metalab.unc.edu/ (Poland)
• ftp://ftp.rediris.es/software/os/linux/sunsite/ (Spain)
• ftp://sunsite.rediris.es/software/linux/ (Spain)
• ftp://ftp.cs.us.es/pub/Linux/sunsite−mirror/ (Spain)
• ftp://ftp.etse.urv.es/pub/mirror/linux/ (Spain)
• ftp://ftp.etsimo.uniovi.es/pub/linux/ (Spain)
• ftp://ftp.luna.gui.es/pub/linux.new/ (Spain)
• ftp://ftp.metu.edu.tr/pub/linux/sunsite/ (Turkey)
• ftp://unix.hensa.ac.uk/mirrors/sunsite/pub/Linux/ (UK)
• ftp://ftp.maths.warwick.ac.uk/mirrors/linux/sunsite.unc−mirror/ (UK)
• ftp://ftp.idiscover.co.uk/pub/Linux/sunsite.unc−mirror/ (UK)
• ftp://sunsite.doc.ic.ac.uk/packages/linux/sunsite.unc−mirror/ (UK)
• ftp://ftp.io.org/pub/mirrors/linux/sunsite/ (Canada)
• ftp://ftp.cc.gatech.edu/pub/linux/ (US)
• ftp://ftp.freesoftware.com/pub/linux/sunsite/ (US)
• ftp://ftp.siriuscc.com/pub/Linux/Sunsite/ (US)
• ftp://ftp.engr.uark.edu/pub/linux/sunsite/ (US)
• ftp://ftp.infomagic.com/pub/mirrors/linux/sunsite/ (US)
• ftp://linux.if.usp.br/pub/mirror/metalab.unc.edu/pub/Linux/ (Brazil)
• ftp://farofa.ime.usp.br/pub/linux/ (Brazil)
Please send updates and corrections to this list to the Linux FAQ maintainer, see Asking Questions and Sending Comments. Not all of these mirror all of the other "source" sites, and some have material not available on the "source" sites.
                                                7. Linux Distributions 24

Q: How Do I Install Linux Using FTP?
The Linux FAQ
A: Most distributions are too large and complex to make FTP installation practical. Installing a basic Linux system that doesn't have a GUI or major applications is possible with FTP, however. The main non−commercial distribution in use is Debian GNU/Linux, and this answer describes an installation of a basic Debian system, to which you can add other Linux applications and commercial software as necessary.
This answer describes installation on IBM−compatible machines with an Intel x86 or Pentium processor. You will need a machine with at least a 80386 processor, 8 Mb of memory, and about 100 Mb of disk space. More memory and a larger disk is necessary however, for practical everyday use.
For other hardware, substitute "−arm", "−ppc", "−m68k", or other abbreviation in directory names for "−i386".
For detailed and hardware−specific information refer to: http://www.debian.org/releases/stable/.
• Connect to http://ftp.debian.org/dists/stable/main/disks−i386/current/. If you use anonymous FTP, connect to ftp://ftp.debian.org/debian/dists/stable/main/disks−i386/current/.
• Choose the images−*/ subdirectory that matches the type of floppy drive installed on your machine, if unsure try images−1.44/. Retrieve the rescue.bin, root.bin, and driver−*.bin disk images. Once you have installed those floppy images, the rest of the system can be retrieved from a Debian mirror site, or installed from CD. If you have a Linux machine, you can use dd to write the images to the diskettes. If you are creating the installation diskettes on a MS−DOS machine, also download the RAWRITE.EXE MS−DOS utility, which will copy the raw binary images to floppy disks. Also download the install.en.txt document, which contains the detailed installation instructions.
• Create the installation disk set on floppies using either dd under Linux (e.g.: dd if=resc1440.bin of=/dev/fd0), or the RAWRITE.EXE utility under MS−DOS. Be sure to label each installation diskette.
• Insert the rescue diskette into the floppy drive and reboot the computer. If all goes well, the Linux kernel will boot, and you will be able start the installation program by pressing Enter at the boot: prompt.
• Follow the on−screen instructions for partitioning the hard disk, installing device drivers, the basic system software, and the Linux kernel. If the machine is connected to a local network, enter the network information when the system asks for it.
• To install additional software over the Internet, be sure that you have installed the ppp module during the installation process, and run (as root) the /usr/sbin/pppconfig utility. You will need to provide your user name with your ISP, your password, the ISP's dial−up phone number, the address(es) of the ISP's Domain Name Service, and the serial port that your modem is connected to, /dev/ttyS0 /dev/ttyS3. Be sure also to specify the defaultroute option to the PPP system, so the computer knows to use the PPP connection for remote Internet addresses.
• You may have to perform additional configuration on the PPP scripts in the /etc/ppp subdirectory, and in particular, the ISP−specific script in the /etc/ppp/peers subdirectory. There are basic instructions in each script. For detailed information, refer to the Debian/GNU Linux installation instructions that you downloaded, the pppd manual page (type man pppd), and the PPP HOWTO from the Linux Documentation project, http://tldp.org/.
• Once you have a PPP connection established with your ISP (it will be displayed in the output of ifconfig), use the dselect program to specify which additional software you want to install. Use the apt[A]ccessoption to retrieve packages via anonymous FTP, and make sure to use the [U]pdate option to retrieve a current list of packages from the FTP archive.
    7. Linux Distributions 25

The Linux FAQ
Q: How Can I Get Linux Without FTP Access?
A: The easiest thing is probably to find a friend with FTP access. If there is a Linux user's group near you,
they may be able to help.
If you have a reasonably good email connection, you could try the FTP−by−mail servers at
ftpmail@ftp.sunet.se, or ftpmail@ftp.uni−stuttgart.de.
Linux is also available via traditional mail on CD−ROM. The file ftp://metalab.unc.edu/pub/Linux/docs/HOWTO/Installation−HOWTO, and the file ftp://metalab.unc.edu/pub/Linux/docs/HOWTO/Distribution−HOWTO contain information on these distributions.
Q: How Do I Install Linux?
A: Once you obtain a distribution, it will contain instructions on installation. Each distribution has its own
installation program.
A: There is a very thorough installation guide on line at http://heather.cs.ucdavis.edu/~matloff/linux.html
A: Some distributions (e.g., Debian GNU/Linux) can be installed via anonymous FTP from various Linux archive sites, but unless you have cable, DSL, or some other broadband Internet access, the size of the distribution makes this impractical. See Where Are the Linux FTP Archives?.
Postings on the Usenet News groups, including the FAQ, are archived on http://groups.google.com/. Search for news:comp.os.linux, news:alt.uu.comp.os.linux and their subgroups, or whatever is appropriate, to retrieve articles from the Linux News groups. See What News Groups Are There for Linux?.
           7. Linux Distributions 26

8. Booting the OS
Q: Can Linux Boot from MS−DOS?
Q: How Can Linux Boot from OS/2's Boot Manager?
Q: How Do I Set the Boot−Time Configuration?
Q: How Do I Get LILO to Boot the Kernel Image?
Q: Can I Remove LILO So the System Boots DOS Again?
Q: Why Does the System Check the Ext2fs Partitions Each Reboot?
Q: How Do I Make Sure the System Boots after Re−Installing the Operating System? Q: How To Make a Rescue Floppy
Q: Can Linux Boot from MS−DOS?
A: If LILO doesn't work, and if the machine has MS−DOS or Microsoft Windows, you may be left with a computer that won't boot. This can also happen on an upgrade to your Linux distribution. Re−installing LILO is the last thing that the installation does.
It is vitally important when installing or upgrading Linux on a dual boot machine, to have a MS−DOS or Windows rescue disk nearby so you can FDISK −MBR. Then you can go about using LOADLIN.EXE instead of LILO.
This config.sys file is one possible way to invoke LOADLIN.EXE and boot MS−DOS or Linux.
This creates a menu where you can directly jump to LOADLIN.EXE before all of the MS−DOS drivers get loaded.
The paths and options are peculiar to one machine and should be intuitively obvious to the most casual observer. See the LOADLIN.EXE docs for options. They are the same as LILO, and options are just passed to the kernel, anyhow.
[Jim Harvey]
Q: How Can Linux Boot from OS/2's Boot Manager?
A: #Create a partition using OS/2's FDISK.EXE (Not Linux's fdisk).
1. Format the partition under OS/2, either with FAT or HPFS. This is so that OS/2 knows about the partition being formatted. (This step is not necessary with OS/2 Warp 3.0.)
2. Add the partition to the Boot Manager.
3. Boot Linux, and create a file system on the partition using mkfs −t ext2 or mke2fs. At this point you
may, if you like, use Linux's fdisk to change the code of the new partition to type 83 (Linux
Native)this may help some automated installation scripts find the right partition to use.
4. Install Linux on the partition.
5. Install LILO on the Linux partition NOT on the master boot record of the hard drive. This installs
LILO as a second−stage boot loader on the Linux partition itself, to start up the kernel specified in the LILO configuration file. To do this, you should put
          [menu] menuitem=DOS, Dos Boot menuitem=LINUX, Linux Boot
[LINUX] shell=c: edhatloadlin.exe c: edhatautobootvmlinuz vga=5 root=/dev
[DOS] STACKS = 0,0 rem all the other DOS drivers get loaded here.
 8. Booting the OS 27

The Linux FAQ
         boot = /dev/hda2
(where /dev/hda2 is the partition you want to boot from) in your /etc/lilo/config or
/etc/lilo.config file.
6. Make sure that it is the Boot Manager partition that is marked active, so that you can use Boot
Manager to choose what to boot.
There is a set of HOWTO's on the subject of multi−boot systems at the LDP Home Page, http://tldp.org. Q: How Do I Set the Boot−Time Configuration?
A: You can configure Linux at thelilo:prompt either by typing the kernel arguments at theBOOT lilo: prompt, or by adding an append= directive to the /etc/lilo.conf file; for example, at the LILO prompt (example only):
Example statement for /etc/lilo.conf: append="parport=0x3bc,none serial=0x3f8,4 serial=0x2f8,3"
If you modify the /etc/lilo.conf file, be sure to run the lilo command to install the new configuration. Configuration notes for specific hardware devices are in the documentation of the kernel source distribution,
/usr/src/linux/Documentation in most distributions.
Refer to the lilo and /etc/lilo.conf manual pages, as well as the LDP BootPrompt−HowTo, see Where
Is the Documentation?, and the documentation in /usr/doc/lilo. Q: How Do I Get LILO to Boot the Kernel Image?
A: From kernel versions 1.1.80 on, the compressed kernel image, which is what LILO needs to find, is in arch/i386/boot/zImage, or arch/i386/boot/bzImage when it is built, and is normally stored in the /boot/ directory. The /etc/lilo.conf file should refer to the vmlinuz symbolic link, not the actual kernel image.
This was changed to make it easier to build kernel versions for several different processors from one source tree.
Q: Can I Remove LILO So the System Boots DOS Again?
A: The lilo program (not the complete LILO package), uses the command line option −u to uninstall the LILO
boot loader. You have to supply the device name of the device you installed LILO on, for example:
 lilo −u /dev/hda
This rewrites the original, pre−LILO master boot record back to the first hard drive, from the boot record saved in /boot/boot.0300. If you installed LILO to a partition as a secondary boot loader, for example, /dev/hda1, lilo re−installs the original boot sector from the save file /boot/boot.0301. Refer to the lilo manual page for details. Thanks to Villy Kruse for reminding me to update this answer.
If you have an earlier version of LILO, you will have to use the DOS (MS−DOS 5.0 or later, or OS/2) FDISK /MBR (which is not documented). This will overwrite the lilo boot loader with a standard MS−DOS Master Boot Record. If you have DR−DOS 6.0, go into FDISK.EXE in the normal way and then select the
  BOOT lilo: parport=0x3bc,7
parport=0x3bc,none serial=0x3f8,4 serial=0x2f8,3
    8. Booting the OS 28

The Linux FAQ
Re−write Master Boot Record option.
If you create a boot floppy during the Windows installation process, make sure that it contains the programs
FDISK.EXE, FORMAT.COM, and SYS.COM, and use that to re−install MS−DOS on the hard disk.
If you don't have MS−DOS or DR−DOS, you need to have the boot sector that LILO saved when you first
installed it. You did keep that file, didn't you? It's probably called boot.0301 or some such. Type:
 dd if=boot.0301 of=/dev/hda bs=445 count=1
(or /dev/sda if you're using a SCSI disk). This may also wipe out your partition table, so beware! If you're desperate, you could use
 dd if=/dev/zero of=/dev/hda bs=512 count=1
This will erase your partition table and boot sector completely: you can then reformat the disk using your favorite software. But this will render the contents of your disk inaccessible you'll lose it all unless you're an expert.
Note that the DOS MBR boots whichever (single!) partition is flagged as "active." You may need to use fdisk to set and clear the active flags on partitions appropriately.
Q: Why Does the System Check the Ext2fs Partitions Each Reboot?
A: Refer to EXT2−fs: warning: mounting unchecked file system.
Q: How Do I Make Sure the System Boots after Re−Installing the Operating System?
A: This should work whether you're re−installing Linux or some other, commercial, operating system:
• Insert a blank, formatted floppy in drive A:
• Save a copy of the boot hard drive's Master Boot Record to the floppy, by executing the command:
        #dd if=/dev/hda of=/dev/fd0 count=1
dd is a standard program on Linux systems. A MS−Windows compatible version is available from
ftp://ftp.gnu.org/, as well as many MS software archives.
• Test that the floppy boots the system by rebooting with the floppy in the A: drive.
• Then you should be able to install the other operating system (on a different hard drive and/or
partition, if you don't want to uninstall Linux).
• After installation, boot Linux again from the floppy, and re−install the MBR with the command:
/sbin/lilo. [Jacques Guy]
Q: How To Make a Rescue Floppy
A: Make a file system on it with bin, etc, lib and dev directorieseverything you need. Install a kernel on it and
arrange to have LILO boot it from the floppy (see the LILO documentation, in lilo.u.*.ps).
If you build the kernel (or tell LILO to tell the kernel) to have a RAM disk the same size as the floppy the
RAM disk will be loaded at boot time and mounted as root in place of the floppy.
See the Bootdisk HOWTO.
8. Booting the OS 29
     
The Linux FAQ
 8. Booting the OS
30

9. Application Software Management
Q: How To Determine What Packages Are Installed on a System Q: How Do I Find a Particular Application?
Q: What Software does Linux Support?
Q: Can Linux Use True Type Fonts?
Q: Can Linux Run Microsoft Windows Programs? Q: How Do I Install GNU Software?
Q: Where Can I Get Java?
Q: Where Can I Find Kermit for Linux?
Q: Is There an ICQ Program That Runs under Linux?
Q: How To Determine What Packages Are Installed on a System
A: For distributions that use RPM format packages, use the command:
$ rpm −qa
You need to be logged in as root. You can save the output to a text file for future reference, a command like:
 $ rpm −qa >installed−packages
A: For Debian systems, the equivalent command is: $ dpkg −l
A: For Slackware and Slackware based distributions, look in the directory /var/log/packages. [Steven J. Hathaway]
There is one file that describes the contents of each *.tgz package installed on your system.
Q: How Do I Find a Particular Application?
A: Look first in the Linux Software Map. It's at: ftp://metalab.unc.edu/pub/Linux/docs/linux−software−map/, and on the other FTP sites. A search engine is available on the World Wide Web at http://www.boutell.com/lsm/.
Also check out the Freshmeat Web site: http://www.freshmeat.net, which is where many new announcements of free software first appear. Freshmeat is basically a site index that continuously updates the notices of new or upgraded software for Linux, and maintains indexes of the announcements and links to their URL's.
The FTP sites (Where Are the Linux FTP Archives?) often have ls−lR or INDEX directory listings which you can search using grep or a text editor. The directory listings files can be very large, however, making them unwieldy for quick searches.
Also look at the Linux Project's Map: ftp://ftp.ix.de/pub/ix/Linux/docs/Projects−Map.gz. There's a search engine for Linux FTP archives at: http://lfw.linuxhq.com.
Searching for "Linux" on the World Wide Web provides copious references. (Where Is the Linux Stuff on the World Wide Web?)
                    9. Application Software Management 31

The Linux FAQ
If you don't find anything, you could download the sources to the program yourself and compile them. See (How Do I Port XXX to Linux?). If it's a large package that may require some porting, post a message to news:comp.os.linux.development.apps. The popularity of Linux makes this an extremely unlikely occurrence. The great majority of software available on other Unix−type systems has already been ported to Linux.
If you compile a large−ish program, please upload it to one or more of the FTP sites, and post a message to news:comp.os.linux.announce (submit your posting to linux−announce@news.ornl.gov.
If you're looking for an application program, the chances are that someone has already written a free version. The news:comp.sources.wanted FAQ has instructions for finding the source code.
Q: What Software does Linux Support?
A: Linux runs all of the standard open source utilities, like GCC, (X)Emacs, the X Window System, all the standard Unix utilities, TCP/IP (including SLIP and PPP), and all of the hundreds of programs that people have compiled or ported to it.
There is a DOS emulator, called DOSEMU, that lets Linux run programs written for DOS. The latest stable release is 0.98.3. The FTP archives are at ftp://ftp.dosemu.org/dosemu. The Web site is http://www.dosemu.org.
The emulator can run DOS itself and some (but not all) DOS applications. Be sure to look at the README file to determine which version you should get. Also, see the DOSEMU−HOWTO (slightly dated at this point it doesn't cover the most recent version of the program), at ftp://metalab.unc.edu/pub/Linux/docs/HOWTO.
Work has been progressing on WINE, an emulator for Microsoft Windows binaries. See Can Linux Run Microsoft Windows Programs?.
Intel Binary Compatibility Standard (iBCS2) emulator code for SVR4 ELF and SVR3.2 COFF binaries can be included in the kernel as a compile−time option. There is information at ftp://tsx−11.mit.edu/pub/linux/BETA/ibcs2/README. For more information see the INFO−SHEET.
Some companies have commercial software available. They often announce their availability on news:comp.os.linux.announce try searching the archives. See Are the News Groups Archived Anywhere?.
Q: Can Linux Use True Type Fonts?
A: Yes. There are a number of True Type font servers for the X Window System. One of them is xfsft. Its
home page is http://www.dcs.ed.ac.uk/home/jec/programs/xfsft/. There are also instructions for configuration. A: Another True Type font server is xfstt
A: People have reported success with other True Type font servers. There are links from the xfsft Home Page to them as well.
A: You can also compile True Type Font support into your X server directly. Again, refer to the xfsft Home Page for details.
A: Debian users should consult the TT−Debian−HOWTO.
Q: Can Linux Run Microsoft Windows Programs?
9. Application Software Management 32
              
The Linux FAQ
A: If you need to run MS Windows programs, the safest bet is to dual−boot Windows and Linux. LILO, the Linux boot loader, can boot one of several operating systems from a menu. Booting Windows is obviously the most reliable way to run all your Windows programs. See the LILO documentation for details on dual booting. Also, LOADLIN.EXE (a DOS program to load a Linux, or other OS, kernel is one way to make Linux co−exist with DOS. LOADLIN.EXE is particularly handy when you want to install Linux on a 3rd or 4th drive on a system (or when you're adding a SCSI drive to a system with an existing IDE).
In these cases, it is common for LILO's boot loader to be unable to find or load the kernel on the "other" drive. So you just create a C:LINUX directory (or whatever), put LOADLIN.EXE in it with a copy of your kernel, and use that.
LOADLIN.EXE is a VCPI compliant program. Win95 will want to "shutdown into DOS mode," to run it (as it would with certain other DOS protected−mode programs).
Earlier versions of LOADLIN.EXE sometimes required a package called REALBIOS.COM, which required a boot procedure on an (almost) blank floppy to map the interrupt vectors (prior to the loading of any software drivers). (Current versions don't seem to ship with it, and don't seem to need it).
[Jim Dennis]
A: WINE (WINE Is Not an Emulator), is a reimplementation of Windows APIs for Linux and Unix. WINE is a great project with huge potential, but it is still not ready for general distribution. The WINE team is still working toward a 1.0 release. However, it is already capable of running many Windows programs. If you want to contribute to its development, look for the status reports in the news:comp.emulators.ms−windows.wine newsgroup.
There is also a FAQ, compiled by P. David Gardner, at ftp://metalab.unc.edu/pub/Linux/docs/faqs/Wine−FAQ/.
A: A proprietary program called VMWare is also available to let you run Windows under a Linux "host" operating system. See the company's website at http://www.vmware.com.
A: Another package that will help is Win4Lin, a proprietary package. Win4Lin also allows you to run many Windows programs under *NIX.
Here is how one user reports on Win4Lin:
I just finished installing it on a new installation of Mandrake 8.1 and I have found it to be very satisfactory. It only cost $49 (received a special offer after registering at their website for information). I installed it in just a very few minutes, and it now allows me to run all of the Windows applications programs I have been used to using for a long time (Pagemaker, Lview, Paint Shop Pro, Explorer etc.) in a window on one of my Linux KDE desktop screens ... concurrently with all of my Linux tools.
   −−Josef Lowder A: On a correctly configured system, installing a GNU software package requires four steps:
1. With the source.tar.gz archive in the /usr/src/ directory, or wherever you maintain your source files, untar and decompress the package with the command:
Q: How Do I Install GNU Software?
 9. Application Software Management 33

The Linux FAQ
         tar zxvf package−name.tar.gz
2. Run the ./configure script in the untarred source archive's top−level directory with whatever command line arguments you need. The options that configure recognizes are usually contained in a file called INSTALL or README.
3. Run make. This will build the source code into an executable program (or programs) and may take a few minutes or a few hours, depending on the speed of the computer and the size of the package.
4. Run make install. This will install the compiled binaries, configuration files, and any libraries in the appropriate directories.
Q: Where Can I Get Java?
A: The Sun Microsystems Java runtime environments and developer's kits are at http://java.sun.com
You can also get the source code, which is licensed by Sun Microsystems.
A: The home page of IBM's Jikes Java compiler is http://www10.software.ibm.com/developerworks/opensource/jikes.
A: There is a version of Sun's HotJava browser for Linux at: http://www.java.sun.com/products/hotjava/. A: Kaffee, a free Java clone, is available from: http://www.kaffe.org.
A: There is a resource page of free and commercial Java packages at: http://www.blackdown.org/java−linux.html.
A: Netscape Communicator comes with its own version of the Java Runtime Environment, so if you need Java only to view Web graphics, you may already have the runtime version of the Java Virtual Machine and libraries that you need installed on your system. You can download Communicator from http://www.netscape.com.
Q: Where Can I Find Kermit for Linux?
A: Kermit is distributed under a non−GPL copyright that makes its terms of distribution somewhat different.
The sources and some binaries are available on ftp://kermit.columbia.edu.
The WWW Home Page of the Columbia University Kermit project is http://www.columbia.edu/kermit/.
Q: Is There an ICQ Program That Runs under Linux?
A: Several ICQ clients are available on metalab.unc.edu. Refer to Where Are the Linux FTP Archives?). ICQ itself does not have a Linux client, but there is a Java client at http://www.mirabilis.com/download/.
Q; Where Can I Find lint for Linux?|lint−for−linux
A: Roughly equivalent functionality is built into GCC. Use the −Wall option to turn on most of the useful
extra warnings. See the GCC manual for more details (type F1−i in Emacs and select the entry for GCC).
There is a freely available program called lclint that does much the same thing as traditional lint. The announcement and source code are available at ftp://ftp.sds.lcs.mit.edu/pub/lclint; on the World Wide Web, look at http://lclint.cs.virginia.edu.
             9. Application Software Management 34

10. Directory And File Management
Q: How Do I Undelete Files?
Q: How Do I Make Backups?
Q: Is There a Defragmenter for Ext2fs?
Q: How Do I Undelete Files?
A: In general, this is very hard to do on unices because of their multitasking nature. Undelete functionality for
the ext2fs file system is being worked on, but don't hold your breath.
There are a number of packages available which instead provide new commands for deleting and copying which move deleted files into a "wastebasket" directory. The files can be recovered until cleaned out automatically by background processing.
The Midnight Commander file manager provides an undelete facility that uses Ext2 file system library functions and an undelete directory for each file system. Commercial distribution packages of MC may or may not have this feature enabled, so be sure to look in the source code distribution for instructions on how to enable the undelete feature.
Alternatively, you can search the raw disk device which holds the file system in question. This is hard work, and you will need to be logged in as root to do this. But it can be done. Run grep on the raw device; e.g.:
 grep −b 'bookmarks' /dev/hda
If the data has not been overwritten, you should be able to recover it with a text editor. [Dave Cinege, Daniel Novotny]
Q: How Do I Make Backups?
A: You can back up a directory hierarchy or complete file system to any media using GNU tar or cpio, the standard *nix tools for this purpose. tar seems to be the more commonly used program currently, and includes command line options to make compressed, incremental, and multi−volume backups. Complete information is contained in the documentation, which is in GNU Texinfo format.
A: The free program, Amanda, receives a lot of mentions on Usenet. Its home page is http://www.amanda.org.
A: Several commercial backup utilities also exist. They are often included in commercial distributions. Q: Is There a Defragmenter for Ext2fs?
A: Yes. There is defrag, a Linux file system defragmenter for ext2, Minix, and old−style ext file systems. It is available at ftp://metalab.unc.edu/pub/Linux/system/filesystems/defrag−0.70.tar.gz. Users of the ext2 file system can probably do without defrag, because ext2 contains extra code to keep fragmentation reduced even in very full file systems.
       10. Directory And File Management 35

11. Connecting To A Network
Q: How I Configure Dial−up PPP?
Q: How Do I Use Linux with a Cable Modem?
Q: Where Is Information about NFS Compatibility? Q: What Does VFS Stand For?
Q: Can Linux Access SMB File Systems?
Q: How I Configure Dial−up PPP?
A: This information is mainly for people who do not have a wrapper utility like kppp or pppconfig, or are not able to get those utilities to work correctly. If you need to manually configure PPP to dial in to your ISP, you will need the following information:
• The port that your modem is connected to: /dev/ttyS0−/dev/ttyS3, which correspond to COM1−COM4 under MS−DOS.
• The phone number of your ISP's data connection.
• The user name and password that your ISP gave you.
• The IP addresses of the primary and possibly secondary Domain Name Service that you will use when
dialing in to the ISP. This assumes that you will not be using a DNS that you installed on your system.
When you have all of this information, make sure that the programs pppd and chat, at the very minimum, are installed correctly. In most current distributions, they are installed in the /usr/sbin/ directory, and you will need to be logged in as root to use them. In addition, the following programs are also useful for configuring network connections, determining network status, and diagnosing problems: /sbin/ifconfig, /sbin/route, /bin/ping, /usr/sbin/traceroute. These are the basic steps that you need to follow to configure PPP. You must be logged in as root.
• Make sure that the serial port and modem are operating correctly. Using a program like minicomm or kermit, you should be able to send AT commands to the modem and receive the OK string in response from the modem.
• Enter the primary and possibly secondary Domain Name Server IP addresses in the /etc/resolv.conf file, using dotted quad notation, with the nameserver label. For example:
The nameserver addresses in the example above are examples only. They don't correspond to actual network hosts. The first line, order hosts,bind, tells your networking software, when it resolves network domain addresses, to first look in the /etc/hosts file, and then use the bind service; i.e., the DNS servers, which are specified on the lines that begin with nameserver.
• Locate the chat script that PPP will use to dial the modem and connect to your ISP. In many systems, this is either in the /etc/chatscripts or /etc/ppp directory, and will be called provider or something similar. You can store a chat script anywhere, provided that you tell pppd to use it rather than the default script. Refer to the chat and pppd manual pages, and the information below, for details. Here is a sample chat script:
      order hosts,bind
nameserver 196.182.101.103
nameserver 196.182.101.104
 ABORT
ABORT
ABORT
ABORT
BUSY
"NO CARRIER"
VOICE
"NO DIALTONE"
11. Connecting To A Network 36

The Linux FAQ
 ""            ATDT<your_isp's_phone_number>
ogin          <your_user_name>
word          <your_password>
This is a chat program for a simple, script based login. The chat program uses the pair of strings on each line as a match/response pair. When it starts, it sends the string "ATDTyour_isp's_phone_number," where you have substituted the actual phone number of course. It then waits for the string ogin (a substring of the word login) and sends your user name. It then waits for word (a substring of password) and sends your password. If your ISP uses a different login and password prompts, and any additional prompts, you will need to edit the script accordingly. Again, refer to the chat manual page for details.
If your ISP uses PAP or CHAP authentication, you will need to edit thepap−secretsor chap−secrets files in /etc/ppp directory as well. Refer to the manual pages for these files, as well as the instruction in the files themselves.
• The configuration of pppd, the program that maintains the actual connection, is usually contained in two or three separate files. The first is usually /etc/ppp/options, which contains options that all of your system's PPP connections will use. (Yes, you can have more than one; as many as your computer has serial ports, generally.)
Here is a sample /etc/ppp/options file:
The options may be given on one line or each on a separate line. Many options files are much longer, and come with a description of each option. Here, the options mean, in order, don't remap any characters between the PPP client and server; always use password, PAP, or CHAP authentication when making a connection; use the modem's hardware handshake lines for flow control; lock the serial port when in use so no other programs can access it; and do not use the IPX network protocol.
• For connection set−up on each individual serial port or PPP host, there will either be an /etc/ppp/options.ttyS1, for example, options file for /etc/ttyS1, or a file for your ISP in the /etc/ppp/peers directory. The default is often called /etc/ppp/peers/provider. Here is a sample of the default provider file:
There might be an explanation of these and other options in the /etc/ppp/peers/provider file itself. You can also refer to the pppd manual page for details. Briefly, they mean: do not use PAP authentication for this connection; use the chat program and the /etc/chatscripts/provider script, which is described above, to dial the phone and log in; set the network default route to the PPP connection (so when your network software needs to resolve an network address that is not on your local machine(s), it will use the PPP connection to the Internet); use /dev/ttyS1 as the serial port for the connection; set the modem speed to 38400; and keep the pppd daemon running even if the connection fails.
 #/etc/ppp/options
asyncmap
0
auth
crtscts
lock
noipx
# −−−<End of File>−−−
 noauth
connect "/usr/sbin/chat −v −f /etc/chatscripts/provider"
defaultroute
/dev/ttyS1
38400
persist
11. Connecting To A Network 37

The Linux FAQ
That is all of the configuration you need. To actually start and stop PPP, there are often /usr/bin/pon and /usr/bin/poff scripts (in Debian), or something similar, and they are usually very simple, and only contain the command:
 $ /usr/sbin/pppd call ${1:−provider}
This will start pppd and use the call option to call the server that you type on the command line, or the provider given in the /etc/ppp/peers/provider file if you do not specify a remote server. After making the call and logging in (about 30 seconds), you should be able to use the /sbin/ifconfig program to determine that the connection really did establish a PPP interface (the first will be ppp0, the second will be ppp1, etc., depending on how many simultaneous PPP connections you have. If something goes wrong, you can look at the/var/log/ppp.logfile to determine what happened. You can also view the log as the connection is being made, by "tailing" it in another window; that is, viewing it as pppd logs the connection's status information. To do this, use the command (again, as root):
 $ tail −f /var/log/ppp.log
On some systems the PPP output is directed to /var/log/messages, in which case your system may not have a dedicated PPP log file.
You should be also able to ping one of your ISP's domain names (e.g.,mail.isp.com) and receive a response.
These are the most basic steps for configuring a PPP connection. You will also need to take into account what other network connections may be present (for example, if there's an Ethernet connection that has already been assigned the default route), as well as various security measures at your ISP's end. If you're having trouble making the dial−up connection, usually the best way to determine what may be going wrong is to use Seyon, minicomm, kermit, or some other program to dial and log in manually to the ISP, and determine just exactly what you have to do to log in, then duplicate that in the PPP scripts.
Most Linux documentation also has additional instructions for configuring PPP connections.
Refer to Where Are the Linux FTP Archives? and Where Is the Documentation?.
Q: How Do I Use Linux with a Cable Modem?
A: The www.CablemodemInfo.com and xDSL Web page at http://www.cablemodeminfo.com has a section devoted to Linux.
See also the Cable−Modem−HOWTO at the LDP.
Q: Where Is Information about NFS Compatibility?
A: See the NFS−HOWTO for up to date information.
A: This information is partly taken from Nicolai Langfeldt's excellent NFS HOWTO, and is current as of 10/1/1999:
Most version 2.2.x kernels need a set of patches to install the knfsd subsystem, maintained by H.J. Lu, to communicate efficiently (if at all) with Sparc, IBM RS, and Alpha machines, and probably others. This package is actually a collection of patches to the kernel sources. Better support for non−Intel architectures is included in the 2.4 kernels.
     11. Connecting To A Network 38

The Linux FAQ
There is also a user−space server. Although it lacks remote file locking, it is easier to install. It may be equally efficient.
In the Documentation/Changes of recent kernel distributions, there is a list of URL's for both the knfsd server and the user−space server.
In the case of older Solaris releases, the lack of statd or lockd on a client or server machine may cause incompatibility. On some versions of Solaris, statd can be used to exploit features of the automounter. Sun released a patch to correct this, but statd still needs to be started by root on such systems. On recent Solaris systems, refer to the information in /etc/dfs/dfstab and the share(1M) manual page to enable volume sharing. In addition, the rpcinfo program can tell you if statd or lockd are available on the local or remote machines.
The linux−kernel mailing list has on−and−off discussions of the status of the NFS subsystem, which appears to be changing rapidly.
[Nicolai Langfeldt, Robert Kiesling, Anders Hammarquist] Q: What Does VFS Stand For?
A: Virtual File System. It's the abstraction layer between the user and real file systems like ext2, Minix and MS−DOS. Among other things, its job is to flush the read buffer when it detects a disk change on the floppy disk drive.
 VFS: Disk change detected on device 2/0
Q: Can Linux Access SMB File Systems?
A: Linux supports read/write access of Windows for Workgroups and Windows NT SMB volumes. See the file Documentation/filesystems/smbfs.txt of the Linux kernel source distribution, and How To Upgrade/Recompile a Kernel.
There is also a suite of programs called Samba which provide support for WfW networked file systems (provided they're for TCP/IP). Information is available in the README file at metalab.unc.edu/pub/Linux/system/network/samba/.
The SMB Web site is http://www.samba.org, and there is also a Web site at samba.anu.edu.au/samba/.
     11. Connecting To A Network 39

12. Troubleshooting
Q: What are these Nasty Messages about Inodes, Blocks, and the Like? Q: Why Do FTP Transfers Seem to Hang?
Q: Why Does Free Dump Core?
Q: Why Does Netscape Crash Frequently?
Q: Why Won't My FTP or Telnet Server Allow Logins? Q: How Do I Keep Track of Bookmarks in Netscape? Q: Why Does the Computer Have the Wrong Time?
Q: Why Don't Setuid Scripts Work?
Q: Why Is Free Memory as Reported by free Shrinking?
Q: Why Does the System Slow to a Crawl When Adding More Memory?
Q: Why Won't Some Programs (e.g., xdm) Allow Logins?
Q: Why Do Some Programs Allow Logins with No Password?
Q: Why Does the Machine Run Very Slowly with GCC / X / ...?
Q: Why Does My System Only Allow Root Logins?
Q: Why Is the Screen Is All Full of Weird Characters Instead of Letters?
Q: If I Screwed Up the System and Can't Log In, How Can I Fix It?
Q: What if I Forget the root Password?
Q: What's This Huge Security Hole in rm!?!?!
Q: Why Don't lpr and/or lpd Work?
Q: Why Are the Timestamps on Files on MS−DOS Partitions Set Incorrectly? Q: Why is My Root File System Read−Only?
Q: What Is /proc/kcore?
Q: Why Does fdformat Require Superuser Privileges?
Q: Why Doesn't My PCMCIA Card Work after Upgrading the Kernel?
Q: What are these Nasty Messages about Inodes, Blocks, and the Like?
A: You may have a corrupted file system, probably caused by not shutting Linux down properly before turning off the power or resetting. You need to use a recent shutdown program to do this for example, the one included in the util−linux package, available on sunsite and tsx−11.
If you're lucky, the program fsck (or e2fsck or xfsck as appropriate if you don't have the automatic fsck front−end) will be able to repair your file system. If you're unlucky, the file system is trashed, and you'll have to re−initialize it with mkfs (or mke2fs, mkxfs, etc.), and restore from a backup.
NB: don't try to check a file system that's mounted read/writethis includes the root partition, if you don't see
at boot time.
Q: Why Do FTP Transfers Seem to Hang?
A: FTP transfers that die suddenly are due, apparently, to some form of overrunning buffer. It occurs both with Linux and Microsoft servers. On Linux systems, the problem seems to occur most commonly with the distribution's server software.
                            VFS: mounted root
... read−only
12. Troubleshooting 40

The Linux FAQ
If you receive ftp: connection refused errors, then the problem is likely due to a lack of authentication. Refer to Why Won't My FTP or Telnet Server Allow Logins?.
One remedy is to be replacing the distribution FTP server with the Linux port of the OpenBSD FTP server. The home page is: http://www.eleves.ens.fr:8080/home/madore/programs/.
To install the BSD server, follow the installation instructions, and refer to the manual pages for inetd and inetd.conf. (If you have the newer xinetd, see below.) Be sure to tell inetd to run the BSD daemon alone, not as a subprocess of, for example, tcpd. Comment out the line that begins ftp in the /etc/inetd.conf file and replace it with a line similar to (if you install the new ftpd in /usr/local/sbin/):
The replacement daemon will become effective after rebooting or sending (as root) a SIGHUP to inetd, e.g.:
 # kill −HUP inetd
To configure xinetd, create an entry in /etc/xinetd.d per the instructions in the xinetd.conf manual page. Make sure, again, that the command−line arguments for ftpd are correct, and that you have installed the /etc/ftpusers and /etc/pam.d/ftp files. Then restart xinetd with the command: /etc/rc.d/init.d/xinetd restart. The command should report "OK," and the restart will be noted in the system message log.
Q: Why Does Free Dump Core?
A: In Linux 1.3.57 and later, the format of /proc/meminfo was changed in a way that the implementation
of free doesn't understand.
Get the latest version, from metalab.unc.edu, in
/pub/Linux/system/Status/ps/procps−0.99.tgz.
Q: Why Does Netscape Crash Frequently?
A: Netscape shouldn't crash, if it and the network are properly configured. Some things to check:
• Make sure that the MOZILLA_HOME environment variable is correctly set. If you installed Netscape under /usr/local/netscape/, for example, that should be the value of MOZILLA_HOME. Set it from the command line (e.g, "export MOZILLA_HOME="/usr/local/netscape"" under bash or add it to one your personal or system initialization files. Refer to the manual page for your shell for details.
• If you have a brand−new version of Netscape, try a previous version, in case the run−time libraries are slightly incompatible. For example, if Netscape version 4.75 is installed (type "netscape −−version" at the shell prompt), try installing version 4.7. All versions are archived at ftp://ftp.netscape.com/.
• Netscape uses its own Motif and Java Runtime Environment libraries. If a separate version of either is installed on your system, ensure that they aren't interfering with Netscape's libraries; e.g., by un−installing them.
   # Original entry, commented out. #ftp stream tcp nowait root /usr/sbin/tcpd
/usr/sbin/in.ftpd
# Replacement entry: ftp stream tcp nowait root /usr/local/sbin/ftpd −l
  12. Troubleshooting 41

The Linux FAQ
• Make sure that Netscape can connect to its default name servers. The program will appear to freeze and time out after several minutes if it can't. This indicates a problem with the system's Internet connection; likely, the system can't connect to other sites, either.
Q: Why Won't My FTP or Telnet Server Allow Logins?
A: This applies to server daemons that respond to clients, but don't allow logins. On new systems that have Pluggable Authentication Modules installed, look for a file named, "ftp," or "telnet," in the directory /etc/pam/ or /etc/pam.d/. If the corresponding authentication file doesn't exist, the instructions for configuring FTP and Telnet authentication and other PAM configuration, should be in /usr/doc/pam−&version&. Refer also to the answer for FTP server says: "421 service not available, remote server has closed connection.".
If it's an FTP server on an older system, make sure that the account exists in /etc/passwd, especially anonymous.
This type of problem may also be caused a failure to resolve the host addresses properly, especially if using Reverse Address Resolution Protocol (RARP). The simple answer to this is to list all relevant host names and IP addresses in the /etc/hosts files on each machine. ( Refer to the example /etc/hosts and /etc/resolv.conf files in Sendmail Pauses for Up to a Minute at Each Command. If the network has an internal DNS, make sure that each host can resolve network addresses using it.
If the host machine doesn't respond to FTP or Telnet clients at all, then the server daemon is not installed correctly, or at all. Refer to the manual pages: inetd and inetd.conf on older systems, or xinetd and xinetd.conf, as well as ftpd, and telnetd.
Q: How Do I Keep Track of Bookmarks in Netscape?
A: This probably applies to most other browsers, too. In the Preferences/Navigator menu, set your home page to Netscape's bookmarks.html file, which is located in the .netscape (with a leading period) subdirectory. For example, if your login name is smith, set the home page to:
 file://home/smith/.netscape/bookmarks.html
Setting up your personal home page like this will present you with a nicely formatted (albeit possibly long) page of bookmarks when Netscape starts. And the file is automatically updated whenever you add, delete, or visit a bookmarked site.
Q: Why Does the Computer Have the Wrong Time?
A: There are two clocks in your computer. The hardware (CMOS) clock runs even when the computer is turned off, and is used when the system starts up and by DOS (if you use DOS). The ordinary system time, shown and set by date, is maintained by the kernel while Linux is running.
You can display the CMOS clock time, or set either clock from the other, with/sbin/clock(now called hwclock in many distributions). Refer to: man 8 clock or man 8 hwclock.
There are various other programs that can correct either or both clocks for system drift or transfer time across the network. Some of them may already be installed on your system. Try looking for adjtimex (corrects for drift), Network Time Protocol clients like netdate, getdate, and xntp, or NTP client−server suite like chrony. Refer to How Do I Find a Particular Application?.
     12. Troubleshooting 42

Q: Why Don't Setuid Scripts Work?
The Linux FAQ
A: They aren't supposed to. This feature has been disabled in the Linux kernel on purpose, because setuid scripts are almost always a security hole. Sudo and SuidPerl can provide more security than setuid scripts or binaries, especially if execute permissions are limited to a certain user ID or group ID.
If you want to know why setuid scripts are a security hole, read the FAQ for news:comp.unix.questions. Q: Why Is Free Memory as Reported by free Shrinking?
A: The "free" figure printed by free doesn't include memory used as a disk buffer cacheshown in the buffers column. If you want to know how much memory is really free add the buffers amount to free. Newer versions of free print an extra line with this info.
The disk buffer cache tends to grow soon after starting Linux up. As you load more programs and use more files, the contents get cached. It will stabilize after a while.
Q: Why Does the System Slow to a Crawl When Adding More Memory?
A: This is a common symptom of a failure to cache the additional memory. The exact problem depends on
your motherboard.
Sometimes you have to enable caching of certain regions in your BIOS setup. Look in the CMOS setup and see if there is an option to cache the new memory area which is currently switched off. This is apparently most common on a '486.
Sometimes the RAM has to be in certain sockets to be cached. Sometimes you have to set jumpers to enable caching.
Some motherboards don't cache all of the RAM if you have more RAM per amount of cache than the hardware expects. Usually a full 256K cache will solve this problem.
If in doubt, check the manual. If you still can't fix it because the documentation is inadequate, you might like to post a message to news:comp.os.linux.hardware giving all of the details make, model number, date code, etc., so other Linux users can avoid it.
Q: Why Won't Some Programs (e.g., xdm) Allow Logins?
A: You are probably using non−shadow password programs and are using shadow passwords.
If so, you have to get or compile a shadow password version of the programs in question. The shadow password suite can be found at ftp://tsx−11.mit.edu/pub/linux/sources/usr.bin/shadow/. This is the source code. The binaries are probably in linux/binaries/usr.bin/.
Q: Why Do Some Programs Allow Logins with No Password?
A: You probably have the same problem as in Why Won't Some Programs (e.g., xdm) Allow Logins?, with an
added wrinkle.
    12. Troubleshooting 43

The Linux FAQ
If you are using shadow passwords, you should put a letter x or an asterisk in the password field of /etc/passwd for each account, so that if a program doesn't know about the shadow passwords it won't think it's a passwordless account and let anyone in.
Q: Why Does the Machine Run Very Slowly with GCC / X / ...?
A: You may have too little real memory. If you have less RAM than all the programs you're running at once, Linux will swap to your hard disk instead and thrash horribly. The solution in this case is to not run so many things at once or buy more memory. You can also reclaim some memory by compiling and using a kernel with fewer options configured. See How To Upgrade/Recompile a Kernel.
You can tell how much memory and swap you're using with the free command, or by typing:
 $ cat /proc/meminfo
If your kernel is configured with a RAM disk, this is probably wasted space and will cause things to go slowly. Use LILO or rdev to tell the kernel not to allocate a RAM disk (see the LILO documentation or type man rdev).
Q: Why Does My System Only Allow Root Logins?
A: You probably have some permission problems, or you have a file/etc/nologin.
In the latter case, put rm −f /etc/nologin in your /etc/rc.local or /etc/rc.d/* scripts.
Otherwise, check the permissions on your shell, and any file names that appear in error messages, and also the directories that contain these files, up to and including the root directory.
Q: Why Is the Screen Is All Full of Weird Characters Instead of Letters?
A: You probably sent some binary data to your screen by mistake. Type echo 'c' to fix it. Many Linux
distributions have a command, reset, that does this.
If that doesn't help, try a direct screen escape command: echo 'Ctrl−V Ctrl−O'.
This resets the default font of a Linux console. Remember to hold down the Control key and type the letter, instead of, for example, Ctrl, then V. The sequence Ctrl−V Esc C.
causes a full screen reset. If there's data left on the shell command line after typing a binary file, press Ctrl−C a few times to restore the shell command line.
Another possible command is an alias, sane, that can work with generic terminals:
The alias is enclosed with open quotes (backticks), not single quotes. The line break is included here for clarity, and is not required.
Make sure that $LINES and $COLUMNS are defined in the environment with a command similar to this in ~/.cshrc or ~/.bashrc,
 $ LINES=25; export $LINES; $COLUMNS=80; export $COLUMNS
    $ alias sane='echo −e " c";tput is2;
> stty sane line 1 rows $LINES columns $COLUMNS'
 12. Troubleshooting 44

The Linux FAQ
using the correct numbers of $LINES and $COLUMNS for the terminal.
Finally, the output of stty −g can be used to create a shell script that will reset the terminal:
1. Save the output of stty −g to a file. In this example, the file is named termset: $ stty −g >termset
The output of stty −g (the contents of termset) will look something like: 500:5:bd:8a3b:3:1c:7f:15:4:0:1:0:11:13:1a:0:12:f:17:16:0:0:73
2. Edit termset to become a shell script; adding an interpreter and stty command:
#!/bin/bash stty 500:5:bd:8a3b:3:1c:7f:15:4:0:1:0:11:13:1a:0:12:f:17:16:0:0:73
3. Add executable permissions to termset and use as a shell script: $ chmod +x termset $ ./termset
[Floyd L. Davidson, Bernhard Gabler]
Q: If I Screwed Up the System and Can't Log In, How Can I Fix It?
A: You did create an emergency floppy (or floppies), right? Reboot from an emergency floppy or floppy pair. For example, the Slackware boot and root disk pair in the install subdirectory of the Slackware distribution.
A: There are also two, do−it−yourself rescue disk creation packages in ftp://metalab.unc.edu/pub/Linux/system/recovery/. These are better because they have your own kernel on them, so you don't run the risk of missing devices and file systems.
Get to a shell prompt and mount your hard disk with something like
 $ mount −t ext2 /dev/hda1 /mnt
Then your file system is available under the directory /mnt and you can fix the problem. Remember to unmount your hard disk before rebooting (cd somewhere else first, or it will say it's busy).
Q: What if I Forget the root Password? A:
Incorrectly editing any of the files in the /etc/directory can severely screw up a system. Please keep a
spare copy of any files in case you make a mistake.
If your Linux distribution permits, try booting into single−user mode by typing single at the BOOT lilo:
prompt. With more recent distributions, you can boot into single−user mode when prompted by typing linux 1, linux single, or init=/bin/bash.
If the above doesn't work for you, boot from the installation or rescue floppy, and switch to another virtual console with Alt−F1 −− Alt−F8, and then mount the root file system on /mnt. Then proceed with the steps below to determine if your system has standard or shadow passwords, and how to remove the password.
Using your favorite text editor, edit the root entry of the /etc/passwd file to remove the password, which is located between the first and second colons. '''Do this only if the password field does not contain an x, in
       12. Troubleshooting 45

which case see below.'''
The Linux FAQ
  root:Yhgew13xs:0:0: ...
Change that to:
 root::0:0: ...
If the password field contains an x, then you must remove the password from the /etc/shadow file, which is in a similar format. Refer to the manual pages: man passwd, and man 5 shadow.
[Paul Colquhuon, Robert Kiesling, Tom Plunket] Q: What's This Huge Security Hole in rm!?!?!
A: No there isn't. You are obviously new to unices and need to read a good book to find out how things work. Clue: the ability to delete files depends on permission to write in that directory.
Q: Why Don't lpr and/or lpd Work?
A: First make sure that your /dev/lp* port is correctly configured. Its IRQ (if any) and port address need to
match the settings on the printer card. You should be able to dump a file directly to the printer:
 $ cat the_file >/dev/lp1
If lpr gives you a message like myname@host: host not found" it may mean that the TCP/IP loopback interface, lo, isn't working properly. Loopback support is compiled into most distribution kernels. Check that the interface is configured with the ifconfig command. By Internet convention, the network number is 127.0.0.0, and the local host address is 127.0.0.1. If everything is configured correctly, you should be able to telnet to your own machine and get a login prompt.
Make sure that /etc/hosts.lpd contains the machine's host name.
If your machine has a network−aware lpd, like the one that comes with LPRng, make sure that
/etc/lpd.perms is configured correctly.
Also look at the Printing HOWTO. "Where can I get the HOWTO's and other documentation? ".
Q: Why Are the Timestamps on Files on MS−DOS Partitions Set Incorrectly?
A: There is a bug in the program clock (often found in /sbin). It miscounts a time zone offset, confusing seconds with minutes or something like that. Get a recent version.
Q: Why is My Root File System Read−Only?
A: To understand how you got into this state, see EXT2−fs: warning: mounting unchecked file system. Remount it. If /etc/fstab is correct, you can simply type:
 mount −n −o remount /
If /etc/fstab is wrong, you must give the device name and possibly the type, too: e.g. mount −n −o remount −t ext2 /dev/hda2 /
Q: What Is /proc/kcore?
12. Troubleshooting 46
     
The Linux FAQ
A: None of the files in /proc are really therethey're all, "pretend," files made up by the kernel, to give you information about the system and don't take up any hard disk space.
/proc/kcore is like an "alias" for the memory in your computer. Its size is the same as the amount of RAM you have, and if you read it as a file, the kernel does memory reads.
Q: Why Does fdformat Require Superuser Privileges?
A: The system call to format a floppy can only be done as root, regardless of the permissions of /dev/fd0*. If you want any user to be able to format a floppy, try getting the fdformat2 program. This works around the problems by being setuid to root.
Q: Why Doesn't My PCMCIA Card Work after Upgrading the Kernel?
A: The PCMCIA Card Services modules, which are located in /lib/modules/version/pcmcia, where version is the version number of the kernel, use configuration information that is specific to that kernel image only. The PCMCIA modules on your system will not work with a different kernel image. You need to upgrade the PCMCIA card modules when you upgrade the kernel.
When upgrading from older kernels, make sure that you have the most recent version of the run−time libraries, the modutils package, and so on. Refer to the file Documentation/Changes in the kernel source tree for details.
Important: If you use the PCMCIA Card Services, do not enable the Network device support/Pocket and portable adapters option of the kernel configuration menu, as this conflicts with the modules in Card Services.
Knowing the PCMCIA module dependencies of the old kernel is useful. You need to keep track of them. For example, if your PCMCIA card depends on the serial port character device being installed as a module for the old kernel, then you need to ensure that the serial module is available for the new kernel and PCMCIA modules as well.
The procedure described here is somewhat kludgey, but it is much easier than re−calculating module dependencies from scratch, and making sure the upgrade modules get loaded so that both the non−PCMCIA and PCMCIA are happy. Recent kernel releases contain a myriad of module options, too many to keep track of easily. These steps use the existing module dependencies as much as possible, instead of requiring you to calculate new ones.
However, this procedure does not take into account instances where module dependencies are incompatible from one kernel version to another. In these cases, you'll need to load the modules yourself with insmod, or adjust the module dependencies in the /etc/conf.modules file. The Documentation/modules.txt file in the kernel source tree contains a good description of how to use the kernel loadable modules and the module utilities like insmod, modprobe, and depmod. Modules.txt also contains a recommended procedure for determining which features to include in a resident kernel, and which to build as modules.
Essentially, you need to follow these steps when you install a new kernel.
• Before building the new kernel, make a record with the lsmod command of the module dependencies
that your system currently uses. For example, part of the lsmod output might look like this:
 12. Troubleshooting 47

The Linux FAQ
 Module         Pages
memory_cs      2
ds             2
i82365         4
pcmcia_core    8
Used by
0
[memory_cs]  3
2
                                [memory_cs ds i82365] 3
sg             1                0
bsd_comp       1
ppp            5
slhc           2
serial         8
psaux          1
lp             2                0
0
[bsd_comp] 0
[ppp] 0
0
0
This tells you for example that the memory_cs module needs the ds and pcmcia_core modules loaded first. What it doesn't say is that, in order to avoid recalculating the module dependencies, you may also need to have the serial, lp, psaux, and other standard modules available to prevent errors when installing the pcmcia routines at boot time with insmod. A glance at the /etc/modules file will tell you what modules the system currently loads, and in what order. Save a copy of this file for future reference, until you have successfully installed the new kernel's modules. Also save the lsmod output to a file, for example, with the command: lsmod >lsmod.old−kernel.output.
• Build the new kernel, and install the boot image, either zImage or bzImage, to a floppy diskette. To do this, change to the arch/i386/boot directory (substitute the correct architecture directory if you don't have an Intel machine), and, with a floppy in the diskette drive, execute the command:
   $ dd if=bzImage of=/dev/fd0 bs=512
if you built the kernel with the make bzImage command, and if your floppy drive is /dev/fd0. This results in a bootable kernel image being written to the floppy, and allows you to try out the new kernel without replacing the existing one that LILO boots on the hard drive.
• Boot the new kernel from the floppy to make sure that it works.
• With the system running the new kernel, compile and install a current version of the PCMCIA Card
Services package, available from metalab.unc.edu as well as other Linux archives. Before installing the Card Services utilities, change the names of /sbin/cardmgr and /sbin/cardctl to /sbin/cardmgr.old and /sbin/cardctl.old. The old versions of these utilities are not compatible with the replacement utilities that Card Services installs. In case something goes awry with the installation, the old utilities won't be overwritten, and you can revert to the older versions if necessary. When configuring Card Services with the make config command, make sure that the build scripts know where to locate the kernel configuration, either by using information from the running kernel, or telling the build process where the source tree of the new kernel is. The make config step should complete without errors. Installing the modules from the Card Services package places them in the directory /lib/modules/version/pcmcia, where version is the version number of the new kernel.
• Reboot the system, and note which, if any, of the PCMCIA devices work. Also make sure that the non−PCMCIA hardware devices are working. It's likely that some or all of them won't work. Use lsmod to determine which modules the kernel loaded at boot time, and compare it with the module listing that the old kernel loaded, which you saved from the first step of the procedure. (If you didn't save a listing of the lsmod output, go back and reboot the old kernel, and make the listing now.)
• When all modules are properly loaded, you can replace the old kernel image on the hard drive. This will most likely be the file pointed to by the /vmlinuz symlink. Remember to update the boot sector by running the lilo command after installing the new kernel image on the hard drive.
• Also look at the questions, How do I upgrade/recompile my kernel? and Modprobe can't locate module, "XXX," and similar messages.
  12. Troubleshooting 48

13. Software Development
Q: How Do I Compile Programs?
Q: How Do I Port XXX to Linux?
Q: Can I Use Code or a Compiler Compiled for a 486 on a 386?
Q: What Does gcc −O6 Do?
Q: What Do I Do About Errors Trying to Compile the Kernel?
Q: How Do I Make a Shared Library?
Q: Why Are My Programs So Large?
Q: How To Prevent Errors when Linking Programs with Math Functions Q: How To Program XYZ Under Linux
Q: How To Upgrade/Recompile a Kernel
Q: What Is a .gz File? And a .tgz? And .bz2? And... ?
Q: Where Are linux/*.h and asm/*.h?
Q: Configuring Emacs' Default Settings
Q: How Do I Compile Programs?
A: Most Linux software is written in C and compiled with the GNU C compiler. GCC is a part of every Linux
distribution. The latest compiler version, documentation, and patches are on ftp://ftp.gnu.org/pub/gnu/. Programs that are written in C++ must be compiled with the GNU G++ compiler, which is also included in
Linux distributions and available from the same place as GCC.
To build version 2.0.x kernels, you will need GCC version 2.7.2.x, approximately. Trying to build an early Linux kernel with a different compiler, like GCC 2.8.x, EGCS, or PGCC, may cause problems because of GCC related code dependencies. Kernel versions 2.2, 2.4, and the 2.5 development kernels should compile correctly with more recent compilers.
Information on the EGCS compiler is at http://www.gnu.org/software/gcc/gcc.html.
Note that at this time, the kernel developers are not answering bug requests for earlier kernels, but instead are
concentrating on developing 2.5.x version kernels and maintaining 2.2.x and 2.4.x version kernels. [J.H.M. Dassen, Axel Boldt]
Q: How Do I Port XXX to Linux?
A: In general, *nix programs need very little porting. Simply follow the installation instructions. If you don't know and don't know how to find out the answers to some of the questions asked during the installation procedure, you can guess, but this tends to produce buggy programs. In this case, you're probably better off asking someone else to do the port.
If you have a BSD−ish program, you should try using −I/usr/include/bsd and −lbsd on the appropriate parts of the compilation lines.
Q: Can I Use Code or a Compiler Compiled for a 486 on a 386? A: Yes, unless it's the kernel.
                     13. Software Development 49

The Linux FAQ
The −m486 option to GCC, which is used to compile binaries for x486 machines, merely changes certain optimizations. This makes for slightly larger binaries that run somewhat faster on a 486. They still work fine on a 386, though, with a small performance hit.
However, from version 1.3.35 the kernel uses 486 or Pentium−specific instructions if configured for a 486 or Pentium, thus making it unusable on a 386.
GCC can be configured for a 386 or 486; the only difference is that configuring it for a 386 makes −m386 the default and configuring for a 486 makes −m486 the default. In either case, these can be overridden on a per−compilation basis or by editing /usr/lib/gcc−lib/i*−linux/ n.n.n/specs.
There is an alpha version of GCC that knows how to do optimization well for the 586, but it is quite unreliable, especially at high optimization settings. The Pentium GCC can be found on ftp://tsx−11.mit.edu/pub/linux/ALPHA/pentium−gcc/.
The ordinary 486 GCC supposedly produces better code for the Pentium using the −m386, or at least slightly smaller.
Q: What Does gcc −O6 Do?
A: Currently, the same as −O2 (GCC 2.5) or −O3 (GCC 2.6, 2.7). Any number greater than that does the
same thing. The Makefiles of newer kernels use −O2, and you should probably do the same.
Q: What Do I Do About Errors Trying to Compile the Kernel?
A: See the previous question regarding the header files.
Remember that when you apply a patch to the kernel, you must use the −p0 or −p1 option: otherwise, the patch may be misapplied. See the patch manual page for details.
ld: unrecognized option −qmagic means that you should get a newer linker, from ftp://tsx−11.mit.edu/pub/linux/packages/GCC/, in the file binutils−2.8.1.0.1.bin.tar.gz.
Q: How Do I Make a Shared Library? A: For ELF,
For a.out, get tools−n.nn.tar.gz from tsx−11.mit.edu/pub/linux/packages/GCC/src/. It comes with documentation that will tell you what to do. Note that a.out shared libraries are a very tricky business. Consider upgrading your libraries to ELF shared libraries. See the ELF HOWTO, at ftp://metalab.unc.edu/pub/Linux/docs/HOWTO/.
Q: Why Are My Programs So Large?
A: With an ELF compiler (What's All This about ELF? glibc?), the most common cause of large executables is the lack of an appropriate .so library link for one of the libraries you're using. There should be a link like libc.so for every library like libc.so.5.2.18.
   $ gcc −fPIC −c *.c
$ gcc −shared −Wl,−soname,libfoo.so.1 −o libfoo.so.1.0 *.o
  13. Software Development 50

The Linux FAQ
With an a.out compiler the most common cause of large executables is the −g linker (compiler) flag. This produces (as well as debugging information in the output file) a program which is statically linkedone which includes a copy of the C library instead of a dynamically linked copy.
Other things worth investigating are −O and −O2, which enable optimization (check the GCC documentation), and −s (or the strip command) which strip the symbol information from the resulting binary (making debugging totally impossible).
You may wish to use −N on very small executables (less than 8K with the −N), but you shouldn't do this unless you understand its performance implications, and definitely never with daemons.
Q: How To Prevent Errors when Linking Programs with Math Functions
A: Older run−time libraries included the math library in the C run−time library. It was not necessary to specify the math library separately when compiling. If the compiler generates a message like this when linking a program that uses math functions:
You need use the−lmoption with GCC to link with the math libraries: # gcc −o program program.c −lm
Make sure also to use the statement #include <math.h> in the source file. [Florian Schmidt]
Q: How To Program XYZ Under Linux
A: Read the manuals, or a good book on Unix and the manual pages (type man man). There is a lot of GNU Info documentation, which is often more useful as a tutorial. Run Emacs and type F1−i, or type info info if you don't have or don't like Emacs. Note that the Emacs libc node may not exactly describe the latest Linux libc, or GNU glibc2. But the GNU project and LDP are always looking for volunteers to upgrade their library documentation.
Anyway, between the existing Texinfo documentation, and the manual pages in sections 2 and 3, should provide enough information to get started.
As with all free software, the best tutorial is the source code itself.
The latest release of the Linux manual pages, a collection of useful GNU Info documentation, and various other information related to programming Linux, can be found on metalab.unc.edu/pub/Linux/docs/man−pages/.
Q: How To Upgrade/Recompile a Kernel
A: See the Kernel HOWTO or the README files which come with the kernel release on ftp://ftp.cs.helsinki.fi/pub/Software/Linux/Kernel/ and mirrors. See Where Are the Linux FTP Archives?. You may already have a version of the kernel source code installed on your system, but if it is part of a standard distribution it is likely to be somewhat out of date (this is not a problem if you only want a custom configured kernel, but it probably is if you need to upgrade.)
 /tmp/ccDUQM4J.o: In function "main":
/tmp/ccDUQM4J.o(.text+0x19): undefined reference to "sqrt"
collect2: ld returned 1 exit status
   13. Software Development 51

The Linux FAQ
With newer kernels you can (and should) make all of the following targets. Don't forget that you can specify multiple targets with one command.
 $ make clean dep install modules modules_install
Also remember to update the module dependencies.
$ depmod −a
This command can be run automatically at boot time. On Debian/GNU Linux systems, the command is part of the /etc/init.d/modutils script, and can be linked appropriately in the /etc/rcx.d/ directories. For more information on depmod, see the manual page.
Make sure you are using the most recent version of the modutils utilities, as well as all other supporting packages. Refer to the file Documentation/Changes in the kernel source tree for specifics, and be sure to consult the README file in the modutils package.
Remember that to make the new kernel boot you must run lilo after copying the kernel into your root partition. The Makefile in some kernels have a special zlilo target for this; try:
$ make zlilo
On current systems, however, you can simply copy the zImage or bzImage file (in arch/i386/boot/ to the /boot/ directory on the root file system, or to a floppy using the dd command. Refer also to the question, How do I get LILO to boot the kernel image?
Kernel version numbers with an odd minor version (ie, 1.1.x, 1.3.x) are the testing releases; stable production kernels have even minor versions (1.0.x, 1.2.x). If you want to try the testing kernels you should probably subscribe to the linux−kernel mailing list. See What Mailing Lists Are There?.
The Web site http://www.kernelnotes.org/ has lots of information and links to other sites that provide information about Linux kernel updates.
Also refer to the answers for, Why Doesn't My PCMCIA Card Work after Upgrading the Kernel? and How Do I Get LILO to Boot the Kernel Image?.
A: Alternatively, on Debian GNU/Linux systems, get a kernel source package from the Debian archive or from a Debian GNU/Linux CD. Then, follow the directions in the README file that is located in the kernel−package subdirectory.
Q: What Is a .gz File? And a .tgz? And .bz2? And... ?
A:.gz(and.z) files are compressed using GNU gzip. You need to use gunzip (which is a symlink to the
gzip command that comes with most Linux installations) to unpack the file.
.taz, .tar.Z, and .tz are tar files (made with tar) and compressed using compress. The standard *nix
compress is proprietary software, but free equivalents like ncompress exist.
.tgz (or .tpz) is a tar file compressed with gzip.
.bz2 is a file compressed by the more recently introduced (and efficient) bzip2.
.lsm is a Linux Software Map entry, in the form of a short text file. Details about the LSM project and the LSM itself are available in the subdirectory on ftp://metalab.unc.edu/pub/Linux/docs/.
         13. Software Development 52

The Linux FAQ
.deb is a Debian Binary Package − the binary package format used by the Debian GNU/Linux distribution. It is manipulated using dpkg and dpkg−deb (available on Debian systems and from: http://ftp.debian.org/pool/main/d/dpkg/. If you use anonymous FTP, connect to: ftp://ftp.debian.org/debian/pool/main/d/dpkg/).
.rpm is a Red Hat RPM package, which is used in the Red Hat and similar distributions.
.sit is a compressed Macintosh archive made with StuffIt, a commercial program. Aladdin Systems Inc., the manufacturer of StuffIt, has a free expander utility that will uncompress these archives. You can download it at http://www.aladdinsys.com/expander/.
The file command can often tell you what a file is.
If you find that gzip complains when you try to uncompress a file, you probably downloaded it in ASCII
mode by mistake. You must download most things in binary mode:get, to download the file. Q: Where Are linux/*.h and asm/*.h?
A: The files /usr/include/linux/ and /usr/include/asm/ are often soft links to the directories where the kernel headers are. They are usually under /usr/src/kernel*/.
If you don't have the kernel sources, download them. Refer to the answer for How To Upgrade/Recompile a Kernel.
Then, use rm to remove any garbage, and ln to create the links:
The assembly language files reside in architecture−specific directories, so you need to link /usr/src/include/asm to /usr/src/linux/include/asm−i386 on PC compatible systems, to /usr/src/linux/include/asm−sparc on Sun Sparc systems, to /usr/src/linux/include/asm−ppc on PPC systems, and so on.
You'll also find that you may need to do "make config" as in a newly−unpacked kernel source tree, to create linux/autoconf.h.
Q: Configuring Emacs' Default Settings
A: Create a file in your home directory named .emacs with the Emacs Lisp commands that you want to run every time Emacs starts up. You won't see the file in the directory listing. (The leading '.' tells ls not to display it, unless you use the −a command line switch with ls.)
Any kind of Emacs Lisp statement will work in the .emacs file, including entire defuns. Emacs uses lisp variables and statements extensively, and many of the editing functions are written in Emacs Lisp. For example, to enable word wrapping whenever you edit a file that ends with .txt, add the following statement. This is from the Emacs Texinfo help document ( F1−i, then m Emacs Return):
      $ rm −rf /usr/include/linux /usr/include/asm
$ ln −sf /usr/src/linux/include/linux /usr/include/linux
$ ln −sf /usr/src/linux/include/asm−<architecture> /usr/include/asm
 (add−hook text−mode−hook
       '(lambda () (auto−fill−mode1)))
13. Software Development 53

The Linux FAQ
This adds a statement that calls a hook function whenever a text editing mode is entered for that buffer. The value of text−mode−hook, which is a variable, to auto−fill−mode, which is a function.
If you want to turn off the menu bar at the top of each Emacs frame, add this statement:
 (menu−bar−mode −1)
And if you want to include an Emacs Lisp program that someone has written, like msb.el (an enhanced, pop−up buffer menu), make sure the lisp file is in a directory where Emacs can find it (usually it will be named Site−lisp), and add these statements in the .emacs file:
Most tasks have several possible solutions in Emacs Lisp. Any task that can be programmed in Emacs Lisp is valid in the .emacs file. For more information, consult the Texinfo documentation. There is also a FAQ list for Emacs (refer to: What other FAQ's are there for Linux? ).
  (require 'msb)
(msb−mode 1)
 13. Software Development 54

14. Solutions to Common Problems
Q: How Do I Remove (or Change) the Colors in the ls Display? Q: Why Won't a Program Work in the Current Directory?
Q: How Do I Find Out If a Notebook Runs Linux?
Q: Can Can I Resume an Interrupted Download?
Q: How Do I Remove (or Change) the Colors in the ls Display?
A: If ls is displaying in color and you haven't told it to, you probably have an alias configured for it. Some
distributions ship this way by default.
The shell command, unalias ls, should completely unset the configuration that some distributions provide as standard.
To permanently make this change, check your initialization script, .bashrc.
A: To change the colors, rather than removing them, refer to the ls man page (man ls). Q: Why Won't a Program Work in the Current Directory?
A: Because the current directory (i.e., .) is not in the search path, for security reasons, as well as to insure that the correct program versions are used. If an intruder is able to write a file to a world−writable directory, like /tmp, presumably he or she would be able to execute it if the directory were in the search path. The solution to this is to include the directory in the command; e.g., ./myprog, instead of myprog. Or add the current directory to your PATH environment variable; e.g., export PATH=".:"$PATH using bash, although this is discouraged for the reasons mentioned above.
Q: How Do I Find Out If a Notebook Runs Linux?
A: There's no fixed answer to this question, because notebook hardware is constantly updated, and getting the
X display, sound, PCMCIA, modem, and so forth, working, can take a good deal of effort.
Most notebooks currently on the market, for example, use "Winmodems," which often do not work with Linux because of their proprietary hardware interfaces. Even notebooks which are certified as "Linux compatible," may not be completely compatible.
Information about installing Winmodems in general is contained in the Winmodems−and−Linux−HOWTO. Refer to Where Is the Documentation?.
You can find the most current information, or ask other users about their notebook experiences, on the linux−laptop mailing list, which is hosted by the vger.redhat.com server. Refer to What Mailing Lists Are There?.
A mailing list for Linux on IBM Thinkpads has its home page at http://www.topica.com/lists/linux−thinkpad/. Another Thinkpad mailing list is hosted by http://www.bm−soft.com/. Send email with the word help in the
body of the message to majordomo@www.bm−soft.com.
There is a Web page about Linux on IBM Thinkpads at http://peipa.essex.ac.uk/tp−linux/.
           14. Solutions to Common Problems 55

The Linux FAQ
The Linux Laptop home page is at http://www.cs.utexas.edu/users/kharker/linux−laptop/.
For information about interfacing peripherals like Zip and CD−ROM drives through parallel ports, refer to the
Linux Parallel Port Home Page, at http://www.torque.net/linux−pp.html.
If you need the latest version of the PCMCIA Card Services package, it is (or was) located at ftp://cb−iris.stanford.edu/pub/pcmcia/, but that host no longer seems to be available. Recent distributions are on ftp://metalab.unc.edu/pub/Linux/kernel/pcmcia/. You will also need to have the kernel source code installed as well. Be sure to read the PCMCIA−HOWTO, which is included in the distribution.
Q: Can Can I Resume an Interrupted Download?
A: You can use theregetcommand of the standard ftp client program after reconnecting to pick up where
you left off.
Clients like ncftp support resumed FTP downloads, and wget supports resumed FTP and HTTP downloads.
     14. Solutions to Common Problems 56

15. Tips And Tricks
Q: How Do I Format Man Pages without man or groff? Q: How To Scroll Backwards in Text Mode
Q: How To Get Email to Work
Q: Sendmail Pauses for Up to a Minute at Each Command Q: How To Enable and Select Virtual Consoles
Q: How To Set the Time Zone
Q: What Is a core File?
Q: How To Enable or Disable Core Dumps
Q: How To Remap a Keyboard to UK, French, Etc. Q: How To Get NUM LOCK to Default to On
Q: How To Set (Or Reset) Initial Terminal Colors Q: How To Have More Than 128Mb of Swap
Q: How Do I Format Man Pages without man or groff?
A: The man2html program translates groff text to HTML, which you can view with a Web browser. The man2html program, and many like it, are availble on the Web. Look for them with your favorite search engine.
The unformatted manual pages are stored in subdirectories of /usr/man, /usr/local/man, and elsewhere.
If you want to view text, use nroff and less. Both of these programs have MSDOS versions with an implementation of the man macro package available as well. An example would be:
 $ nroff −man /usr/man/man1/ls.1 | less
If you know where to find a good implementation of the man macros without installing groff, please let the FAQ maintainer know.
If the manual page filename ends in .gz, then you'll need to uncompress it before formatting it, using gzip −d or gunzip. A one−line example would be:
 $ gzip −dc /usr/man/man1/ls.1.gz | nroff −man | less
Q: How To Scroll Backwards in Text Mode
A: With the default US keymap, you can use Shift with the PgUp and PgDn keys. (The gray ones, not the ones on the numeric keypad.) With other keymaps, look in /usr/lib/keytables. You can remap the ScrollUp and ScrollDown keys to be whatever you like.
The screen program, http://vector.co.jp/vpack/browse/person/an010455.html provides a searchable scrollback buffer and the ability to take "snapshots" of text−mode screens.
Recent kernels that have the VGA Console driver can use dramatically more memory for scrollback, provided that the video card can actually handle 64 kb of video memory. Add the line:
 #define VGA_CAN_DO_64B
to the start of the file drivers/video/vgacon.c. This feature may become a standard setting in future kernels. If the video frame buffer is also enabled in the kernel, this setting may not affect buffering.
                 15. Tips And Tricks 57

The Linux FAQ
In older kernels, the amount of scrollback is fixed, because it is implemented using the video memory to store the scrollback text. You may be able to get more scrollback in each virtual console by reducing the total number of VC's. See linux/tty.h.
[Chris Karakas]
Q: How To Get Email to Work
A: For sending mail via SMTP (Simple Mail Transfer Protocol) and receiving mail from an ISP's POP (Post Office Protocol) server, you can use a desktop client like Netscape Communicator or KDE kmail. You will need to enter the names of the SMTP and POP servers in the preferences of the respective application, as well as your E−mail address (e.g., username@example.com), and your dial−up password. The same applies to Usenet News. Enter the name of the NNTP (Network News Transfer Protocol) server in your News client's preferences section. You may also have to provide the IP addresses of the ISP's primary and secondary name servers.
If you have a traditional MTA (Mail Transport Agent) like Sendmail, Smail, qmail, or Exim, you'll need to follow the instructions in each package. Basically, configuration entails determining which host machine, either on your local LAN or via dial−up Internet, is the "Smart Host", if you're using SMTP. If you're using the older UUCP protocol, then you'll need to consult the directions for configuring UUCP, and also make sure that your ISP's system is configured to relay mail to you.
Information about Internet hosting, and News and E−mail in general, is available on the Usenet News group news.announce.newusers, and those FAQ's are also archived at ftp://rtfm.mit.edu/pub/usenet/.
Q: Sendmail Pauses for Up to a Minute at Each Command
A: Make sure that Sendmail can resolve your hostname to a valid (i.e., parsable) domain address. If you are not connected to the Internet, or have a dial−up connection with dynamic IP addressing, add the fully qualified domain name to the /etc/hosts file, in addition to the base host name; e.g., if the host name is bilbo and the domain is bag−end.com:
 192.168.0.1 bilbo.bag−end.com bilbo
And make sure that either the /etc/host.conf or /etc/resolv.conf file contains the line: order hosts,bind
Do not change the localhostentry in /etc/hosts, because many programs depend on it for
internal message−passing.
Sendmail takes many factors into account when resolving domain addresses. These factors, collectively, are
known as, "rulesets", in sendmail jargon. The program does not require that a domain address be canonical, or even appear to be canonical. In the example above, bilbo. (note the period) would work just as well as bilbo.bag−end.com. This and other modifications apply mainly to recent versions.
Prior to version 8.7, sendmail required that the FQDN appear first in the /etc/hosts entry. This is due to changes in the envelope address masquerade options. Consult the sendmail documents.
If you have a domain name server for only a local subnet, make sure that "." refers to a SOA record on the server machine, and that reverse lookups (check by using nslookup) work for all machines on the subnet.
    15. Tips And Tricks 58

The Linux FAQ
Finally, FEATURE configuration macro options like nodns, always_add_domain, and nocanonify, control how sendmail interprets host names.
The document, Sendmail: Installation and Operation Guide, included in the doc/ subdirectory of Sendmail source code distributions, discusses briefly how Sendmail resolves Internet addresses. Sendmail source code archives are listed at: http://www.sendmail.org/
[Chris Karakas]
Q: How To Enable and Select Virtual Consoles
A: In text mode, press the left Alt−F1 to Alt−F12 to select the consoles tty1 to tty12; Right Alt−F1 gives tty13 and so on. To switch out of X you must press Ctrl−Alt−F1, etc; Alt−F5 or whatever will switch back.
However, If you have a non−PC compatible system, please see the note below.
If you want to use a VC for ordinary login, it must be listed in /etc/inittab, which controls which terminals and virtual consoles have login prompts. The X Window System needs at least one free VC in order to start.
The key sequence is actually CtrlMetaFN. On PC compatible systems, the right and left Altkeys are really synonymous with the keysymbols Meta_Land Meta_R. If the binding is different, you can determine what keys produce Meta_Land Meta_Rwith xkeycapsor a similar application.
[David Charlap]
Q: How To Set the Time Zone
A: Change directory to /usr/lib/zoneinfo/. Get the time zone package if you don't have this directory. The source is available in ftp://metalab.unc.edu/pub/Linux/system/admin/time/.
Then make a symbolic link named localtime pointing to one of the files in this directory (or a subdirectory), and one called posixrules pointing to localtime. For example:
This change will take effect immediatelytry date.
If the system uses Red Hat−style configuration files, the respective time zone info files are
/usr/share/zoneinfo and /etc/localtime.
The manual pages for tzset or tzselect describe setting the time zone. Some programs recognize the TZ
environment variable, but this is not POSIX−correct.
You should also make sure that your Linux kernel clock is set to the correct GMT time. Type date −u and
check that the correct UTC time is displayed. See Why Does the Computer Have the Wrong Time?. Q: What Is a core File?
A: A core file is created when a program terminates unexpectedly, due to a bug, or a violation of the operating system's or hardware's protection mechanisms. The operating system kills the program and creates a core file that programmers can use to figure out what went wrong. It contains a detailed description of the state that the program was in when it died.
    $ ln −sf US/Mountain localtime
$ ln −sf localtime posixrules
 15. Tips And Tricks 59

The Linux FAQ
If would like to determine what program a core file came from, use the file command, like this:
$ file core
That will tell you the name of the program that produced the core dump. You may want to write the maintainer(s) of the program, telling them that their program dumped core.
[Eric Hanchrow]
Q: How To Enable or Disable Core Dumps
A: By using the ulimit command in bash, the limit command in tcsh, or the rlimit command in ksh. See the appropriate manual page for details.
This setting affects all programs run from the shell (directly or indirectly), not the whole system.
If you wish to enable or disable core dumping for all processes by default, you can change the default setting
in linux/sched.h. Refer to definition of INIT_TASK, and look also in linux/resource.h.
PAM support optimizes the system's environment, including the amount of memory a user is allowed. In some distributions this parameter is configurable in the /etc/security/limits.conf file. For more information, refer to the Linux Administrator's Security Guide. See Where Is the Documentation?.
Q: How To Remap a Keyboard to UK, French, Etc.
A: For recent kernels, get /pub/Linux/system/Keyboards/kbd−0.90.tar.gz from ftp://metalab.unc.edu/. Make sure you get the appropriate version; you have to use the right keyboard mapping package for your kernel version.
For older kernels you have to edit the top−level kernel Makefile, in /usr/src/linux/.
You may find more helpful information in The Linux Keyboard and Console HOWTO, by Andries Brouwer,
at ftp://metalab.unc.edu/pub/Linux/docs/HOWTO/.
Q: How To Get NUM LOCK to Default to On
A: Use the setleds program, for example (in /etc/rc.local or one of the /etc/rc.d/* files):
setleds is part of the kbd package ("How do I remap my keyboard to UK, French, etc.? "). Alternatively, patch your kernel. You need to arrange for KBD_DEFLEDS to be defined to (1 <<
VC_NUMLOCK) when compiling drivers/char/keyboard.c. Q: How To Set (Or Reset) Initial Terminal Colors
A: The following shell script should work for VGA consoles:
     for t in 1 2 3 4 5 6 7 8
do
  setleds +num < /dev/tty$t > /dev/null
done
 for n in 1 2 4 5 6 7 8;
15. Tips And Tricks 60

The Linux FAQ
 do
  setterm −fore yellow −bold on −back blue −store > /dev/tty$n
done
Substitute your favorite colors, and use /dev/ttyS$n for serial terminals. To make sure they are reset when people log out (if they've been changed):
Replace the references to getty (or mingetty or uugetty or whatever) in /etc/inittab with references to /sbin/mygetty.
[Jim Dennis]
Q: How To Have More Than 128Mb of Swap
A: Use several swap partitions or swap files. Linux kernels before version 2.2 supported up to 16 swap areas, each of up to 128Mb. Recent versions do not have this limitation.
Very old kernels only supported swap partition sizes up to 16Mb.
Linux on machines with 8KB paging, like Alpha and Sparc64, support a swap partition up to 512MB. The 128MB limitation comes from PAGE_SIZE*BITSPERBYTE on machines with 4KB paging, but is 512KB on machines with 8KB paging. The limit is due to the use of a single page allocation map.
The file mm/swapfile.c has all of the gory details. [Peter Moulder, Gordon Weast]
 #!/bin/sh setterm −fore yellow −bold on −back blue −store > $1
exec /sbin/mingetty $@
 15. Tips And Tricks 61

16. The X Window System
Q: Does Linux Support X?
Q: How To Get the X Window System to Work
Q: Where To Find a Ready−Made XF86Config file Q: What Desktop Environments Run on Linux?
Q: xterm Logins Show Up Strangely in who, finger Q: How to Start a X Client on Another Display
Q: Does Linux Support X?
A: Yes. Linux uses XFree86 (the current version is 4.0, which is based on X11R6). You need to have a video
card which is supported by XFree86. See the XFree86 HOWTO for more details.
Most Linux distributions nowadays come with an X installation. However, you can install or upgrade your
own, from ftp://metalab.unc.edu/pub/Linux/X11/ and its mirror sites, or from http://www.xfree86.org/. Q: How To Get the X Window System to Work
A: The answers to this question can, and do, fill entire books. If the installation program wasn't able to configure the X server correctly, Linux will most likely try to start the X display, fail, and drop back into text−only terminal mode.
First and foremost, make certain that you have provided, as closely as possible, the correct information to the installation program of your video hardware: the video card and monitor. Some installation programs can correctly guess a "least common denominator" screen configuration, like a 640−by−480 VESA−standard display, but there are many possible video hardware configurations that may not be able to display this standard.
The X Window System configuration file is called (usually) /etc/XF86Config, /etc/X11/XF86Config, or /usr/X11R6/lib/X11/XF86Config.
If you need to manually configure the X server, there are several possible methods:
• Try to use the XF86Setup program, which can help identify the correct X server and monitor timings for the video hardware.
• Make sure that the X server has the correct options. If you log in as the superuser, you should be able to use X −−probeonly to get a listing of the video card chipset, memory, and any special graphics features. Also, refer to the manual page for the X server. (E.g.; man X), and try running the X server and redirecting the standard error output to a file so you can determine, after you can view text on the screen again, what error messages the server is generating; e.g., X 2>x.error.
• With that information, you should be able to safely refer to one of the references provided by the Linux Documentation Project. ("Where can I get the HOWTO's and other documentation? ") There are several HOWTO's on the subject, including a HOWTO to calculate video timings manually if necessary. Also, the Installation and Getting Started guide has a chapter with a step−by−step guide to writing a XF86Config file.
Also, make sure that the problem really is an incorrect XF86Config file, not something else like the window manager failing to start. If the X server is working correctly, you should be able to move the mouse cursor on the screen, and pressing Ctrl−Alt−Backspace will shut down the X server and return to the shell prompt in
         16. The X Window System 62

The Linux FAQ
one of the virtual terminals.
Q: Where To Find a Ready−Made XF86Config file
A: If you can't seem to get X working using the guidelines above, refer to the XFree86 HOWTO, recent versions of Installation and Getting Started, and the instructions for the XF86Setup program.
The contents of the XF86Config file depend on the your exact combination of video card and monitor. It can either be configured by hand, or using the XF86Setup utility. Read the instructions that came with XFree86, in /usr/X11R6/lib/X11/etc. The file you probably need to look at most is README.Config.
You should not use the sampleXF86Config.egfile which is included with newer versions of XFree86 verbatim, because the wrong video clock settings can damage your monitor.
Please don't post to news:comp.os.linux.x asking for an XF86Config, and please don't answer such requests.
If you have a laptop, look at the Linux Laptop Web page at How Do I Find Out If a Notebook Runs Linux?. Many of the installation notes also have the XF86Config file for the display. If you have a desktop machine, there are a few sampleXF86Configfiles at ftp://metalab.unc.edu/. Refer also to the XFree86 FAQ http://www.xfree.org/FAQ/ and the monitor timings list http://www.xfree.org/#resources/, and in the /usr/X11R6/lib/X11/ directory of your X distribution.
Q: What Desktop Environments Run on Linux?
A: Linux with XFree86 supports the KDE, GNOME, and commercial CDE desktop environments, and extended window managers like WindowMaker. Each uses a different set of libraries and provides varying degrees of MS Windows−like look and feel.
Information on KDE is available from http://www.kde.org/. The KDE environment uses the Qt graphics libraries, available from Trolltech at http://www.trollTech.com. The desktop uses its own window manager, kwm, and provides a MS Windows−like look and feel.
The GNOME home page is http://www.gnome.org. The environment uses the free GTK libraries, available from http://www.gtk.org, and window managers like Enlightenment, http://www.enlightenment.org and SawFish, http://www.sawfish.org/. There's also a Web page for Red Carpet, a GNOME installation and upgrade utility that functions much like Debian's apt−get utility with a friendly GUI front end. It's at http://www.ximian.com/products/redcarpet.
The commercial CDE environment uses the Motif libraries and a variation of the Motif mwm window manager, dtwm, and provides a suite of desktop and session−management utilities. Several vendors have made the source code of Motif available and provided binary packages for Linux distributions. As a starting point, download and installation information is available at http://www.opengroup.org/openmotif/.
A free version of Motif, called LessTiF, is available from http://www.lesstif.org/.
WindowMaker, http://www.windowmaker.org/ is a window manager that has many desktop environment−like features. It provides support for GNUstep, http://www.gnustep.org/, a clone of the commercial NeXTStep environment.
Q: xterm Logins Show Up Strangely in who, finger
16. The X Window System 63
                
The Linux FAQ
A: The xterm that comes with XFree86 2.1 and earlier doesn't correctly understand the format that Linux uses for the /var/adm/utmp file, where the system records who is logged in. It therefore doesn't set all the information correctly.
The xterms in XFree86 3.1 and later versions fix this problem.
Q: How to Start a X Client on Another Display
A: To start a X client on another system that has a running X server, use the following commands:
• Use xhost on the server system to allow the client system use the display. If the server's IP address is 192.168.20.1, enter the command:
       $ xhost + 192.168.20.1
• On the client system, open a telnet connection to the server system.
• In the telnet session, start a xterm in the background with the −display and −e options. For
example, if the IP address of the machine running the server is 192.168.20.1 and the client program name is named clientapp, use the following command:
        $ xterm −display 192.168.20.1 −e clientapp &
[Pierre Dal Farra]
   16. The X Window System 64

17. Frequently Encountered Error Messages
Q: Modprobe Can't Locate Module, XXX, and Similar Messages Q: Unknown Terminal Type linux and Similar
Q: INET: Warning: old style ioctl... called! Q: ld: unrecognized option '−m486'
Q: GCC Says, Internal compiler error.
Q: Make Says, Error 139.
Q: Shell−Init: Permission Denied when I Log In
Q: No Utmp Entry. You Must Exec ... when Logging In Q: Warning−−bdflush Not Running
Q: Warning: obsolete routing request made
Q: EXT2−fs: warning: mounting unchecked file system
Q: EXT2−fs warning: maximal count reached
Q: EXT2−fs warning: checktime reached
Q: df Says, Cannot read table of mounted file systems.
Q: fdisk Says, "Partition X has different physical/logical..."
Q: fdisk: Partition 1 does not start on cylinder boundary
Q: fdisk Says Partition n Has an Odd Number of Sectors
Q: Mtools Utilities Say They Cannot Initialize Drive X
Q: At the Start of Booting: Memory tight
Q: The System Log Says, end_request: I/O error, ....
Q: You don't exist. Go away.
Q: Operation not permitted.
Q: programname: error in loading shared libraries: lib xxx..so. x: cannot open shared object file: No such file or directory.
Q: init: Id "x" respawning too fast: disabled for 5 minutes .
Q: FTP server says: "421 service not available, remote server has closed connection."
Q: Modprobe Can't Locate Module, XXX, and Similar Messages
A: These types of messages mostly occur at boot time or shutdown. If modprobe, insmod, or rmmod complain about not being able to find a module, add the following to the /etc/modules.conf or /etc/modutils/aliases file, whichever is present on your system.
 $ alias <module−name> off
And use the name of the module that appears in the error message.
[J.H.M. Dassen]
Q: Unknown Terminal Type linux and Similar
A: In early kernels the default console terminal type has changed fromconsoletolinux. You must edit /etc/termcap to change the line reading:
 console|con80x25:
to
 linux|console|con80x25:
(there may be an additional dumb in there − if so it should be removed.)
17. Frequently Encountered Error Messages 65
                                    
To get the editor to work you may need type:
The Linux FAQ
  $ TERM=console
(for bash and ksh), or
$ setenv TERM console
for csh or tcsh.
Some programs use /usr/lib/terminfo instead of /etc/termcap. For these programs you should
upgrade your terminfo package, which is part of ncurses.
The same is true for X terminal displays. If your distribution sets the TERM to something strange like
xterm−24−color, you can simply reset it to a generic value from the command line: $ TERM="xterm"; export TERM
Q: INET: Warning: old style ioctl... called!
A: You are trying to use the old network configuration utilities. The new ones can be found on
ftp://ftp.linux.org.uk/pub/linux/Networking/PROGRAMS/NetTools/ (source only, I'm afraid).
Note that they cannot be used just like the old−style programs. See the NET−2 HOWTO for instructions on how to set up the old−style networking programs correctly. Even better, see the NET−3 HOWTO and upgrade your networking software.
Q: ld: unrecognized option '−m486'
A: You have an old version of ld. Install a newer binutils package that contains an updated ld. Look on
tsx−11.mit.edu in /pub/linux/packages/GCC/ for binutils−2.6.0.2.bin.tar.gz. Q: GCC Says, Internal compiler error.
A: If the fault is repeatable (i.e., it always happens at the same place in the same file − even after rebooting and trying again, using a stable kernel) you have discovered a bug in GCC. See the GCC Info documentation (type F1−i in Emacs, and select GCC from the menu) for details on how to report the error. Make sure you have the latest version, though.
Note that this is probably not a Linux−specific problem. Unless you are compiling a program many other Linux users also compile, you should not post your bug report to any of the comp.os.linux groups.
If the problem is not repeatable, you may be experiencing memory corruption. Refer to the answer for Make Says, Error 139..
Q: Make Says, Error 139.
A: Your compiler (GCC) dumped core. You probably have a corrupted, buggy, or old version of GCC − get the latest release or EGCS. Alternatively, you may be running out of swap space. Refer to Why Does the Machine Run Very Slowly with GCC / X / ...?.
If this doesn't fix the problem, you are probably having problems with memory or disk corruption. Check that the clock rate, wait states, and refresh timing for your SIMMS and cache are correct (hardware manuals are sometimes wrong, too). If so, you may have some marginal SIMMS, or a faulty motherboard or hard disk or
       17. Frequently Encountered Error Messages 66

controller.
The Linux FAQ
Linux is a very good memory tester − much better than MS−DOS based memory test programs.
Reportedly, some clone x87 math coprocessors can cause problems. Try compiling a kernel with math emulation (see How To Upgrade/Recompile a Kernel). The no387 kernel command line flag on the LILO prompt to force the kernel to use math emulation, or it may be able to work and still use the '387, with the math emulation compiled in but mainly unused.
More information about this problem is available on the Web at http://www.bitwizard.nl/sig11/. Q: Shell−Init: Permission Denied when I Log In
A: Your root directory and all the directories up to your home directory must be readable and executable by everybody. See the manual page for chmod or a book on Unix for how to fix the problem.
Q: No Utmp Entry. You Must Exec ... when Logging In
A: Your/var/run/utmpis screwed up. You should have
 /var/run/utmp
in your /etc/rc.local or /etc/rc.d/*. See If I Screwed Up the System and Can't Log In, How Can I Fix It?. Note that the utmp may also be found in /var/adm/ or /etc/ on some older systems.
Q: Warning−−bdflush Not Running
A: Modern kernels use a better strategy for writing cached disk blocks. In addition to the kernel changes, this involves replacing the old update program which used to write everything every 30 seconds with a more subtle daemon (actually a pair), known as bdflush. Get bdflush−n.n.tar.gz from the same place as the kernel source code (see How To Upgrade/Recompile a Kernel) and compile and install it. bdflush should be started before the usual boot−time file system checks. It will work fine with older kernels as well, so there's no need to keep the old update around.
Q: Warning: obsolete routing request made
A: This is nothing to worry about. The message means that your version route is a little out of date, compared to the kernel. You can make the message go away by getting a new version of route from the same place as the kernel source code. See How To Upgrade/Recompile a Kernel.
Q: EXT2−fs: warning: mounting unchecked file system
A: You need to run e2fsck (orfsck −t ext2if you have the fsck front end program) with the −a option to
get it to clear the dirty flag, and then cleanly unmount the partition during each shutdown.
The easiest way to do this is to get the latest fsck, umount, and shutdown commands, available in Rik Faith's util−linuxpackage (see Where Are the Linux FTP Archives?). You have to make sure that your /etc/rc*/ scripts use them correctly.
NB: Don't try to check a file system that's mounted read/write. This includes the root partition if you don't see
         17. Frequently Encountered Error Messages 67

The Linux FAQ
  VFS: mounted root ... read−only
at boot time. You must arrange to mount the root file system read/only to start with, check it if necessary, and then remount it read/write. Almost all distributions do this. If your's doesn't, read the documentation that comes with util−linux to find out how to do this.
Note that you need to specify the −n option to mount so it won't try to update /etc/mtab, since the root file system is still read−only, and this will otherwise cause it to fail.
Q: EXT2−fs warning: maximal count reached
A: This message is issued by the kernel when it mounts a file system that's marked as clean, but whose "number of mounts since check" counter has reached the predefined value. The solution is to get the latest version of the ext2fs utilities (e2fsprogs−0.5b.tar.gz at the time of writing) from the usual sites. See Where Are the Linux FTP Archives?.
The maximal number of mounts value can be examined and changed using the tune2fs program from this package.
Q: EXT2−fs warning: checktime reached
A: Kernels from 1.0 onwards support checking a file system based on the elapsed time since the last check as well as by the number of mounts. Get the latest version of the ext2fs utilities. See EXT2−fs warning: maximal count reached.
Q: df Says, Cannot read table of mounted file systems.
A: There is probably something wrong with your /etc/mtab or /etc/fstab files. If you have a reasonably new version of mount, /etc/mtab should be emptied or deleted at boot time (in /etc/rc.local or /etc/rc.d/*), using something like
 $ rm −f /etc/mtab*
Some old Linux distributions have an entry for the root partition in /etc/mtab made in /etc/rc* by using rdev. That is incorrectthe newer versions of mount do this automatically.
Some old distributions also have a line in /etc/fstab that looks like: /dev/sdb1 /root ext2 defaults
The entry for /root should read simply /.
Q: fdisk Says, "Partition X has different physical/logical..."
A: If the partition number (X, above) is 1, this is the same problem as in fdisk: Partition 1 does not start on cylinder boundary.
If the partition begins or ends on a cylinder numbered greater than 1024, this is because the standard DOS disk geometry information format in the partition table can't cope with cylinder numbers with more than 10 bits. You should see How Can I Get Linux to Work With My Disk?.
Q: fdisk: Partition 1 does not start on cylinder boundary
      17. Frequently Encountered Error Messages 68

The Linux FAQ
A: The version of fdisk that comes with many Linux systems creates partitions that fail its own validity checking. Unfortunately, if you've already installed your system, there's not much you can do about this, apart from copying the data off the partition, deleting and remaking it, and copying the data back.
You can avoid the problem by getting the latest version of fdisk, from Rik Faith's util−linux package (available on all the usual FTP sites). Alternatively, if you are creating a new partition 1 that starts in the first cylinder, you can do the following to get a partition that fdisk likes.
• Create partition 1 in the normal way. A p listing will produce the mismatch complaint.
• Type u to set sector mode and do p again. Copy down the number from the End column.
• Delete partition 1.
• While still in sector mode, re−create partition 1. Set the first sector to match the number of sectors per
track. This is the sector number in the first line of the p output. Set the last sector to the value you
wrote down in the step above.
• Type u to reset cylinder mode and continue with other partitions.
Ignore the message about unallocated sectors. They refer to the sectors on the first track apart from the Master Boot Record, and they are not used if you start the first partition in track 2.
Q: fdisk Says Partition n Has an Odd Number of Sectors
A: The PC disk partitioning scheme works in 512−byte sectors, but Linux uses 1K blocks. If you have a
partition with an odd number of sectors, the last sector is wasted. Ignore the message.
Q: Mtools Utilities Say They Cannot Initialize Drive X
A: This means that mtools is having trouble accessing the drive. This can be due to several things.
Often this is due to the permissions on floppy drive devices (/dev/fd0* and /dev/fd1*) being incorrect. The user running mtools must have the appropriate access. See the manual page for chmod for details.
Most versions of mtools distributed with Linux systems (not the standard GNU version) use the contents of a file /etc/mtools to determine which devices and densities to use, in place of having this information compiled into the binary. Mistakes in this file often cause problems. There is often no documentation about this.
For the easiest way to access your MS−DOS files (especially those on a hard disk partition) see How do I access files on my DOS partition or floppy? Noteyou should never use mtools to access files on an msdosfs mounted partition or disk!
Q: At the Start of Booting: Memory tight
A: This means that you have an extra−large kernel, which means that Linux has to do some special memory−management magic to be able to boot itself from the BIOS. It isn't related to the amount of physical memory in your machine. Ignore the message, or compile a kernel containing only the drivers and features you need. See How To Upgrade/Recompile a Kernel.
Q: The System Log Says, end_request: I/O error, ....
A: This error message, and messages like it, almost always indicate a hardware error with a hard drive.
 17. Frequently Encountered Error Messages 69

The Linux FAQ
This commonly indicates a hard drive defect. The only way to avoid further data loss is to completely shut own the system. You must also make sure that whatever data is on the drive is backed up, and restore it to a non−defective hard drive.
This error message may also indicate a bad connection to the drive, especially with home brew systems. If you install an IDE drive, always use new ribbon cables. It's probably is a good idea with SCSI drives, too.
In one instance, this error also seemed to coincide with a bad ground between the system board and the chassis. Be sure that all electrical connections are clean and tight before placing the blame on the hard drive itself.
[Peter Moulder, Theodore Ts'o]
Q: You don't exist. Go away.
A: This is not a viral infection. It comes from programs like write, talk, and wall, if your invoking UID doesn't correspond to a valid user (probably due to /etc/passwd being corrupted), or if the session (pseudoterminal, specifically) you're using isn't properly registered in the utmp file (probably because you invoked it in a funny way).
Q: Operation not permitted.
A: One or more of the file's or directory's attribute bits are set incorrectly. If the I bit is set, for example, you
won't be able to change file permissions with chmod.
The solution is to use lsattr to display file and directory attributes, and chattr to set and unset them. The
programs' documentation is contained in their manual pages. [Paul Campbell]
Q: programname: error in loading shared libraries: lib xxx..so. x: cannot open shared object file: No such file or directory.
A: A message like this, when the program that you're trying to run uses shared libraries, usually means one of two things: the program was either compiled on a machine that had a different set of libraries or library paths than yours; or you've upgraded your libraries but not the program.
Executable programs that are linked with dynamic libraries, expect the full pathname of each of the library files it requires. So do the shared libraries, if they rely on other libraries. This is so the shared object dependencies remain as unambiguous as possible, and also as a security measure.
Short of recompiling the executable file for the libraries on the systemprobably the most desirable alternative in the long run − you can try to determine which libraries the executable file needs with the command: ldd programname. The output will be a list of the shared libraries on the system that the program needs to run, as well as the missing libraries. You can then add the library packages, or if the libraries already exist in a different directory, you can create a symbolic link so the program can find it. For example, if the program requires /usr/lib/libncurses.so.2, and your machine has /lib/libncurses.so.2, you can create a link where the program expects to find the library; e.g.:
 # cd /usr/lib &amp;&amp; ln −s /lib/libncurses.so.2 .
 17. Frequently Encountered Error Messages 70

The Linux FAQ
You should note, however, that creating library links like these should be considered a security risk, and the additional links you create will not be compatible with future upgrades. It's simply a quick fix for backward compatibility.
Also, it may take some guesswork to determine in exactly which of the system library directories the program expects to find a shared library file, because ldd will not list the paths of libraries it can't find. A program most likely will tell the run−time linker, /lib/ld.so, to look for shared libraries in /lib, /usr/lib, /usr/local/lib, or /usr/X11R6/lib, if it's an X client. But that doesn't mean that libraries can't be installed elsewhere. It helps to have some idea of the original library configuration before proceeding.
Also be sure to run ldconfig after creating the symbolic link, so that ld.so has an updated view of the system's libraries. You should also make certain that all of the library directories are listed in /etc/ld.so.conf, and perhaps in the LD_LIBRARY_PATH environment variable.
Q: init: Id "x" respawning too fast: disabled for 5 minutes .
A: In most distributions this means that the system is booting by default into runlevel 5, which is supposed to respawn (re−start again after it's been exited) a graphical login via xdm, kdm, gdm, or whatever, and the system can't locate the program.
However, Id can also indicate the absence or misconfiguration of another program, like mingetty, if init tries to respawn itself more than 10 times in 2 minutes.
Id "x" is the number in the leftmost column of the /etc/inittab file:
Commenting the offending line out and then fixing the errant program and testing on the command line will allow you to see any error messages that go to standard error output (console) if the errors are not going to the system log file. Uncomment the line and restart init with kill −SIGHUP 1 or telinit q to cause init to reinitialize and reread the /etc/inittab file.
Some systems, however, rewrite /etc/inittab when booting. In that case, refer to the init man page, and/or the settings in /etc/sysconfig/init.
Refer to the init and /etc/inittab man pages for detailed information.
[Carl King]
Q: FTP server says: "421 service not available, remote server has closed connection."
A: If an FTP server won't allow logins, it is probably configured correctly, but the problem is probably with authorizing users at login. FTP servers in current distributions often authorize users with the Pluggable Authentication Modules library, in which case there should be an authorization file /etc/pam.d/ftp. A generic authorization file looks like this. (The line break on the first "auth" line is for readability. The entry is actually a single, long line).
  # Run gettys in standard runlevels
1:2345:respawn:/sbin/mingetty tty1
2:2345:respawn:/sbin/mingetty tty2
3:2345:respawn:/sbin/mingetty tty3
4:2345:respawn:/sbin/mingetty tty4
5:2345:respawn:/sbin/mingetty tty5
6:2345:respawn:/sbin/mingetty tty6
 17. Frequently Encountered Error Messages 71

The Linux FAQ
 #%PAM−1.0
auth                required /lib/security/pam_listfile.so item=user
                    sense=deny file=/etc/ftpusers onerr=succeed
auth                required /lib/security/pam_pwdb.so shadow nullok
auth                required /lib/security/pam_shells.so
account             required /lib/security/pam_pwdb.so
session             required /lib/security/pam_pwdb.so
Also, make sure the /etc/ftpusers file, or whatever users file is named in the first "auth" line, is configured correctly.
Btw, the sample ftp file above is actually the ftpd/ftp.pam.sample file from the ftpd−BSD−0.3.1.tar.gz package. Many thanks to David A. Madore for this much needed port.
 17. Frequently Encountered Error Messages 72

18. Online Resources
Q: Where Is the Documentation?
Q: Where Is the Linux Stuff on the World Wide Web?
Q: What News Groups Are There for Linux?
Q: What Other FAQ's and Documentation Are There for Linux?
Q: How To Get Information without Usenet Access
Q: What Mailing Lists Are There?
Q: Are the News Groups Archived Anywhere?
Q: Where Are Linux Legal Issues Discussed?
Q: Where is Information about Unmaintained Free Software Projects? Q: What Online/Free Periodicals Exist for Linux?
Q: Where Can I To Find Information About Security Related Issues?
Q: Where Is the Documentation?
A: Look in the following places, and the sites that mirror them.
• The Linux Documentation Project at http://tldp.org publishes hundreds of documents on using Linux. • ftp://ftp.funet.fi/pub/OS/Linux/doc/HOWTO/
• ftp://tsx−11.mit.edu/pub/linux/docs/HOWTO/
• ftp://metalab.unc.edu/pub/Linux/docs/HOWTO/
For a list of Linux FTP sites, refer to the answer for: Where Are the Linux FTP Archives?. If you don't have access to FTP, try the FTP−by−mail servers:
• ftpmail@decwrl.dec.com
• ftpmail@doc.ic.ac.uk
• ftp−mailer@informatik.tu−muenchen.de
A complete list of HOWTO's is available in the HOWTO−INDEX at http://www.tldp.org/HOWTO/HOWTO−INDEX/howtos.html. The mini−HOWTO's are indexed at http://www.tldp.org/HOWTO/HOWTO−INDEX/mini.html.
In addition, translations are available from ftp://metalab.unc.edu/pub/Linux/docs/HOWTO/translations/ and mirrors worldwide. The HOWTO's and other documentation have been translated into the following languages:
• Chinese (zh)
• Croatian (hr)
• French (fr)
• German (de)
• Hellenic (el)
• Indonesian (id) • Italian (it)
• Japanese (ja) • Korean (ko)
• Polish (pl)
• Slovenian (sl)
                      18. Online Resources 73

The Linux FAQ
• Spanish (es) • Swedish (sv) • Turkish (tr)
Additional documents are always in preparation. Please get in touch with the coordinators if you are interested in writing one. Contact and submission information is at http://tldp.org/mailinfo.html.
There is also a LDP HOWTO page at http://howto.tucows.org/.
The Guide Series produced by the Linux Documentation Project is available from http://tldp.org. Please read
them if you are new to Unix and Linux.
And, of course, a number of people have written documentation independently of the LDP:
• Linux Administrators Security Guide, by Kurt Seifried. http://www.freek.com/lasg/.
• Newbie's Linux Manual. http://tldp.org/nlm/.
• One−Page Linux Manual. http://www.powerup.com.au/~squadron/.
• Rute Users Tutorial and Exposition. http://rute.sourceforge.net
• Short beginners' manual for Linux. Also available in Dutch. http://www.stuwww.kub.nl/people/b.vannunen/linux−man.php3.
• Virtual Frame buffer HOWTO, by Alex Buell. http://www.tahallah.demon.co.uk/programming/prog.html
• X11 & TrueType Fonts, by Peter Kleiweg. http://www.let.rug.nl/~kleiweg/. Documentation for kernel developers is on−line: http://kernelbook.sourceforge.net.
To find out about Linux memory management, including performance tuning, see Rik van Riel's Web page at http://humbolt.geo.uu.nl/Linux−MM/.
The Linux Consultants−Guide has a directory of Linux consultants. Gary's Encyclopedia lists over 4,000 Linux related links. Its URL is
http://members.aa.net/~swear/pedia/index.html.
There is also a FAQ specifically for the Red Hat Linux distribution, at
http://www.best.com/~aturner/RedHat−FAQ/faq_index.html. Q: Where Is the Linux Stuff on the World Wide Web?
A: In addition to the Linux Documentation Project Home Page: http://tldp.org, there are many pages that provide beginning and advanced information about Linux.
These two pages provide a good starting point for general Linux information: Linux International's Home Page, at http://www.li.org, and the Linux Online's Linux Home Page at http://www.linux.org.
Both of these pages provide links to other sites, information about general information, distributions, new software, documentation, and news.
Documentation for kernel developers is on−line: http://kernelbook.sourceforge.net.
                  18. Online Resources 74

The Linux FAQ
The tutorial, Unix is a Four Letter Word..., is located at http://people.msoe.edu/~taylor/4ltrwrd/. It is a general introduction to Unix operating systems and is not Linux specific.
Additionally, here is a certainly incomplete list of Web pages devoted to Linux:
• AboutLinux.com: http://www.aboutlinux.com
• Adventures in Linux Programming: http://members.tripod.com/rpragana/
• Dave Central Linux Software Archive: http://linux.davecentral.com
• debianHELP http://www.debianhelp.org
• Erlug Webzine (Italian): http://www.erlug.linux.it
• Free Unix Giveaway List: http://visar.csustan.edu/giveaway.html Lists offers of free Linux CDs. Also
available via E−mail: axel@visar.csustan.edu, with the Subject: "send giveaway_list"
• Information on Linux in corporate environments: http://www.smartstocks.com/linux.html
• Jeanette Russo's Linux Newbie Information: http://www.stormloader.com/jrusso2/index.html
• JustLinux.com: http://www.justlinux.com
• Linux Cartoons: http://www.cse.unsw.edu.au/~conradp/linux/cartoons/
• LinuxArtist.org: http://www.linuxartist.org
• Linuxinfor.com − Online Linux Resources: http://www.linuxinfor.com
• linuXChiX.org: http://www.linuxchix.org
• LinuxDevices.com: The Embedded Linux Portal: http://www.linuxdevices.com
• Linux Educational Needs Posting Page: http://www.slip.net/~brk/linuxedpp.htm
• Linux in Business: Case Studies: http://www.bynari.com/collateral/case_studies.html
• Linux Hardware Database Laptop Superguide: http://lhd.zdnet.com/db/superguide.php3?catid=18
• Linux Inside: http://linuxinside.org
• Linux Links: http://www.linuxlinks.com
• Linux Memory Management Home Page: http://humbolt.geo.uu.nl/Linux−MM/
• Linux Newbie Project: http://kusma.hypermart.net/
• Linux on the Thinkpad 760ED: http://www.e−oasis.com/linux−tp.html
• LinuxOrbit: http://www.linuxorbit.com
• Linux Parallel Port Home Page: http://www.torque.net/linux−pp.html
• Linux MIDI & Sound Applications: http://sound.condorow.net
• Linux Start: http://www.linuxstart.com
• Linux Tips and Tricks Page: http://www.patoche.org/LTT/
• Linux Today PR: http://www.linuxpr.com
• Mandrakeuser.Org: http://mandrakeuser.org
• My Linux Contributions by Richard Gooch: http://www.atnf.csiro.au/~rgooch/linux/
• Micro Channel Linux Web Page: http://www.dgmicro.com/mca/
• Parallel port scanners and SANE: http://www2.prestel.co.uk/hex/scanners.html
• Pascal Central: http://www.pascal−central.com
• PegaSoft Portal: http://www.vaxxine.com/pegasoft/portal/
• PocketLinux. http://www.pocketlinux.com
• Red Hat and ISDN4Linux: http://www.webideal.de
• SearchLinux: http://www.searchlinux.com/
• The Free Linux CD Project: http://www.freelinuxcd.org
• The Site for People Learning Perl: http://learn.perl.org
• USB Linux Home Page: http://peloncho.fis.ucm.es/~inaky/uusbd−www/
• VLUG: The Virtual Linux Users Group: http://www.vlug.com
Searching for Linux on Web Search Engines will provide copious references to Linux Web sites. Try: • Yahoo! http://www.yahoo.com/
                                            18. Online Resources 75

The Linux FAQ
• Altavista http://www.altavista.com/ • Google http://www.google.com/
Google also has a Linux−specific section at http://www.google.com/linux/.
Further information about about Web search engines is in the Web and Internet Search Engine Faq:
http://www.infobasic.com/pagefaq.html.
Refer also to the answer for: What Other FAQ's and Documentation Are There for Linux?. Q: What News Groups Are There for Linux?
A: Comp.os.linux.announce is the moderated announcements group. You should read this if you intend to use Linux. It contains information about software updates, new ports, user group meetings, and commercial products. It is the only newsgroup that may carry commercial postings. Submissions for that group should be e−mailed to linux−announce@news.ornl.gov.
Comp.os.linux.announce is archived at: http://www.iki.fi/mjr/linux/cola.html, and ftp://src.doc.ic.ac.uk/usenet/comp.os.linux.announce/.
Also worth reading are the following other groups in the news:comp.os.linux and news:alt.uu.comp.os.linux hierarchies you may find many common problems too recent for the documentation but are answered in the newsgroups.
• news:alt.uu.comp.os.linux
• news:alt.uu.comp.os.linux.questions
• news:alt.os.linux
• news:alt.os.linux.mandrake
• news:comp.os.linux.admin
• news:comp.os.linux.advocacy
• news:comp.os.linux.alpha
• news:comp.os.linux.answers
• news:comp.os.linux.development
• news:comp.os.linux.development.apps
• news:comp.os.linux.development.system • news:comp.os.linux.embedded
• news:comp.os.linux.hardware
• news:comp.os.linux.help
• news:comp.os.linux.m68k
• news:comp.os.linux.misc
• news:comp.os.linux.network
• news:comp.os.linux.networking
• news:comp.os.linux.portable
• news:comp.os.linux.powerpc
• news:comp.os.linux.questions
• news:comp.os.linux.redhat
• news:comp.os.linux.security
• news:comp.os.linux.setup
• news:comp.os.linux.test
• news:comp.os.linux.x
• news:comp.os.linux.x.video
                                     18. Online Resources 76

The Linux FAQ
Remember that Linux is POSIX compatible, and most all of the material in the news:comp.unix and news:comp.windows.x groups will be relevant. Apart from
hardware considerations, and some obscure or very technical low−level issues, you'll find that these groups are good places to start.
Information about e−mail clients (MUA's), mail transfer agents (MTA's), and other related software are in the comp.mail.* groups, especially:
• news:comp.mail.misc
• news:comp.mail.pine
• news:comp.mail.sendmail
Questions and information about News reading software are in: • news:news.software.readers.
Please read If this Document Still Hasn't Answered Your Question.... before posting. Cross posting between different news:comp.os.linux groups is rarely a good idea.
There may well be Linux groups local to your institution or areacheck there first.
See also How To Get Information without Usenet Access.
Other regional and local newsgroups also existyou may find the traffic more manageable there:
• news:fr.comp.os.linux (France).
• news:de.comp.os.linux (Germany).
• news:aus.computers.linux (Australia). • news:hr.comp.linux (Croatia).
• news:it.comp.linux (Italy).
A search of http://groups.google.com/ can provide an up−to−date list of News groups. [Axel Boldt, Robert Kiesling]
Q: What Other FAQ's and Documentation Are There for Linux?
A: There are a number of special interest FAQ's on different subjects related to system administration and use, and also on miscellaneous topics like Flying Saucer Attacks (the music) and support for recovering sysadmins.
The official Usenet FAQ archives are: ftp://rtfm.mit.edu/pub/usenet/.
The Internet FAQ Consortium provides a searchable archive at: http://www.faqs.org/. The site also maintains a current archive of Internet Request For Comment (RFC), Best Current Practices (BCP), and For Your Information (FYI) documents.
Here are some FAQ's and documents that might be especially useful, and their network addresses: • A FAQ for new users: http://homes.arealcity.com/swietanowski/LinuxFAQ/
                  18. Online Resources 77

The Linux FAQ
• A Linux FAQ in Spanish is available at: http://www.abierta.org/faq.htm Un FAQ (preguntas mas frecuentes) en Español se halla disponible en http://www.abierta.org/faq.htm
• AfterStep FAQ: http://www.linuxinfor.com/en/astepfaq/AfterStep−FAQ.html
• BASH Frequently Asked Questions: ftp://ftp.cwru.edu/pug/bash/FAQ/
• de.comp.os.unix.linux.infos − FAQ: http://www.dcoul.de/
• Frequently Asked Questions about Open Source: http://www.opensource.org/faq.html • Ftape−FAQ: http://www.linuxinfor.com/en/ftapefaq/Ftape−FAQ.html
• GNU Emacs: http://www.lerner.co.il/emacs/faq−body.shtml
• GNU Linux in Science and Engineering: http://www.comsoc.org/vancouver/scieng.html
• GNU Troff (groff) Info: http://www.cs.pdx.edu/~trent/gnu/groff/
• Gnus 5.x: http://www.ccs.neu.edu/software/contrib/gnus/
• KDE FAQ: http://www.kde.org/faq.html
• GNU General Public License FAQ: http://www.gnu.org/copyleft/gpl−faq.html
• Linux PPP FAQ: http://www.linuxinfor.com/en/pppfaq/PPP−FAQ.html
• Linux−Raid FAQ: http://www.linuxinfor.com/en/raidfaq/index.html
• List of Periodic Information Postings: ftp://rtfm.mit.edu/pub/usenet/news.answers/periodic−postings/ • News.newusers.announce FAQ http://web.presby.edu/~nnqadmin/nan/
• Online Linux Resources: http://www.linuxinfor.com/en/docfaq.htm
• O'Reilly & Associates Openbook Project: http://www.oreilly.com/openbook/
• Sendmail: http://www.sendmail.org/faq/
• Sendmail: Installation and Operation Guide: Formatted and me source versions are in the doc/
subdirectory of Sendmail source code distributions. http://www.sendmail.org/
• Technical FAQ for Linux Users: http://www−106.ibm.com/developerworks/library/l−faq/?n−l−7261 • Web Internet Search Engine: http://www.infobasic.com/pagefaq.html
• Wu−ftpd: http://www.wu−ftpd.org/man/ (really a collection of man pages), with HOWTO's at:
http://www.wu−ftpd.org/HOWTO/
• XTERM Frequently Asked Questions. http://dickey.his.com/xterm/xterm.faq.html
Q: How To Get Information without Usenet Access
A: A digest of comp.os.linux.announce is available by mailing the word "subscribe" (without the quotes) as the body of a message to linux−announce−REQUEST@news−digests.mit.edu. Subscribing to this list is a good idea, as it carries important information and documentation about Linux.
Please remember to use the *−request addresses for your subscribe and unsubscribe messages; mail to the other address is posted to the news group.
Q: What Mailing Lists Are There?
A: The Linux developers now mainly use the Majordomo server at majordomo@vger.redhat.com. Send a message with the word "lists" (without the quotes) in the body to get a list of lists there. Add a line with the word, "help," to get the standard Majordomo help file that lists instructions for subscribing and unsubscribing to the lists.
Currently, the kernel list is archived at: http://www.uwsg.indiana.edu/hypermail/linux/kernel/, and http://www.lib.uaa.alaska.edu/linux−kernel/archive/
Please do not post off−topic material to the mailing lists. Most of them are used by Linux developers to talk about technical issues and future developments. They are not intended for new users' questions, advertisements, or public postings that are not directly related to the mailing list's subject matter. Comp.os.linux.announce is the place for all public announcements. This is a common Internet policy. If you
                              18. Online Resources 78

The Linux FAQ
don't observe this guideline, there's a good chance that you'll be flamed.
There is a linux−newbie list where, "no question is too stupid." Unfortunately, it seems that few experienced users read that list, and it has very low volume.
There are numerous Linux related mailing lists at http://www.onelist.com/. Go to the categories page and choose "Linux." There are also mailing list subscription links at: http://oslab.snu.ac.kr/~djshin/linux/mail−list/
The Mailing Lists Available in Usenet page is: http://paml.net/. The list information is also on: ftp://rtfm.mit.edu/, and is posted to the groups: news.announce.newgroups, news.lists, and news.groups, among others.
Q: Are the News Groups Archived Anywhere?
A: The Usenet Linux news groups are archived at http://groups.google.com/.
ftp://metalab.unc.edu/pub/Linux/docs/linux−announce.archive contains archives of news:comp.os.linux.announce. These are mirrored from ftp://src.doc.ic.ac.uk/usenet/, which also archives news:comp.os.linux, news:comp.os.linux.development.apps, and news:comp.os.linux.development.system.
Q: Where Are Linux Legal Issues Discussed?
A: On the linux−legal mailing list, of course. You can subscribe to it, as with many of the other Linux related
lists, by sending a message with the word "help" in the body of the message to majordomo@vger.redhat.com.
Q: Where is Information about Unmaintained Free Software Projects?
A: There are Web pages at: http://unmaintained.sourceforge.net, and: http://www.orphansource.org/.
Please try to contact the original author(s) via e−mail, or the person who listed the software as unmaintained, before even thinking to place a license on the package.
Q: What Online/Free Periodicals Exist for Linux?
A: There are a number of recent additions to the list of periodicals devoted to Linux and free software:
• geek news. http://geeknews.cjb.net/. Headlines for articles about Linux, like the news:comp.os.linux.announce and Techweb postings, and general interest, like Associated Press stories.
• Linux Gazette. http://www.linuxgazette.com/. This is the longest−running of the on−line periodicals, and the only one that publishes source code.
• LinuxToday. http://www.linuxtoday.com. News and opinion related to the Linux community, updated daily.
• Linux Weekly News. http://lwn.net. News about the Linux community, updated weekly.
• Slashdot. http://www.slashdot.org. News about the free software community and culture.
• Freshmeat. http://www.freshmeat.net/. Notices of new and updated software for Linux and other free
OS's.
Please send additions to this list to the FAQ maintainer, see Asking Questions and Sending Comments.
                      18. Online Resources 79

The Linux FAQ
Q: Where Can I To Find Information About Security Related Issues?
A: There's a page of Linux related security information at: http://www.linuxsecurity.com/.
Another site is: http://www.rootshell.com/, which has information about Internet security and privacy issues.
For information about the Weekly Linux Security Digest email newsletter and numerous security related databases, look at http://securityportal.com/.
    18. Online Resources 80

19. How To Get Further Assistance
19.1. If this Document Still Hasn't Answered Your Question....
Please read all of this answer before posting. I know it's a bit long, but you may be about to make a fool of yourself in front of 50,000 people and waste hundreds of hours of their time. Don't you think it's worth spending some of your time to read and follow these instructions?
If you think an answer is incomplete or inaccurate, please e−mail David Merrill. See Asking Questions and Sending Comments.
Read the appropriate Linux Documentation Project books. Refer to Where Is the Documentation?. If you're a Unix or Linux newbie, read the FAQ for news:comp.unix.questions,
news:news.announces.newusers, and those for any of the other news:comp.unix groups that may be relevant.
Linux has so much in common with commercial unices, that almost everything you read there will apply to Linux. The FAQ's, like all FAQ's, be found on ftp://rtfm.mit.edu/pub/usenet/ (the mail−server@rtfm.mit.edu can send you these files, if you don't have FTP access). There are mirrors of rtfm's FAQ archives on various sites. Check the Introduction to *.answers posting, or look in news−answers/introduction in the directory above.
Check the relevant HOWTO for the subject in question, if there is one, or an appropriate old style sub−FAQ document. Check the FTP sites.
Try experimenting − that's the best way to get to know Unix and Linux.
Read the documentation. Check the manual pages (type man man if you don't know about manual pages. Also try man −k subject and apropos subject. They often list useful and relevant, but not very obvious, manual pages.
Check the Info documentation (type F1−i, i.e. the F1 function key followed by "i" in Emacs). This isn't just for Emacs. For example, the GCC documentation lives here as well.
There will also often be a README file with a package that gives installation and/or usage instructions. Make sure you don't have a corrupted or out−of−date copy of the program in question. If possible, download
it again and re−install ityou probably made a mistake the first time.
Read news:comp.os.linux.announce. It often contains very important information for all Linux users.
General X Window System questions belong in news:comp.windows.x.i386unix, not in news:comp.os.linux.x. But read the group first (including the FAQ), before you post.
Only if you have done all of these things and are still stuck, should you post to the appropriate news:comp.os.linux newsgroup. Make sure you read the next question first. "( What to put in a request for help. )"
             19. How To Get Further Assistance 81

The Linux FAQ
19.2. What to Put in a Request for Help
Please read the following advice carefully about how to write your posting or E−mail. Making a complete posting will greatly increase the chances that an expert or fellow user reading it will have enough information and motivation to reply.
This advice applies both to postings asking for advice and to personal E−mail sent to experts and fellow users. Make sure you give full details of the problem, including:
• What program, exactly, you are having problems with. Include the version number if known and say where you got it. Many standard commands tell you their version number if you give them a −−version option.
• Which Linux release you're using (Red Hat, Slackware, Debian, or whatever) and what version of that release.
• The exact and complete text of any error messages printed.
• Exactly what behavior you expected, and exactly what behavior you observed. A transcript of an
example session is a good way to show this.
• The contents of any configuration files used by the program in question and any related programs.
• What version of the kernel and shared libraries you have installed. The kernel version can be found by
typing uname −a, and the shared library version by typing ls −l /lib/libc*.
• Details of what hardware you're running on, if it seems appropriate.
You are in little danger of making your posting too long unless you include large chunks of source code or uuencoded files, so err on the side of giving too much information.
Use a clear, detailed Subject line. Don't put things like "doesn't work", "Linux", "help", or "question" in it we already know that. Save the space for the name of the program, a fragment of an error message, or summary of the unusual behavior.
Put a summary paragraph at the top of your posting.
At the bottom of your posting, ask for responses by email and say you'll post a summary. Back this up by using Followup−To: poster. Then, actually post the summary in a few days or a week or so. Don't just concatenate the replies you received, summarize them. Putting the word "SUMMARY" in your summary's Subject line is also a good idea. Consider submitting the summary to news:comp.os.linux.announce.
Make sure your posting doesn't have an inappropriate References: header line. This marks your article as part of the thread of the article referred to, which will often cause it to be junked by readers, along with the rest of a boring thread.
You might like to say in your posting that you've read this FAQ and the appropriate HOWTO'sthis may make people less likely to skip your posting.
Remember that you should not post E−mail sent to you personally without the sender's permission.
  19. How To Get Further Assistance 82

The Linux FAQ
19.3. How To Email Someone about Your Problem
Try to find the author or developer of whatever program or component is causing you difficulty. If you have a contact point for your Linux distribution, you should use it.
Please put everything in your E−mail message that you would put in a posting asking for help.
Finally, remember that, despite the fact that most of the Linux community are very helpful and responsive to E−mailed questions, you're likely asking for help from unpaid volunteers, so you have no right to expect an answer.
 19. How To Get Further Assistance 83

A. GNU Free Documentation License
Version 1.2, November 2002
Copyright (C) 2000,2001,2002 Free Software Foundation, Inc. 59 Temple Place, Suite 330, Boston, MA 02111−1307 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.
 A. GNU Free Documentation License 84

A.1. 0. PREAMBLE
The purpose of this License is to make a manual, textbook, or other written document "free" in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others.
This License is a kind of "copyleft", which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software.
We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference.
 A.1. 0. PREAMBLE 85

A.2. 1. APPLICABILITY AND DEFINITIONS
This License applies to any manual or other work that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. The "Document", below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as "you".
A "Modified Version" of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language.
A "Secondary Section" is a named appendix or a front−matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document's overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (For example, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them.
The "Invariant Sections" are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License.
The "Cover Texts" are certain short passages of text that are listed, as Front−Cover Texts or Back−Cover Texts, in the notice that says that the Document is released under this License.
A "Transparent" copy of the Document means a machine−readable copy, represented in a format whose specification is available to the general public, whose contents can be viewed and edited directly and straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup has been designed to thwart or discourage subsequent modification by readers is not Transparent. A copy that is not "Transparent" is called "Opaque".
Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard−conforming simple HTML designed for human modification. Opaque formats include PostScript, PDF, proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine−generated HTML produced by some word processors for output purposes only.
The "Title Page" means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, "Title Page" means the text near the most prominent appearance of the work's title, preceding the beginning of the body of the text.
 A.2. 1. APPLICABILITY AND DEFINITIONS 86

A.3. 2. VERBATIM COPYING
You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3.
You may also lend copies, under the same conditions stated above, and you may publicly display copies.
 A.3. 2. VERBATIM COPYING 87

A.4. 3. COPYING IN QUANTITY
If you publish printed copies of the Document numbering more than 100, and the Document's license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front−Cover Texts on the front cover, and Back−Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects.
If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages.
If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine−readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a publicly−accessible computer−network location containing a complete Transparent copy of the Document, free of added material, which the general network−using public has access to download anonymously at no charge using public−standard network protocols. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public.
It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document.
 A.4. 3. COPYING IN QUANTITY 88

A.5. 4. MODIFICATIONS
You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version:
• A. Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission.
• B. List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has less than five).
• C. State on the Title Page the name of the publisher of the Modified Version, as the publisher.
• D. Preserve all the copyright notices of the Document.
• E. Add an appropriate copyright notice for your modifications adjacent to the other copyright notices.
• F. Include, immediately after the copyright notices, a license notice giving the public permission to
use the Modified Version under the terms of this License, in the form shown in the Addendum below.
• G. Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in
the Document's license notice.
• H. Include an unaltered copy of this License.
• I. Preserve the section entitled "History", and its title, and add to it an item stating at least the title,
year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section entitled "History" in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence.
• J. Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the "History" section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission.
• K. In any section entitled "Acknowledgements" or "Dedications", preserve the section's title, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein.
• L. Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles.
• M. Delete any section entitled "Endorsements". Such a section may not be included in the Modified Version.
• N. Do not retitle any existing section as "Endorsements" or to conflict in title with any Invariant Section.
If the Modified Version includes new front−matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version's license notice. These titles must be distinct from any other section titles.
You may add a section entitled "Endorsements", provided it contains nothing but endorsements of your Modified Version by various parties−−for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard.
A.5. 4. MODIFICATIONS 89

The Linux FAQ
You may add a passage of up to five words as a Front−Cover Text, and a passage of up to 25 words as a Back−Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front−Cover Text and one of Back−Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one.
The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version .
 A.5. 4. MODIFICATIONS 90

A.6. 5. COMBINING DOCUMENTS
You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice.
The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work.
In the combination, you must combine any sections entitled "History" in the various original documents, forming one section entitled "History"; likewise combine any sections entitled "Acknowledgements", and any sections entitled "Dedications". You must delete all sections entitled "Endorsements."
 A.6. 5. COMBINING DOCUMENTS 91

A.7. 6. COLLECTIONS OF DOCUMENTS
You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects.
You may extract a single document from such a collection, and dispbibute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document.
 A.7. 6. COLLECTIONS OF DOCUMENTS 92

A.8. 7. AGGREGATION WITH INDEPENDENT WORKS
A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, does not as a whole count as a Modified Version of the Document, provided no compilation copyright is claimed for the compilation. Such a compilation is called an "aggregate", and this License does not apply to the other self−contained works thus compiled with the Document , on account of their being thus compiled, if they are not themselves derivative works of the Document. If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one quarter of the entire aggregate, the Document's Cover Texts may be placed on covers that surround only the Document within the aggregate. Otherwise they must appear on covers around the whole aggregate.
 A.8. 7. AGGREGATION WITH INDEPENDENT WORKS 93

A.9. 8. TRANSLATION
Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License provided that you also include the original English version of this License. In case of a disagreement between the translation and the original English version of this License, the original English version will prevail.
 A.9. 8. TRANSLATION 94

A.10. 9. TERMINATION
You may not copy, modify, sublicense, or distribute the Document except as expressly provided for under this License. Any other attempt to copy, modify, sublicense or distribute the Document is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.
 A.10. 9. TERMINATION 95

A.11. 10. FUTURE REVISIONS OF THIS LICENSE
The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See [http://www.gnu.org/copyleft] http:// www.gnu.org/copyleft/.
Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License "or any later version" applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation.
 A.11. 10. FUTURE REVISIONS OF THIS LICENSE 96

A.12. Addendum
To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page:
Copyright YEAR YOUR NAME. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.1 or any later version published by the Free Software Foundation; with the Invariant Sections being LIST THEIR TITLES, with the Front−Cover Texts being LIST, and with the Back−Cover Texts being LIST. A copy of the license is included in the section entitled "GNU Free Documentation License".
If you have no Invariant Sections, write "with no Invariant Sections" instead of saying which ones are invariant. If you have no Front−Cover Texts, write "no Front−Cover Texts" instead of "Front−Cover Texts being LIST"; likewise for Back−Cover Texts.
If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.
A.12. Addendum 97


Linux-RAID FAQ

Gregory Leblanc

Revision History                                                             
Revision v0.0.12          2003-03-05              Revised by: gml            
Fleshed out questions that cover using mdadm, small formatting changes       
Revision v0.0.11          2003-01-08              Revised by: gml            
Updated Archive Locations, information on when to patch, added a note about  
old patches being missing, removed question about the raidtools being        
dangerous (since they don't appear to be so labeled any longer).             
Revision v0.0.10          24 April 2001           Revised by: gml            
Added a new section and question about benchmarking.                         


This is a FAQ for the Linux-RAID mailing list, hosted on vger.kernel.org.
vger.rutgers.edu is gone, so don't bother looking for it. It's intended as a
supplement to the existing Linux-RAID HOWTO, to cover questions that keep
occurring on the mailing list. PLEASE read this document before your post to
the list.

Linux RAID FAQ Copyright

This documentation was developed for the Linux Documentation Project by
Gregory Leblanc.

Redistribution and use in source (XML DocBook) and 'compiled' forms (XML,
HTML, PDF, PostScript, RTF and so forth) with or without modification, are
permitted provided that the following conditions are met:

 1. Redistributions of source code (XML DocBook) must retain the above
    copyright notice, this list of conditions and the following disclaimer as
    the first lines of this file unmodified.
   
 2. Redistributions in compiled form (transformed to other DTDs, converted to
    PDF, PostScript, RTF and other formats) must reproduce the above
    copyright notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the distribution.
   

Important THIS DOCUMENTATION IS PROVIDED BY THE GREGORY LEBLANC "AS IS" AND  
          ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  
          THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A        
          PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NETWORKS      
          ASSOCIATES TECHNOLOGY, INC BE LIABLE FOR ANY DIRECT, INDIRECT,     
          INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES           
          (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
          SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
          HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
          STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      
          ARISING IN ANY WAY OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF   
          ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                         
-----------------------------------------------------------------------------

Table of Contents
1. Linux RAID FAQ

1. Linux RAID FAQ

1. General
    1.1.1. Where can I find archives for the linux-raid mailing list?
    1.1.2. Where can I find the latest version of this FAQ?
    1.1.3. What sorts of things does this list cover?
   
   
2. Kernel
    1.2.1. I'm running [insert your linux distribution here]. Do I need to
        patch my kernel to make RAID work?
    1.2.2. How can I tell if I need to patch my kernel?
    1.2.3. Where can I get the latest RAID patches for my kernel?
    1.2.4. How do I apply the patch to a kernel that I just downloaded from
        ftp.kernel.org?
    1.2.5. What kind of drives can I use RAID with? Do only SCSI or IDE
        drives work? Do I need different patches for different kinds of
        drives?
   
   
3. RAID tools
    1.3.1. What tools are available for dealing with my Linux Software RAID
        arrays?
   
   
4. Disk Failures and Recovery
    1.4.1. How can I tell if one of the disks in my RAID array has failed?
    1.4.2. So my RAID set is missing a disk, what do I do now?
    1.4.3. dmesg shows "md: serializing resync, md4 has overlapping physical
        units with md5" (where md4 and md5 are two of your software RAID
        devices). What does this mean?
   
   
5. Benchmarking
    1.5.1. How should I benchmark my RAID devices? Are there any tools that
        work particularly well?
   
   

1. General

1.1.1. Where can I find archives for the linux-raid mailing list?

The only archives left seem to be available at [http://marc.theaimsgroup.com
/?l=linux-raid&r=1&w=2] http://marc.theaimsgroup.com/?l=linux-raid&r=1&w=2

1.1.2. Where can I find the latest version of this FAQ?

The latest version of this FAQ will be available from the LDP website at
[http://www.tldp.org/FAQ/] http://www.tldp.org/FAQ/.

1.1.3. What sorts of things does this list cover?

Well, obviously this list covers RAID in relation to Linux. Most of the
discussions are related to the raid code that's been built into the Linux
kernel. There are also a few discussions on getting hardware based RAID
controllers working using Linux as the operating system. Any and all of these
discussions are valid for this list.

2. Kernel

1.2.1. I'm running [insert your linux distribution here]. Do I need to patch
my kernel to make RAID work?

At this point, most major distributions are shipping with a 2.4 based kernel,
which already includes the necessary patches. If your distribution is still
using a 2.2.x kernel, upgrade!

  If you download a 2.2.x kernel from ftp.kernel.org, then you will need to
patch your kernel.

1.2.2. How can I tell if I need to patch my kernel?

That depends on which kernel series you're using. If you're using the 2.4.x
kernels, then you've already got the latest RAID code that's available. If
you're running 2.2.x, see the following instructions on how to find out.

The easiest way is to check what's in /proc/mdstat. Here's a sample from a
2.2.x kernel, with the RAID patches applied.
                                                                             
                                                                             
[gleblanc@grego1 gleblanc]$ cat /proc/mdstat                                 
Personalities : [linear] [raid0] [raid1] [raid5] [translucent]               
read_ahead not set                                                           
unused devices: <none>                                                       
                                                                             
If the contents of /proc/mdstat looks like the above, then you don't need to
patch your kernel.

The "Personalities" line in your kernel may not look exactly like the above,
if you have RAID compiled as modules. Most distributions will have RAID
compiled as modules to save space on the boot diskette. If you're not using
any RAID sets, then you will probably see a blank space at the end of the
"Personalities" line, don't worry, that just means that the RAID modules
aren't loaded yet.

Here's a sample from a 2.2.x kernel, without the RAID patches applied.
[root@serek ~]# cat /proc/mdstat                                             
Personalities : [1 linear] [2 raid0]                                         
read_ahead not set                                                           
md0 : inactive                                                               
md1 : inactive                                                               
md2 : inactive                                                               
md3 : inactive                                                               
                                                                             
                                                                             
If your /proc/mdstat looks like this one, then you need to patch your kernel.

1.2.3. Where can I get the latest RAID patches for my kernel?

The patches for the 2.2.x kernels up to, and including, 2.2.13 are available
from [ftp://ftp.kernel.org/pub/linux/daemons/raid/alpha/] ftp.kernel.org. Use
the kernel patch that most closely matches your kernel revision. For example,
the 2.2.11 patch can also be used on 2.2.12 and 2.2.13.

Important These patches are no longer available from this location! I haven't
          been able to find the new location for them, please email me if you
          know where they've gone.                                           

The patches for 2.2.14 and later kernels are at [http://people.redhat.com/
mingo/raid-patches/] http://people.redhat.com/mingo/raid-patches/. Use the
right patch for your kernel, these patches haven't worked on other kernel
revisions. Please use something like wget/curl/lftp to retrieve this patch,
as it's easier on the server than using a client like Netscape. Downloading
patches with Lynx has been unsuccessful for me; wget may be the easiest way.

1.2.4. How do I apply the patch to a kernel that I just downloaded from
ftp.kernel.org?

First, unpack the kernel into some directory, generally people use /usr/src/
linux. Change to this directory, and type patch -p1 < /path/to/
raid-version.patch.


On my RedHat 6.2 system, I decompressed the 2.2.16 kernel into /usr/src/
linux-2.2.16. From /usr/src/linux-2.2.16, I type in patch -p1 < /home/
gleblanc/raid-2.2.16-A0. Then I rebuild the kernel using make menuconfig and
related builds.

1.2.5. What kind of drives can I use RAID with? Do only SCSI or IDE drives
work? Do I need different patches for different kinds of drives?

Software RAID works with any block device in the Linux kernel. This includes
IDE and SCSI drives, as well as most harware RAID controllers. There are no
different patches for IDE drives vs. SCSI drives.

3. RAID tools

1.3.1. What tools are available for dealing with my Linux Software RAID
arrays?

There are currently two sets of tools available. Both sets work quite well,
and have essentially the same functionalty. I recommend the newer set of
tools, because they're much easier to use, but I'll mention where to get the
older tools as well.

The new set of tools is called mdadm. It doesn't have much of a homepage, but
you can download tarballs and RPMs from [http://www.cse.unsw.edu.au/~neilb/
source/mdadm/] http://www.cse.unsw.edu.au/~neilb/source/mdadm/. I suggest
that anyone who isn't already familar with the 'raidtools' package use these
(and in fact, I suggest that folks who already know the raidtools package
switch over to these).

The older set of tools is called raidtools. They're available from [http://
people.redhat.com/mingo/raidtools/] http://people.redhat.com/mingo/raidtools
/. I believe there are other locations available, since Red Hat Linux is
shipping based on a tarball numbered 1.00.3, which I can't find online. If
anybody knows where these are, please let me know.

4. Disk Failures and Recovery

1.4.1. How can I tell if one of the disks in my RAID array has failed?

A couple of things should indicate when a disk has failed. There should be
quite a few messages in /var/log/messages indicating errors accessing that
device, which should be a good indication that something is wrong.

You should also notice that your /proc/mdstat looks different. Here's a snip
from a good /proc/mdstat
                                                                             
                                                                             
[gleblanc@grego1 gleblanc]$ cat /proc/mdstat                                 
Personalities : [linear] [raid0] [raid1] [raid5] [translucent]               
read_ahead not set                                                           
md0 : active raid1 sdb5[0] sda5[1] 32000 blocks [2/2] [UU]                   
unused devices: <none>                                                       
                                                                             

And here's one from a /proc/mdstat where one of the RAID sets has a missing
disk.
                                                                             
                                                                             
[gleblanc@grego1 gleblanc]$ cat /proc/mdstat                                 
Personalities : [linear] [raid0] [raid1] [raid5] [translucent]               
read_ahead not set                                                           
md0 : active raid1 sdb5[0] sda5[1] 32000 blocks [2/1] [U_]                   
unused devices: <none>                                                       
                                                                             

I don't know if /proc/mdstat will reflect the status of a HOT SPARE. If you
have set one up, you should be watching /var/log/messages for any disk
failures. I'd like to get some logs of a disk failure, and /proc/mdstat from
a system with a hot spare.

1.4.2. So my RAID set is missing a disk, what do I do now?

Software-RAID generally doesn't mark a disk as bad unless it is, so you
probably need a new disk. Most decent quality disks have a 3 year warranty,
but some exceptional (and expensive) SCSI hard drives may have wararnties as
long as 5 years, or even longer. More and more hard drive vendors are giving
a 1 year warranty on their "consumer" drives. I suggest avoiding any drive
with a 1 year warranty if at all possible. Try to have the manufacturer
replace the failed disk if it's still under warranty.

When you get the new disk, power down the system, and install it, then
partition the drive so that it has partitions the size of your missing RAID
partitions. Once you have the partitions set up properly, just run mdadm
--add /dev/md0 /dev/hdc1, where /dev/md0 is the RAID array you're adding the
partition to, and /dev/hdc1 is the partition that you're trying to add.
Reconstruction should start immediately.

If you would prefer to use the RAIDtools suite, you can use the command 
raidhotadd to put the new disk into the array and begin reconstruction. See 
Chapter 6 of the Software RAID HOWTO for more information.

1.4.3. dmesg shows "md: serializing resync, md4 has overlapping physical
units with md5" (where md4 and md5 are two of your software RAID devices).
What does this mean?

In that message "physical units" refers to disks, and not to blocks on the
disks. Since there is more than one RAID array that needs resyncing on one of
the disks in use for your RAID arrays, the RAID code is going to sync md4
first, and md5 second, to avoid excessive seeks (also called thrashing),
which would drastically slow the resync process.

5. Benchmarking

1.5.1. How should I benchmark my RAID devices? Are there any tools that work
particularly well?

There are really a few options for benchmarking your RAID array, depending on
what you're looking to test. RAID offers the greatest speed increases when
there are multiple threads reading from the same RAID volume.

One tool specificly designed to test and show off these performance gains is 
tiobench. It uses multiple read and write threads on the disk, and has some
pretty good reporting.

Another good tool to use is bonnie++. It seems to be more targeted at
benchmarking single drives that at RAID, but still provides useful
information.

One tool NOT to use is hdparm. It does not give useful performance numbers
for any drives that I've heard about, and has been known to give some
incredibly off-the-wall numbers as well. If you want to do real benchmarking,
use one of the tools listed above.

-----BEGIN PGP SIGNED MESSAGE-----

                Cryptographic File System under Linux HOW-TO
                             LINUX SECURITY FAQ
                               March 14, 1996
      Copyright (C) 1996 Alexander O. Yuriev (alex@bach.cis.temple.edu)
                              CIS Laboratories
                              TEMPLE UNIVERSITY
                                     USA

 	This document describes how to compile, install and setup CFS 
	that was written by Matt Blaze of AT&T, under Linux.  The following 
	copyright statement copied directly from CFS 1.12 describes 
	the restrictions on the CFS usage:
 
 * The author of this software is Matt Blaze.
 *              Copyright (c) 1992, 1993, 1994 by AT&T.
 * Permission to use, copy, and modify this software without fee
 * is hereby granted, provided that this entire notice is included in
 * all copies of any software which is or includes a copy or
 * modification of this software and in all copies of the supporting
 * documentation for such software.
 *
 * This software is subject to United States export controls.  You may
 * not export it, in whole or in part, or cause or allow such export,
 * through act or omission, without prior authorization from the United
 * States government and written permission from AT&T.  In particular,
 * you may not make any part of this software available for general or
 * unrestricted distribution to others, nor may you disclose this software
 * to persons other than citizens and permanent residents of the United
 * States and Canada. 
 *
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTY.  IN PARTICULAR, NEITHER THE AUTHORS NOR AT&T MAKE ANY
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY
 * OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.

	Although the information in this document is believed to be
	correct, neither the Author nor CIS Laboratories, nor Temple University
	provides any kind of WARRANTIES and is not/are not responsible for
	what happens if you follow these guidelines. The information in this
	document is provided AS IS! 

ABOUT CFS

	CFS provides application-independent encryption/decryption of the
 	filesystem layer that does not require modification of the
 	underlying filesystem code nor any kind of modification of the
 	kernel source.  The symmetric cipher implemented in the mainstream
 	version of CFS is based on the modified DES cipher running in CBC
 	mode making the brute-force attack against the usual 56-bit DES
 	key-space unrealistic.  The structure of CFS makes replacement of
 	the mainstream DES cipher with a Fast-DES or any other symmetric
 	cipher an extremely straightforward process.  Please refer to the
 	"White" paper about CFS for more information
 	(ftp://bach.cis.temple.edu/pub/Papers/cfs.ps)

COMPILING AND INSTALLING CFS

	CFS does not compile "out of the box" under Linux. Follow these
	instructions to get CFS running or your Linux system. There are
	several methods to make CFS work under Linux, the cleanest one of
	which is based on the modifications performed by Olaf Kirch. His
	version of CFS is available from:

	ftp://ftp.mathematik.th-darmstadt.de/pub/linux/okir/cfs-1.1.2.tar.gz

	Olaf signed the modified archive. The PGP signature for the modified 
	version of the cfs-1.1.2 can be obtained from 

	ftp://ftp.mathematik.th-darmstadt.de/pub/linux/okir/cfs-1.1.2.pgp

	In single-user mode, compile CFS by using the "make" command.

	After compilation is completed, install "cfsd", "cdetach", "ccat",
	"cmkdir", "cname" and "cattach" to the /usr/local/sbin directory
	with the ownership "root:wheel" and the access mode "551".
	Generate a list of MD5 hashes of the clean binaries. Now copy these
	files together with the "md5sum" to a media such as an image of a CD
	or a floppy and make the media write protected.

	Create the directory /.cfsfs which will be used as a hook for the
	CFS server.  Make that directory owned by root:root and protected
	with access mode "000".  Create the directory /securefs which will
	become a root of the CFS tree.

	Add the following lines into your /etc/rc.d/rc.local:

	echo -n "Initializing secure filesystem: "
        if [ -x /usr/local/sbin/cfsd ]; then
                /usr/local/sbin/cfsd > /dev/null
		echo -n "cfsd "
                /bin/mount -o port=3049,intr localhost:/.cfsfs /securefs
		echo -n "loopback "
                echo "done"
        else 
	   echo "Cryptographic Filesystem is not installed"
	fi

	Users of the Caldera Network Desktop and Red Hat Commercial Linux
	distributions should add the file "cfsfs" that is attached at the end
	of this document to their /etc/rc.d/init.d directory. Then symlink
	the file "S65cfsfs" to it in the appropriate run-level directories
	using the command:

		ln -s ../init.d/cfsfs S65cfsfs

	in /etc/rc.d/rcX.d, where X is a run-level number, add the line:

		/.cfsfs		localhost

	to /etc/exports. Finally, add the line:

		portmap: 127.0.0.1

	to the /etc/hosts.allow file. 

	You should now restart your computer.  When it comes back into a
	multiuser mode, issue a mount command to verify that CFS is running.
	If everything was successful, you should see a new line in a list of
	filesystems:
		
localhost:/.cfsfs on /securefs type nfs (rw,port=3049,intr,addr=127.0.0.1)


CREATING CFS DIRECTORY

	To create a CFS protected directory called "secret" use the command

		cmkdir secret

	You will be requested to supply and verify the passphrase.  If you
	succeed, a new directory named "secret" will appear in the current
	directory. This directory will contain encrypted information which
	will be accessible only in the encrypted form unless it is attached
	to the CFS tree.
	
	In order to add the "secret" directory to a list of directories
	managed by CFS, it has to be attached to the CFS tree using the
	command:
	
		cattach secret Big-Secret
				  
	CFS will request you to type the access passphrase. If it matches
	the passphrase supplied to the "cmkdir" command that created the
	directory originally, then the information in the secret directory
	will be accessible in a non-encrypted form under /securefs/Big-Secret
	to the user who supplied the correct passphrase.  Please note that
	usually it takes about a minute to attach a protected directory to
	the CFS tree. When the user is finished manipulating the information 
	they should issue the command:
	
	        cdetach Big-Secret
		
	to destroy the access key. This command removes the directory
	"secret" from the list of directories managed by CFS making it
	impossible to access cleartext information in that directory until
	it is again attached using the "cattach" command.

PROTECTION OF CFS

	In order to grant a user access to encrypted parts of the directory
	tree, CFS requires the user to supply a passphrase that is used to
	generate a set of access keys. A compromise of a passphrase allows
	an intruder to access the encrypted information through the Unix
	security model. Therefore it is extremely important to protect
	access passphrases. There are two basic ways that can be used by
	intruders to gain access to your passphrase. They are (1) Sniffer
	attacks (2) Attack against the protocol.  The following simple
	guidelines can be used to minimize the possibility of a successful
	attack against CFS:

		1. Make sure that the CFS binaries are not compromised in
		   any form. 

			* Ensure that "cattach", "ccat", "cmkdir", "cname",
		          the CFS server "cfsd" and finally, "cdattach" 
			  are not replaced with Trojan versions that record 
			  access passphrases or, in a case of "cfsd", 
			  access keys.  

			* Ensure that the CFS server is not compromised in a 
			  way that it does not perform the encryption 
			  procedure correctly. 

			* An attack against "cdeattach" usually involves a 
			  small modification that prevents correct 
			  destruction of access keys allowing an intruder 
			  to gain access to a supposedly detached part of 
			  the directory tree.

		   The simplest way to verify that binaries are not
		   compromised is to statically link them and place them on
		   a CD.  Another way is to again statically link the
		   binaries, use "md5sum" message-digest calculator and
		   write their MD5 hashes onto a write-protected media.
		   Prior to using any CFS programs on a system, mount
		   the floppy disk and compare MD5 hashes of binaries on the
		   system with the hashes of the clean statically linked
		   copies located on the floppy disk, replacing the
		   compromised versions.
		   
		2. Keyboard grabbers used to grab passphrases as they are
		   being typed rely on the fact that most users are careless
		   enough to ignore the following simple guidelines:
		   
		   	1. When typing a passphrase in an xterm, make sure
			   that the xterm program is not compromised and use
			   the "Secure Keyboard" option while typing the
			   passphrase. This prevents keystrokes from being
			   intercepted by X grabbers.
			   
			2. Type passphrases from a terminal attached directly
			   to a serial port of the system when such terminal
			   is available.
			   
			3. Make sure that your pty and ttys permissions
			   disallow others from reading your keystrokes
			   directly from the device node.

		3. Never type your passphrase across the network, even if
		   the network is located behind a firewall and you trust
		   everybody who is connected to your network not to use
		   sniffers. This also applies to networks that use
		   scrambling routers, because there is absolutely no
		   guarantee that routers use a strong encryption or do not
		   have a back door or a loophole that potentially can allow
		   an intruder to defeat encryption used by a router.  If
		   you have to type your password across the network, do it
		   only if you are using an encrypted tunnel between systems
		   such as the one created by the deslogin(8) protocol.
		   		
		4. Always de-attach CFS protected trees from the  filesystem when
		   not using them, even when you are leaving your system for 
		   "only" a couple of minutes.

KNOWN PROBLEMS WITH CFS

	At this moment there is only one problem that can be reproduced. 
	"Permission denied" error is generated when a user attempts to 
	access the files located on a compact disc.


CREDITS

	The following people helped in the preporation process of this
	document: Topher Hughes of the Dickinson College, Elie Rosenblum of
	the Montgomery Blair High School, Mario D. Santana of the Florida
	State University, Daniel P Zepeda and Olaf Kirch.


====================[cfsfs]======================
#!/bin/sh
#
# $Header: /Secure/secure-doc/linux/CFS/RCS/CFS-Doc,v 1.4 1996/03/15 04:49:37 alex Exp alex $
#
# cfsfs		Crypto filesystem 
#
# Author:	Alexander O. Yuriev <alex@bach.cis.temple.edu>
#		Derived from cron		

# Source function library.
. /etc/rc.d/init.d/functions

# See how we were called.
case "$1" in
  start)
	echo -n "Starting Crypto Filesystem: "
	if [ -x /usr/local/sbin/cfsd ]; then
		/usr/local/sbin/cfsd > /dev/null
		/bin/mount -o port=3049,intr localhost:/.cfsfs /securefs
		echo "done"
	else 
		echo -n "Crypto Filesystem is not installed"
	fi
	touch /var/lock/subsys/cfsfs
	;;
  stop)
	echo -n "Stopping Crypto filesystem: "
	umount /securefs
	killproc cfsd
	echo
	rm -f /var/lock/subsys/cfsfs
	;;
  *)
	echo "Usage: cfsfs {start|stop}"
	exit 1
esac

exit 0
====================[end of cfsfs]======================

-----BEGIN PGP SIGNATURE-----
Version: 2.6.2

iQCVAwUBMXVewoxFUz2t8+6VAQHHoAP/WEZ9luRJ/gFgQydBbEfM2vXTF/1VCe7D
KoT3X5bRP+zZVufGt6B6n0IjDUXFX/Lv6264ZZ6jF/BKO9mrLxoGI5sA6Y6HQ7fb
DFy8+XdZhponnuih3eJ5z46bRwLWVd+lr2+ORK17ukTLbsY65kzF3wTzczRNqL9G
wPN6j3+LVXE=
=BEE2
-----END PGP SIGNATURE-----